World.cfg
World.isClient
World.CurWorld
World.GameName
World.defaultMap
World.CurMap
World.enableReconnectNetwork
Map.cfg
Map.id
Map.name
Map.static
Region.key
Region.cfg
Region.map
Region.mix
Region.max
Map.players
Map.objects
Object.objID
Object.world
Object.ownerId
Object.isMainPlayer
Object.isEntity
Object.isPlayer
Object.map
Entity.name
Entity.curHp
Entity.curVp
Entity.movingStyle
Entity.isMoving
Entity.onGround
Entity.isFlying
Player.platformUserId
Team.id
Team.playerCount
Team.createTime
config.fullName
config.modName
config.plugin
config.displayName
PlayerControl.entity
PlayerControl.enable
Blockman.player
Blockman.world
Blockman.gameSettings
GameSettings.poleForward
GameSettings.poleStrafe
GameSettings.hideCloud
GameSettings.hideFog
GameSettings.viewBobbing
GameSettings.bobbingCameraEffect
Part.restitution
Part.friction
Part.density
Part.lineVelocity
Part.angleVelocity
Part.useAnchor
Part.useGravity
Part.useCollide
Decal.decalOffset
Decal.decalColor
Decal.decalAlpha
Decal.decalSurface
Decal.decalImageType
Decal.decalTiling
Decal.decalTexture
MeshPart.mesh
Force.force = Vector3.new(0, 10, 0)
Force.useRelativeForce = true
Torque.torque = Vector3.new(0, 10, 0)
Force.useRelativeTorque = true
RodConstraint.length = 2
RodConstraint.fixedJustify = true
RodConstraint.radius = 1
HingeConstraint.useSpring = true
HingeConstraint.springTargetAngle = 90
HingeConstraint.stiffness = 5
HingeConstraint.damping = 1
HingeConstraint.useMoter = true
HingeConstraint.motorTargetAngleVelocity = 30
HingeConstraint.motorForce = 10
SpringConstraint.length = 10
SpringConstraint.stiffness = 52
SpringConstraint.damping = 0.1
SpringConstraint.fixedJustify = true
SpringConstraint.radius = 0.25
SpringConstraint.thickness = 0.20
SpringConstraint.coil = 1
RopeConstraint.length = 10
RopeConstraint.radius = 10
SliderConstraint.upperLimit = 10
SliderConstraint.lowerLimit = 10
Instance.name
Instance.id
ConstraintBase.visible
ConstraintBase.collision
ConstraintBase.slavePartID
ConstrainBase.masterLocalPos
ConstrainBase.slaveLocalPos
ConstrainBase.color
World.Now()
Wrold.Timer(time, func, ...)
World.LightTimer(stack, time, func, ...)
World:getMapById(id)
World:getMap(name)
World:getOrCreateStaticMap(name)
World:createDynamicMap(name, closeWhenEmpty)
World.SystemChat(typ, key, ...)
World.SystemNotice(typ, key, time, ...)
World:isTimeStopped()
World:setTimeStopped(stepped)
World:setWorldTimeSpeed(time)
World:getObject(objID)
World:getAllObject()
World:filterWord(content)
Map:isValid()
Map:getBlock(pos)
Map:getRegion(key)
Map:getAllRegion()
Map:getBlockConfigId(pos)
Map:posConvertBlock(pos, fullName)
Map:fillBlocks(min, max, fullName)
Map:clearBlocksInArea(min, max, fullNames)
Map:checkBlockFall(pos)
Map:clearBlocks(min, max, all)
Map:getTouchObject(min, max)
Map:getTouchEntities(min, max, includeDead)
Map:getNearbyEntities(pos, maxDistance)
Map:getBlockPosInArea(min, max, fullNames)
Map:setVar(key, value)
Map:getVar(key)
Map:movePlayersTo(map, pos)
Map:saveBlocks(min, max)
Map:loadBlocks(min, max, data)
Map:createBlock(pos, fullName)
Map:removeBlock(pos)
Map:getBlockData(pos)
Map:getOrCreateBlockData(pos)
Map:setBlockData(pos, value)
Map:bakeLightAndSave(maxLightMode, forceRecalculate)
Region:isOwner(object)
Region:setOwner(obj)
Region:removeOwner(obj)
Map:addRegion(min, max, cfgName)
Map:removeRegion(key, isCheckTrigger)
Block.GetNameCfgId(name)
Block.GetNameCfg(name)
Block.GetAirBlockName()
Map:triggerRegions(pos, name, context)
REGION_ENTER
REGION_LEAVE
BLOCK_CLICK
BLOCK_PLACE
BLOCK_BREAK
BLOCK_SPAWN
BLOCK_REMOVED
BLOCK_HITTED
BLOCK_HITTED_BY_RAY
BLOCK_TOUCH
BLOCK_APART
Map:getWorkSpace()
Map:getTouchParts(min, max)
Object:cfg()
Object:data(key)
Object:setData(key, val)
Object:timer(time, function, ...)
Object:lightTimer(stack, time, func, ...)
Object:distance(obj)
Object:isValid()
Object:setMap(map)
Object:setRotationYaw(yaw)
Object:setRotationPitch(pitch)
Object:getRotationYaw()
Object:getRotationPitch()
Object:setPosition(pos)
Object:getPosition()
Object:delayCall(func, time)
Object:destroy()
Entity:prop(key)
Entity:setProp(key, value)
Entity:isSwimming()
Entity:jump(x, z)
Entity:getSpeed()
Entity:getCollidableUnderfootObjId()
Entity:isControl()
Entity:setBodyTurnSpeed(speed)
Entity:getBodyTurnSpeed()
Entity:isClimbing()
Entity:curBlockPos()
Entity:changeFlyMode(mode)
Entity:setPos(pos, yaw, pitch)
Entity:getFrontPos(dis, isFoot, bCenter)
Entity:tray()
Entity:owner()
Entity:getNearbyEntities(maxDistance, filter)
Entity:getEyePos()
Entity:setAlwaysAction(action)
Entity:updateUpperAction(action, ticks)
Entity:getBaseAction()
Entity:getUpperAction()
Entity:getPrevBaseAction()
Entity:getPrevUpperAction()
Entity:setAlpha(alpha, time)
Entity:removeActionMapping(action)
Entity:isDead()
Entity:getInvisible()
Entity:getBodyYaw()
Entity:setBodyYaw(yaw)
Entity:setShowName(txt)
Entity:setHeadText(x, y, txt)
Entity:setShowHpColor(color)
Entity:getShowHpColor()
Entity:addEffect(name, effectName, once, pos, yaw, scale, socketName)
Entity:delEffect(name, smooth)
Entity:getActorName()
Entity:setActorScale(scale)
Entity:setAlpha(alpha, time)
Entity:play3dSound(filename, isLoop)
Entity:showHeadMessage(txt)
Entity:setGuideTarget(targetPosition, texName, speed)
Entity:setGuideTarget1(targetEntity, texName, speed)
Entity:delGuideTarget()
Entity:setGhost(enable, color, interval, num)
Entity:setHoldModelARGBStrength(r, g, b, a)
Entity:getHoldModelARGBStrength()
Entity:setUseOverlayColorReplaceMode(masterSlaveName, isUse)
Entity:setOverlayColor(masterSlaveName, color)
Entity:applySkin(skin)
Entity:setEntityHide(hide)
Entity:changeActor(actorName, clearSkin)
Entity:getHandItem()
Entity:searchItem(cfgKey, val, type_list)
Entity:setEntityActorFlashEffect(add)
Entity:parserBubbleMsg(packet)
Entity:setHp(hp)
Entity:addHp(hp)
Entity:setVp(vp)
Entity:addVp(vp)
Entity:setPlayerControl(player)
Entity:serverRebirth(map, pos, yaw, pitch)
Entity:getCtrlPlayer()
Entity:setMapPos(map, pos, yaw, pitch)
Entity:face2Pos(pos)
Entity:changeSkin(skinData)
Entity:getTeam()
Entity:getRebirthPos()
Entity:setRebirthPos(pos, map)
Entity:addItem(fullName, count, proc, reason)
Entity:takeDamage(damage, from, isFormula, cause)
Entity:kill(from, cause)
EntitySever.Create(params, func)
EntityClient.CreateClientEntity(params)
ENTITY_ENTER
ENTITY_LEAVE
ENTITY_CLICK
ENTITY_TOUCHDOWN
ENTITY_DAMAGE
ENTITY_DIE
ENTITY_REBIRTH
ENTITY_USE_ITEM
WEAR_EQUIPMEN
TAKEOFF_EQUIPMEN
HAND_ITEM_CHANGED
JOIN_TEAM
LEAVE_TEAM
ENTER_MAP
LEAVE_MAP
ENTITY_TOUCH_ALL
ENTITY_HITTED
HIT_ENTITY
HIT_BLOCK
ENTITY_HITTED_BY_RAY
HIT_ENTITY_BY_RAY
HIT_BLOCK_BY_RAY
SETTLE_ITEM
REMOVE_ITEM
Entity.GetCfg(cfgName)
Entity:getValue(key)
Entity.addValueDef(key, init, toSelf, toOther, saveDB, client)
Entity.addValueFunc(key, func)
Entity:setValue(key, value, noSync)
Entity:doHurtRepel(vector)
Entity:setActorPause(isPause)
Entity:getActorPause()
Entity:setActorAnimRewind(rewind)
Entity:isActorAnimRewind()
Entity:refreshUpperAction()
Entity:refreshBaseAction()
Entity:setBaseActionScale(scale)
Entity:getBaseActionScale()
Entity:setActionTimeScale(action, scale)
Entity:getActionTimeScale(action)
Entity:removeActionTimeScale(action)
Entity:isActionInTimeScaleMap(action)
Entity:getAIControl()
Entity:startAI()
Entity:stopAI()
Entity:setAITargetPos(pos, enable)
Entity:enableAITargetPos(enable)
Entity:addSkill( fullName )
Entity:removeSkill ( fullName )
Entity:addBuff( fullName )
Entity:removeBuff(buff)
Player:createPet(cfgName, show, map, pos)
Player:addPet(entity, index)
Player:relievedPet(index)
Player:changePetCfg(index, cfgName)
Player:showPet(index, map, pos)
Player:hidePet(index)
Player:getPet(index)
Player:addCurrency(coinName, count, reason)
Player:payCurrency(coinName, count, clear, check, reason)
Player:getWalletBalance(coinName)
Player:sendTip(tipType, textKey, keepTime)
ENTITY_ENTER
ENTITY_LEAVE
PRE_CHECK_PICK_ITEM
Skill.Cast(fullName, packet, entity)
Skill.Cfg(fullName)
HIT_ENTITY
HIT_BLOCK
Missile.GetCfg(cfgName)
DropItemServer.Create(params)
DebugDraw.Instance()
DebugDraw:drawLine(from, to, color)
DebugDraw:drawAABB(min, max, color)
DebugDraw.addEntry(flagName, renderFunc)
DebugDraw:drawTriangle(vertex1, vertex2, vertex3, color)
DebugDraw:drawCircle(center, radius, normal, color)
DebugDraw:drawSphere(center, radius, color)
DebugDraw:setLineWidth(width)
TdAudioEngine.Instance()
TdAudioEngine:play3dSound(filePath, pos, isLoop)
TdAudioEngine:set3DMinMaxDistance(nSoundId, minDistance, maxDistance)
TdAudioEngine:set3DRollOffMode(nSoundId, mode)
TdAudioEngine:play2dSound(filePath, isLoop)
TdAudioEngine:stopSound(nSoundId)
TdAudioEngine:setSoundsVolume(nSoundId, volume)
TdAudioEngine:getSoundsVolume(nSoundId)
TdAudioEngine:isPlaying(nSoundId)
TdAudioEngine:pauseSound(nSoundId)
TdAudioEngine:resumeSound(nSoundId)
TdAudioEngine:allMute(isMute)
TdAudioEngine:setGlobalVolume(volume)
TdAudioEngine:setSoundSpeed(nSoundId, percentage)
TdAudioEngine:getGlobalVolume()
PlayerControl:attach(entity)
PlayerControl:jump()
Blockman.Instance()
Blockman:getUserAction()
Blockman:getHitInfo()
Blockman.Instance():switchPersonView()
Blockman.Instance():setCanSwitchView(false)
Blockman.Instance():setPersonView(1)
Blockman.Instance():getPersonView()
Blockman.Instance():control()
Blockman.Instance():setViewEntity(entity)
Blockman.Instance():viewEntity()
Blockman.Instance():getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)
Blockman.Instance():getClosestRayTraceResult(startPos, endPos, rayLength)
Blockman.Instance():getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)
Blockman.Instance():changeCameraView(pos, yaw, pitch, distance, smooth)
Blockman.Instance():changeCameraCfg(config, modeViewIndex)
Blockman.Instance():getCameraInfo(viewIndex)
Blockman.Instance():getScreenPos(position)
Blockman.Instance():getScreenSize()
Blockman.Instance():playEffectByPos(templateName, position, yaw, duration, scale)
Blockman.Instance():delEffect(templateName, position)
Blockman.Instance():addBetweenEffect(templateName, position, endPos, duration)
Blockman.Instance():trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)
Blockman.Instance():getClickPos()
Blockman.Instance():toScreenClickPos(pos)
item:cfg()
item:full_name()
item:stack_count_max()
item:null()
item:tid()
item:slot()
item:replace(fullName)
item:consume(count)
item:stack_count()
item:set_stack_count(count)
item:stack_free()
item:is_block()
item:block_id()
item:block_cfg()
item:set_block_id(id)
item:set_block(name)
item:model(act)
item:icon()
Item.new(fullName, count)
Item.newBlock(fullName, count)
tray:owner()
tray:capacity()
tray:set_capacity(capacity)
tray:add_capacity(capacity)
tray:max_capacity()
tray:set_max_capacity(capacity)
tray:avail_capacity()
tray:type()
tray:is_valid_slot(slot)
tray:fetch_item(slot)
tray:query_items(cmp)
tray:find_free(force)
tray:count_item_num_by_fullname(fullname)
EntityTrays:add_tray(tray)
EntityTrays:fetch_tray(tid)
EntityTrays:query_trays(filter)
EntityTrays:find_item(item_name)
Tray:new_tray(type, capacity)
tray:remove_item(slot)
tray:settle_item(slot, item)
DebugDraw.Instance()
DebugDraw:isEnabled()
DebugDraw:setEnabled(value)
DebugDraw:isDrawColliderEnabled()
DebugDraw:setDrawColliderEnabled(enabled)
DebugDraw:isDrawRegionEnabled()
DebugDraw:setDrawRegionEnabled(enabled)
Blockman.Instance().gameSettings:getCameraSensitive()
Blockman.Instance().gameSettings:setCameraSensitive(sensitive)
Blockman.Instance().gameSettings:setCustomFog(start, end, density, color)
Blockman.Instance().gameSettings:setMainLightDir(dir)
Blockman.Instance().gameSettings:setMainLightColor(color)
Blockman.Instance().gameSettings:setSubLightColor(color)
Blockman.Instance().gameSettings:setAmbientColor(color)
Blockman.Instance().gameSettings:setBrightness(color)
Blockman.Instance().gameSettings:getMainLightDir()
Blockman.Instance().gameSettings:getMainLightColor()
Blockman.Instance().gameSettings:getSubLightColor()
Blockman.Instance().gameSettings:getAmbientColor()
Blockman.Instance().gameSettings:getBrightness()
Blockman.Instance().gameSettings:setActorReceiveBlockLight(val)
Blockman.Instance().gameSettings:setActorMainLightColor(color)
Blockman.Instance().gameSettings:setActorSubLightColor(color)
Blockman.Instance().gameSettings:setActorAmbientColor(color)
Blockman.Instance().gameSettings:setActorBrightness(color)
Blockman.Instance().gameSettings:getActorMainLightColor()
Blockman.Instance().gameSettings:getActorSubLightColor()
Blockman.Instance().gameSettings:getActorAmbientColor()
Blockman.Instance().gameSettings:getActorBrightness()
Blockman.Instance().gameSettings:setCurQualityLevel(level)
Blockman.Instance().gameSettings:setCurQualityLevel(level)
Blockman.Instance().gameSettings:getEnableSpecular()
Blockman.Instance().gameSettings:setEnableBlockRender(_val)
Blockman.Instance().gameSettings:setEnableActorRender(_val)
Blockman.Instance().gameSettings:setEnableEffectRender(_val)
Blockman.Instance().gameSettings:setWorldEffectVisualDistance(distance)
Blockman.Instance().gameSettings:getWorldEffectVisualDistance()
Blockman.Instance().gameSettings:clearSky()
Blockman.Instance().gameSettings:addSky(right, left, top, bottom, back, front, time, transition)
Blockman.Instance().gameSettings:setEnableAntiAliasing(_val)
Blockman.Instance().gameSettings:getEnableAntiAliasing()
Blockman.Instance().gameSettings:setEnableBloom(_val)
Blockman.Instance().gameSettings:getEnableBloom()
Blockman.Instance().gameSettings:setBloomThreshold(val)
Blockman.Instance().gameSettings:getBloomThreshold()
Blockman.Instance().gameSettings:setBloomSaturation(val)
Blockman.Instance().gameSettings:getBloomSaturation()
Blockman.Instance().gameSettings:setBloomDeviation(val)
Blockman.Instance().gameSettings:getBloomDeviation()
Blockman.Instance().gameSettings:setBloomIntensity(val)
Blockman.Instance().gameSettings:getBloomIntensity()
Blockman.Instance().gameSettings:setEnableMotionBlur(_val)
Blockman.Instance().gameSettings:getEnableMotionBlur()
Blockman.Instance().gameSettings:setMotionBlurStrength(_val)
Blockman.Instance().gameSettings:getMotionBlurStrength()
Blockman.Instance().gameSettings:setEnableRadialBlur(_val)
Blockman.Instance().gameSettings:setRadialBlurStrength(_val)
Blockman.Instance().gameSettings:loadCameraCfg(config)
Blockman.Instance().gameSettings:setPersonView(viewMode)
Blockman.Instance().gameSettings:clearLight()
Blockman.Instance().gameSettings:addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)
Blockman.Instance().gameSettings:clearActorLight()
Blockman.Instance().gameSettings:addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)
Blockman.Instance().gameSettings:beginMouseMove(x, y)
Blockman.Instance().gameSettings:setMouseMoveState(bState)
Blockman.Instance().gameSettings:endMouseMove(x, y)
Blockman.Instance().gameSettings:setMousePos(x, y, immd)
Blockman.Instance().gameSettings:clearMousePos()
Blockman.Instance().gameSettings:setLockViewPos(value)
Blockman.Instance().gameSettings:setExtraCameraDistance(distance)
Blockman.Instance().gameSettings:isLockBodyRotation()
Blockman.Instance().gameSettings:setLockBodyRotation(value)
Blockman.Instance().gameSettings:isLockSlideScreen()
Blockman.Instance().gameSettings:setLockSlideScreen(value)
Game.GetService(name)
Game.TriggersAll(name)
Game.GetStartGamePlayerCount()
Game.GetGameTime()
Game.GetAllPlayers()
Game.GetAllPlayersCount()
Game.GetSurvivePlayers()
Game.GetPlayerByUserId(userId)
Game.GetSurvivePlayersCount()
GAME_INIT
Game.CreateTeam(id)
Game.TryJoinTeamByPlayer(player, teamId)
Game.GetTeam(id, create)
Game.Exit(player)
GAME_START
GAME_OVER
GAME_EXIT
Team:getFirstPlayer()
Team:joinEntity(entity)
Team:leaveEntity(entity)
Team:dismiss()
Team:getEntityList()
UI:openWindow("dwInstance")
UI:openSceneWindow
UI:createWindow(name, type)
UI:createStaticText(name)
UI:createStaticImage(name)
UI:createButton(name)
UI:closeWindow("dwInstance", ...)
UI:closeSceneWindow("dw1")
UI:isOpenWindow("dwInstance")
Window:child(childName)
Window:close(...)
Window:isAlive()
Window:getWindow()
Window:clone()
window:setProperty("Alpha", 0.5)
window:setAlpha(1.0)
window:setDestroyedByParent(true)
window:setAlwaysOnTop(true)
window:setLevel(1)
window:setEnabled(true)
window:setVisible(true)
window:setClippedByParent(true)
window:setWantsMultiClickEvents(true)
window:setMousePassThroughEnabled(true)
window:setText("aa")
window:setHorizontalAlignment(1)
window:setArea2({0,0},{0,0},{0,100},{0,100})
window:setVerticalAlignment(1)
window:setPosition(UDim2.new(0, 100, 0, 100))
window:setSize(UDim2.new(1, 0, 1, 0))
window:setXPosition(UDim.new(0,100))
window:setYPosition(UDim.new(0.5,0))
window:setWidth(UDim.new(0.5,0))
window:setHeight(UDim.new(0.1,100))
window:setFontStyle("BungeeRegular")
window:setFontSize(40)
window:getProperty("Alpha")
window:getType()
window:getAlpha()
window:isDestroyedByParent()
window:isAlwaysOnTop()
window:getLevel()
window:isDisabled()
window:isVisible()
window:isClippedByParent()
window:wantsMultiClickEvents()
window:isMousePassThroughEnabled()
window:getText()
window:getHorizontalAlignment()
window:getVerticalAlignment()
window:getPosition()
window:getSize()
window:getPixelPosition()
window:getXPosition()
window:getPixelSize()
window:getYPosition()
window:getWidth()
window:getHeight()
window:getID()
window:isChildID(Id)
window:isChildIDRecursive(Id)
window:getChildById(id)
window:getChildRecursiveById(id)
window:getChildAtIdx(0)
window:getParent()
window:getRootWindow()
window:destroy()
window:removeChildByID(id)
window:cleanupChildren()
window:addChild(child)
window:removeChild(child)
window:getChildCount()
window:isChild(child)
LayoutContainer:markNeedsLayouting()
LayoutContainer:needsLayouting()
LayoutContainer:layout()
HorizontalLayoutContainer:setProperty("space", 5)
HorizontalLayoutContainer:getProperty("space")
VerticalLayoutContainer:setProperty("space", 5)
VerticalLayoutContainer:getProperty("space")
GridView:setProperty("hInterval", 20)
GridView:getProperty("rowSize")
Image:setProperty("Image", "icon_7.png")
Image:getProperty("Image")
Image:setImage("gameres|asset/Texture/Gui/def_image.png")
Image:isFrameEnabled()
Image:setFrameEnabled(true)
Image:isBackgroundEnabled()
Image:setBackgroundEnabled(true)
Text:setProperty("FrameEnabled", false)
Text:getProperty("FrameEnabled")
Text:setTextColours(Color3.new(1,1,1))
Text:getTextColours()
Text:setHorizontalFormatting(0)
Text:getHorizontalFormatting()
Text:setVerticalFormatting(0)
Text:getVerticalFormatting()
Text:isFrameEnabled()
Text:setFrameEnabled(true)
Text:isBackgroundEnabled()
Text:setBackgroundEnabled(true)
Text:setVerticalScrollbarEnabled(true)
Text:isVerticalScrollbarEnabled()
Text:setHorizontalScrollbarEnabled(true)
Text:isHorizontalScrollbarEnabled()
Button:setProperty("NormalImage", "icon_7.png")
Button:getProperty("NormalImage")
Button:isPushed()
Button:setPushedState(true)
Button:setNormalImage("gameres|asset/Texture/Gui/button_green_nor.png")
Button:setPushedImage("gameres|asset/Texture/Gui/button_green_act.png")
ProgressBar:setProperty("CurrentProgress", 0.5)
ProgressBar:getProperty("CurrentProgress")
ProgressBar:getProgress()
ProgressBar:setProgress(0.5)
ProgressBar:getStepSize()
ProgressBar:setStepSize(0.01)
ProgressBar:step()
ProgressBar:adjustProgress(delta)
ProgressBar:setVertical(true)
ProgressBar:isVertical()
ProgressBar:setReversed(true)
ProgressBar:isReversed()
Slider:getCurrentValue()
Slider:getMaxValue()
Slider:getClickStep()
Slider:setMaxValue(maxVal)
Slider:setCurrentValue(value)
Slider:setClickStep(step)
Slider.onSliderValueChanged = function() end
Editbox:setSelection(start_pos,end_pos)
Editbox:setMaskCodePoint(code_point)
Editbox:isReadOnly()
Editbox:isTextMasked()
Editbox:getSelectionStartIndex()
Editbox:getSelectionEndIndex()
Editbox:getSelectionLength()
Editbox:getMaskCodePoint()
Editbox:getMaxTextLength()
Editbox:setReadOnly(setting)
Editbox:setTextMasked(setting)
Editbox:setSelectionStart(start_pos)
Editbox:setSelectionLength(length)
Editbox:setMaxTextLength(max_len)
Editbox.onReadOnlyModeChanged = function() end
Editbox.onMaskedRenderingModeChanged = function() end
Editbox.onMaximumTextLengthChanged = function() end
Editbox.onTextSelectionChanged = function() end
Editbox.onEditboxFull = function() end
Editbox.onTextAccepted = function() end
ScrollableView:setContentPaneArea(area)
ScrollableView:setVerticalOverlapSize(overlap)
ScrollableView:getVerticalOverlapSize()
ScrollableView:getVerticalScrollPosition()
ScrollableView:setVerticalScrollPosition(position)
ScrollableView:isVertScrollbarAlwaysShown()
ScrollableView:setShowVertScrollbar(setting)
ScrollableView:isHorzScrollbarAlwaysShown()
ScrollableView:setShowHorzScrollbar(setting)
ScrollableView:isContentPaneAutoSized()
ScrollableView:setContentPaneAutoSized(setting)
ScrollableView:getContentPaneArea()
ScrollableView:getHorizontalStepSize()
ScrollableView: setHorizontalStepSize(step)
ScrollableView:getHorizontalOverlapSize()
ScrollableView:setHorizontalOverlapSize(overlap)
ScrollableView:getHorizontalScrollPosition()
ScrollableView:setHorizontalScrollPosition(position)
ScrollableView:getViewableArea()
ScrollableView.onContentPaneChanged = function() end
ScrollableView.onAutoSizeSettingChanged = function() end
ToggleButton:setSelected(select)
ToggleButton:isSelected()
ToggleButton.onSelectStateChanged = function() end
RadioButton:setGroupID(group)
RadioButton:getGroupID()
RadioButton:isSelected()
ActorWindow:setActorName("boy.actor")
ActorWindow:getActorName()
ActorWindow:setSkillName("idle")
ActorWindow:getSkillName()
ActorWindow:setActorScale(0.5)
ActorWindow:getActorScale()
ActorWindow:setPosition(Lib.v3(10,10,10))
ActorWindow:getPosition()
ActorWindow:setRotateX(90)
ActorWindow:getRotateX()
ActorWindow:setRotateY(90)
ActorWindow:getRotateY()
ActorWindow:setRotateZ(90)
ActorWindow:getRotateZ()
ActorWindow:useBodyPart("hair","my_source_hair1")
ActorWindow:unloadBodyPart("hair")
ActorWindow:scaleBodyPart("head",Lib.v3(2,1,1))
ActorWindow:offsetBodyPart("head",Lib.v3(2,1,1))
ActorWindow:isActorPrepared()
sceneWindow:setRotation({x = 0, y = 1, z = 2})
sceneWindow:getRotation()
sceneWindow:setPosition({x = 0, y = 1, z = 2})
sceneWindow:getPosition()
sceneWindow:setObjID(10)
sceneWindow:getObjID()
Lang:toText(arg)
Lib.getYearMonthStr(time)
Lib.getYearWeekStr(time)
Lib.getWeeksOfYear(time)
Lib.getYearDayStr(time)
Lib.getMonthStartTime(time)
Lib.getWeekStartTime(time)
Lib.getDayStartTime(time)
Lib.getMonthEndTime(time)
Lib.getWeekEndTime(time)
Lib.getDayEndTime(time)
Lib.isSameDay(time1, time2)
Lib.isSameWeek(time1, time2)
Vector3.new(x, y, z)
Vector3.lenSqr()
Vector3:len()
Vector3:copy()
Vector3:isZero()
Vector3:normalize()
Vector3:blockPos()
Vector3:dot(rhs)
Vector3:cross(rhs)
DBHandler:getDataByUserId(subKey, dataKey, callback, failback)
DBHandler:setData(subKey, dataKey, data, immediately)
RedisHandler: trySendZIncBy(immediately)
RedisHandler: trySendZExpire(immediately)
RedisHandler:hasCachedData()
RedisHandler:ZExpireat(setName, timeStamp)
RedisHandler:ZIncrBy(setName, key, value)
RedisHandler:ZAdd(setName, key, value)
RedisHandler:ZRemove(setName, key)
RedisHandler:ZScore(setName, key, callback)
RedisHandler:ZRange(setName, start, end, callback)
UserInfoCache.LoadCacheByUserIds(userIds, callback)
UserInfoCache.CancelRequest(session)
UserInfoCache.GetCache(userId)
PayHelper:payMoney(player, uniqueId, price, callBack)
AdHelper:defineAdPlace(place)
AdHelper:reportAdPlace(place)
AdHelper:videoAd(place, adIndex, callBack)
AdHelper:registerEnableVideoAdChange(callBack)
AdHelper:canEnableVideoAd()
Part:setProperty("useGravity", "true")
Part:move(Vector3.new(1,1,1))
Part:moveUntilCollide(Vector3.new(1,1,1))
Part:getVolume()
Part:setMass(2)
Part:getMass()
Part:setDensity(2)
Part:getDensity()
Part:setFriction(2)
Part:getFriction()
Part:setRestitution(2)
Part:getRestitution()
Part:applyForce(Vector3.new(1,1,1))
Part:applyTorque(Vector3.new(1,1,1))
Part:setUseAnchor(setting)
Part:isUseAnchor()
Part:setUseGravity(false)
Part:isUseGravity()
Part:setLineVelocity(Vector3.new(1,0,0))
Part:getCurLineVelocity()
Part:setAngleVelocity(Vector3.new(1,0,0))
Part:getCurAngleVelocity()
Part:destoryAllConstraint()
Part:connect(signalKey, handle)
Part:isConstrainted()
Part:getAllConstrainPtr()
Model:setPrimaryPart(part)
ConstrainBase:getMasterPart()
ConstrainBase:getSlavePart()
Instance.Create("Part")
Part:getInstanceID()
Instance.getByInstanceId(id)
Instance:setParent(parent)
Instance:getParent()
Instance:getChildrenCount()
Instance:getChildAt(0)
Instance:findFirstAncestor(name)
Instance:findFirstAncestorOfClass(className)
Instance:findFirstChild(name, recursive)
Instance:findFirstChildOfClass(className)
Instance:isA(className)
Instance:isAncestorOf(descendant)
Instance:isDescendantOf(ancestor)
Instance:clone()
Instance:destroy()