{
    "World.cfg": {
        "prefix": "World.cfg",
        "body": [
            "World.cfg"
        ],
        "description": "World.cfg"
    },
    "World.isClient": {
        "prefix": "World.isClient",
        "body": [
            "World.isClient"
        ],
        "description": "World.isClient"
    },
    "World.CurWorld": {
        "prefix": "World.CurWorld",
        "body": [
            "World.CurWorld"
        ],
        "description": "World.CurWorld"
    },
    "World.GameName": {
        "prefix": "World.GameName",
        "body": [
            "World.GameName"
        ],
        "description": "World.GameName"
    },
    "World.defaultMap": {
        "prefix": "World.defaultMap",
        "body": [
            "World.defaultMap"
        ],
        "description": "World.defaultMap"
    },
    "World.CurMap": {
        "prefix": "World.CurMap",
        "body": [
            "World.CurMap"
        ],
        "description": "World.CurMap"
    },
    "World.enableReconnectNetwork": {
        "prefix": "World.enableReconnectNetwork",
        "body": [
            "World.enableReconnectNetwork"
        ],
        "description": "World.enableReconnectNetwork"
    },
    "Map.cfg": {
        "prefix": "Map.cfg",
        "body": [
            "Map.cfg"
        ],
        "description": "Map.cfg"
    },
    "Map.id": {
        "prefix": "Map.id",
        "body": [
            "Map.id"
        ],
        "description": "Map.id"
    },
    "Map.name": {
        "prefix": "Map.name",
        "body": [
            "Map.name"
        ],
        "description": "Map.name"
    },
    "Map.static": {
        "prefix": "Map.static",
        "body": [
            "Map.static"
        ],
        "description": "Map.static"
    },
    "Region.key": {
        "prefix": "Region.key",
        "body": [
            "Region.key"
        ],
        "description": "Region.key"
    },
    "Region.cfg": {
        "prefix": "Region.cfg",
        "body": [
            "Region.cfg"
        ],
        "description": "Region.cfg"
    },
    "Region.map": {
        "prefix": "Region.map",
        "body": [
            "Region.map"
        ],
        "description": "Region.map"
    },
    "Region.mix": {
        "prefix": "Region.mix",
        "body": [
            "Region.mix"
        ],
        "description": "Region.mix"
    },
    "Region.max": {
        "prefix": "Region.max",
        "body": [
            "Region.max"
        ],
        "description": "Region.max"
    },
    "Map.players": {
        "prefix": "Map.players",
        "body": [
            "Map.players"
        ],
        "description": "Map.players"
    },
    "Map.objects": {
        "prefix": "Map.objects",
        "body": [
            "Map.objects"
        ],
        "description": "Map.objects"
    },
    "Object.objID": {
        "prefix": "Object.objID",
        "body": [
            "Object.objID"
        ],
        "description": "Object.objID"
    },
    "Object.world": {
        "prefix": "Object.world",
        "body": [
            "Object.world"
        ],
        "description": "Object.world"
    },
    "Object.ownerId": {
        "prefix": "Object.ownerId",
        "body": [
            "Object.ownerId"
        ],
        "description": "Object.ownerId"
    },
    "Object.isMainPlayer": {
        "prefix": "Object.isMainPlayer",
        "body": [
            "Object.isMainPlayer"
        ],
        "description": "Object.isMainPlayer"
    },
    "Object.isEntity": {
        "prefix": "Object.isEntity",
        "body": [
            "Object.isEntity"
        ],
        "description": "Object.isEntity"
    },
    "Object.isPlayer": {
        "prefix": "Object.isPlayer",
        "body": [
            "Object.isPlayer"
        ],
        "description": "Object.isPlayer"
    },
    "Object.map": {
        "prefix": "Object.map",
        "body": [
            "Object.map"
        ],
        "description": "Object.map"
    },
    "Entity.name": {
        "prefix": "Entity.name",
        "body": [
            "Entity.name"
        ],
        "description": "Entity.name"
    },
    "Entity.curHp": {
        "prefix": "Entity.curHp",
        "body": [
            "Entity.curHp"
        ],
        "description": "Entity.curHp"
    },
    "Entity.curVp": {
        "prefix": "Entity.curVp",
        "body": [
            "Entity.curVp"
        ],
        "description": "Entity.curVp"
    },
    "Entity.movingStyle": {
        "prefix": "Entity.movingStyle",
        "body": [
            "Entity.movingStyle"
        ],
        "description": "Entity.movingStyle"
    },
    "Entity.isMoving": {
        "prefix": "Entity.isMoving",
        "body": [
            "Entity.isMoving"
        ],
        "description": "Entity.isMoving"
    },
    "Entity.onGround": {
        "prefix": "Entity.onGround",
        "body": [
            "Entity.onGround"
        ],
        "description": "Entity.onGround"
    },
    "Entity.isFlying": {
        "prefix": "Entity.isFlying",
        "body": [
            "Entity.isFlying"
        ],
        "description": "Entity.isFlying"
    },
    "Player.platformUserId": {
        "prefix": "Player.platformUserId",
        "body": [
            "Player.platformUserId"
        ],
        "description": "Player.platformUserId"
    },
    "Team.id": {
        "prefix": "Team.id",
        "body": [
            "Team.id"
        ],
        "description": "Team.id"
    },
    "Team.playerCount": {
        "prefix": "Team.playerCount",
        "body": [
            "Team.playerCount"
        ],
        "description": "Team.playerCount"
    },
    "Team.createTime": {
        "prefix": "Team.createTime",
        "body": [
            "Team.createTime"
        ],
        "description": "Team.createTime"
    },
    "config.fullName": {
        "prefix": "config.fullName",
        "body": [
            "config.fullName"
        ],
        "description": "config.fullName"
    },
    "config.modName": {
        "prefix": "config.modName",
        "body": [
            "config.modName"
        ],
        "description": "config.modName"
    },
    "config.plugin": {
        "prefix": "config.plugin",
        "body": [
            "config.plugin"
        ],
        "description": "config.plugin"
    },
    "config.displayName": {
        "prefix": "config.displayName",
        "body": [
            "config.displayName"
        ],
        "description": "config.displayName"
    },
    "PlayerControl.entity": {
        "prefix": "PlayerControl.entity",
        "body": [
            "PlayerControl.entity"
        ],
        "description": "PlayerControl.entity"
    },
    "PlayerControl.enable": {
        "prefix": "PlayerControl.enable",
        "body": [
            "PlayerControl.enable"
        ],
        "description": "PlayerControl.enable"
    },
    "Blockman.player": {
        "prefix": "Blockman.player",
        "body": [
            "Blockman.player"
        ],
        "description": "Blockman.player"
    },
    "Blockman.world": {
        "prefix": "Blockman.world",
        "body": [
            "Blockman.world"
        ],
        "description": "Blockman.world"
    },
    "Blockman.gameSettings": {
        "prefix": "Blockman.gameSettings",
        "body": [
            "Blockman.gameSettings"
        ],
        "description": "Blockman.gameSettings"
    },
    "GameSettings.poleForward": {
        "prefix": "GameSettings.poleForward",
        "body": [
            "GameSettings.poleForward"
        ],
        "description": "GameSettings.poleForward"
    },
    "GameSettings.poleStrafe": {
        "prefix": "GameSettings.poleStrafe",
        "body": [
            "GameSettings.poleStrafe"
        ],
        "description": "GameSettings.poleStrafe"
    },
    "GameSettings.hideCloud": {
        "prefix": "GameSettings.hideCloud",
        "body": [
            "GameSettings.hideCloud"
        ],
        "description": "GameSettings.hideCloud"
    },
    "GameSettings.hideFog": {
        "prefix": "GameSettings.hideFog",
        "body": [
            "GameSettings.hideFog"
        ],
        "description": "GameSettings.hideFog"
    },
    "GameSettings.viewBobbing": {
        "prefix": "GameSettings.viewBobbing",
        "body": [
            "GameSettings.viewBobbing"
        ],
        "description": "GameSettings.viewBobbing"
    },
    "GameSettings.bobbingCameraEffect": {
        "prefix": "GameSettings.bobbingCameraEffect",
        "body": [
            "GameSettings.bobbingCameraEffect"
        ],
        "description": "GameSettings.bobbingCameraEffect"
    },
    "Part.restitution": {
        "prefix": "Part.restitution",
        "body": [
            "Part.restitution"
        ],
        "description": "Part.restitution"
    },
    "Part.friction": {
        "prefix": "Part.friction",
        "body": [
            "Part.friction"
        ],
        "description": "Part.friction"
    },
    "Part.density": {
        "prefix": "Part.density",
        "body": [
            "Part.density"
        ],
        "description": "Part.density"
    },
    "Part.lineVelocity": {
        "prefix": "Part.lineVelocity",
        "body": [
            "Part.lineVelocity"
        ],
        "description": "Part.lineVelocity"
    },
    "Part.angleVelocity": {
        "prefix": "Part.angleVelocity",
        "body": [
            "Part.angleVelocity"
        ],
        "description": "Part.angleVelocity"
    },
    "Part.useAnchor": {
        "prefix": "Part.useAnchor",
        "body": [
            "Part.useAnchor"
        ],
        "description": "Part.useAnchor"
    },
    "Part.useGravity": {
        "prefix": "Part.useGravity",
        "body": [
            "Part.useGravity"
        ],
        "description": "Part.useGravity"
    },
    "Part.useCollide": {
        "prefix": "Part.useCollide",
        "body": [
            "Part.useCollide"
        ],
        "description": "Part.useCollide"
    },
    "Decal.decalOffset": {
        "prefix": "Decal.decalOffset",
        "body": [
            "Decal.decalOffset"
        ],
        "description": "Decal.decalOffset"
    },
    "Decal.decalColor": {
        "prefix": "Decal.decalColor",
        "body": [
            "Decal.decalColor"
        ],
        "description": "Decal.decalColor"
    },
    "Decal.decalAlpha": {
        "prefix": "Decal.decalAlpha",
        "body": [
            "Decal.decalAlpha"
        ],
        "description": "Decal.decalAlpha"
    },
    "Decal.decalSurface": {
        "prefix": "Decal.decalSurface",
        "body": [
            "Decal.decalSurface"
        ],
        "description": "Decal.decalSurface"
    },
    "Decal.decalImageType": {
        "prefix": "Decal.decalImageType",
        "body": [
            "Decal.decalImageType"
        ],
        "description": "Decal.decalImageType"
    },
    "Decal.decalTiling": {
        "prefix": "Decal.decalTiling",
        "body": [
            "Decal.decalTiling"
        ],
        "description": "Decal.decalTiling"
    },
    "Decal.decalTexture": {
        "prefix": "Decal.decalTexture",
        "body": [
            "Decal.decalTexture"
        ],
        "description": "Decal.decalTexture"
    },
    "MeshPart.mesh": {
        "prefix": "MeshPart.mesh",
        "body": [
            "MeshPart.mesh"
        ],
        "description": "MeshPart.mesh"
    },
    "Force.force = Vector3.new(0, 10, 0)": {
        "prefix": "Force.force = Vector3.new(0, 10, 0)",
        "body": [
            "Force.force = Vector3.new(0, 10, 0)"
        ],
        "description": "Force.force = Vector3.new(0, 10, 0)"
    },
    "Force.useRelativeForce = true": {
        "prefix": "Force.useRelativeForce = true",
        "body": [
            "Force.useRelativeForce = true"
        ],
        "description": "Force.useRelativeForce = true"
    },
    "Torque.torque = Vector3.new(0, 10, 0)": {
        "prefix": "Torque.torque = Vector3.new(0, 10, 0)",
        "body": [
            "Torque.torque = Vector3.new(0, 10, 0)"
        ],
        "description": "Torque.torque = Vector3.new(0, 10, 0)"
    },
    "Force.useRelativeTorque = true": {
        "prefix": "Force.useRelativeTorque = true",
        "body": [
            "Force.useRelativeTorque = true"
        ],
        "description": "Force.useRelativeTorque = true"
    },
    "RodConstraint.length = 2": {
        "prefix": "RodConstraint.length = 2",
        "body": [
            "RodConstraint.length = 2"
        ],
        "description": "RodConstraint.length = 2"
    },
    "RodConstraint.fixedJustify = true": {
        "prefix": "RodConstraint.fixedJustify = true",
        "body": [
            "RodConstraint.fixedJustify = true"
        ],
        "description": "RodConstraint.fixedJustify = true"
    },
    "RodConstraint.radius = 1": {
        "prefix": "RodConstraint.radius = 1",
        "body": [
            "RodConstraint.radius = 1"
        ],
        "description": "RodConstraint.radius = 1"
    },
    "HingeConstraint.useSpring = true": {
        "prefix": "HingeConstraint.useSpring = true",
        "body": [
            "HingeConstraint.useSpring = true"
        ],
        "description": "HingeConstraint.useSpring = true"
    },
    "HingeConstraint.springTargetAngle = 90": {
        "prefix": "HingeConstraint.springTargetAngle = 90",
        "body": [
            "HingeConstraint.springTargetAngle = 90"
        ],
        "description": "HingeConstraint.springTargetAngle = 90"
    },
    "HingeConstraint.stiffness = 5": {
        "prefix": "HingeConstraint.stiffness = 5",
        "body": [
            "HingeConstraint.stiffness = 5"
        ],
        "description": "HingeConstraint.stiffness = 5"
    },
    "HingeConstraint.damping = 1": {
        "prefix": "HingeConstraint.damping = 1",
        "body": [
            "HingeConstraint.damping = 1"
        ],
        "description": "HingeConstraint.damping = 1"
    },
    "HingeConstraint.useMoter = true": {
        "prefix": "HingeConstraint.useMoter = true",
        "body": [
            "HingeConstraint.useMoter = true"
        ],
        "description": "HingeConstraint.useMoter = true"
    },
    "HingeConstraint.motorTargetAngleVelocity = 30": {
        "prefix": "HingeConstraint.motorTargetAngleVelocity = 30",
        "body": [
            "HingeConstraint.motorTargetAngleVelocity = 30"
        ],
        "description": "HingeConstraint.motorTargetAngleVelocity = 30"
    },
    "HingeConstraint.motorForce = 10": {
        "prefix": "HingeConstraint.motorForce = 10",
        "body": [
            "HingeConstraint.motorForce = 10"
        ],
        "description": "HingeConstraint.motorForce = 10"
    },
    "SpringConstraint.length = 10": {
        "prefix": "SpringConstraint.length = 10",
        "body": [
            "SpringConstraint.length = 10"
        ],
        "description": "SpringConstraint.length = 10"
    },
    "SpringConstraint.stiffness = 52": {
        "prefix": "SpringConstraint.stiffness = 52",
        "body": [
            "SpringConstraint.stiffness = 52"
        ],
        "description": "SpringConstraint.stiffness = 52"
    },
    "SpringConstraint.damping = 0.1": {
        "prefix": "SpringConstraint.damping = 0.1",
        "body": [
            "SpringConstraint.damping = 0.1"
        ],
        "description": "SpringConstraint.damping = 0.1"
    },
    "SpringConstraint.fixedJustify = true": {
        "prefix": "SpringConstraint.fixedJustify = true",
        "body": [
            "SpringConstraint.fixedJustify = true"
        ],
        "description": "SpringConstraint.fixedJustify = true"
    },
    "SpringConstraint.radius = 0.25": {
        "prefix": "SpringConstraint.radius = 0.25",
        "body": [
            "SpringConstraint.radius = 0.25"
        ],
        "description": "SpringConstraint.radius = 0.25"
    },
    "SpringConstraint.thickness = 0.20": {
        "prefix": "SpringConstraint.thickness = 0.20",
        "body": [
            "SpringConstraint.thickness = 0.20"
        ],
        "description": "SpringConstraint.thickness = 0.20"
    },
    "SpringConstraint.coil = 1": {
        "prefix": "SpringConstraint.coil = 1",
        "body": [
            "SpringConstraint.coil = 1"
        ],
        "description": "SpringConstraint.coil = 1"
    },
    "RopeConstraint.length = 10": {
        "prefix": "RopeConstraint.length = 10",
        "body": [
            "RopeConstraint.length = 10"
        ],
        "description": "RopeConstraint.length = 10"
    },
    "RopeConstraint.radius = 10": {
        "prefix": "RopeConstraint.radius = 10",
        "body": [
            "RopeConstraint.radius = 10"
        ],
        "description": "RopeConstraint.radius = 10"
    },
    "SliderConstraint.upperLimit = 10": {
        "prefix": "SliderConstraint.upperLimit = 10",
        "body": [
            "SliderConstraint.upperLimit = 10"
        ],
        "description": "SliderConstraint.upperLimit = 10"
    },
    "SliderConstraint.lowerLimit = 10": {
        "prefix": "SliderConstraint.lowerLimit = 10",
        "body": [
            "SliderConstraint.lowerLimit = 10"
        ],
        "description": "SliderConstraint.lowerLimit = 10"
    },
    "Instance.name": {
        "prefix": "Instance.name",
        "body": [
            "Instance.name"
        ],
        "description": "Instance.name"
    },
    "Instance.id": {
        "prefix": "Instance.id",
        "body": [
            "Instance.id"
        ],
        "description": "Instance.id"
    },
    "ConstraintBase.visible": {
        "prefix": "ConstraintBase.visible",
        "body": [
            "ConstraintBase.visible"
        ],
        "description": "ConstraintBase.visible"
    },
    "ConstraintBase.collision": {
        "prefix": "ConstraintBase.collision",
        "body": [
            "ConstraintBase.collision"
        ],
        "description": "ConstraintBase.collision"
    },
    "ConstraintBase.slavePartID": {
        "prefix": "ConstraintBase.slavePartID",
        "body": [
            "ConstraintBase.slavePartID"
        ],
        "description": "ConstraintBase.slavePartID"
    },
    "ConstrainBase.masterLocalPos": {
        "prefix": "ConstrainBase.masterLocalPos",
        "body": [
            "ConstrainBase.masterLocalPos"
        ],
        "description": "ConstrainBase.masterLocalPos"
    },
    "ConstrainBase.slaveLocalPos": {
        "prefix": "ConstrainBase.slaveLocalPos",
        "body": [
            "ConstrainBase.slaveLocalPos"
        ],
        "description": "ConstrainBase.slaveLocalPos"
    },
    "ConstrainBase.color": {
        "prefix": "ConstrainBase.color",
        "body": [
            "ConstrainBase.color"
        ],
        "description": "ConstrainBase.color"
    },
    "World.Now()": {
        "prefix": "World.Now()",
        "body": [
            "World.Now()"
        ],
        "description": "World.Now()"
    },
    "Wrold.Timer(time, func, ...)": {
        "prefix": "Wrold.Timer(time, func, ...)",
        "body": [
            "Wrold.Timer(time, func, ...)"
        ],
        "description": "Wrold.Timer(time, func, ...)"
    },
    "World.LightTimer(stack, time, func, ...)": {
        "prefix": "World.LightTimer(stack, time, func, ...)",
        "body": [
            "World.LightTimer(stack, time, func, ...)"
        ],
        "description": "World.LightTimer(stack, time, func, ...)"
    },
    "World:getMapById(id)": {
        "prefix": "World:getMapById(id)",
        "body": [
            "World:getMapById(id)"
        ],
        "description": "World:getMapById(id)"
    },
    "World:getMap(name)": {
        "prefix": "World:getMap(name)",
        "body": [
            "World:getMap(name)"
        ],
        "description": "World:getMap(name)"
    },
    "World:getOrCreateStaticMap(name)": {
        "prefix": "World:getOrCreateStaticMap(name)",
        "body": [
            "World:getOrCreateStaticMap(name)"
        ],
        "description": "World:getOrCreateStaticMap(name)"
    },
    "World:createDynamicMap(name, closeWhenEmpty)": {
        "prefix": "World:createDynamicMap(name, closeWhenEmpty)",
        "body": [
            "World:createDynamicMap(name, closeWhenEmpty)"
        ],
        "description": "World:createDynamicMap(name, closeWhenEmpty)"
    },
    "World.SystemChat(typ, key, ...)": {
        "prefix": "World.SystemChat(typ, key, ...)",
        "body": [
            "World.SystemChat(typ, key, ...)"
        ],
        "description": "World.SystemChat(typ, key, ...)"
    },
    "World.SystemNotice(typ, key, time, ...)": {
        "prefix": "World.SystemNotice(typ, key, time, ...)",
        "body": [
            "World.SystemNotice(typ, key, time, ...)"
        ],
        "description": "World.SystemNotice(typ, key, time, ...)"
    },
    "World:isTimeStopped()": {
        "prefix": "World:isTimeStopped()",
        "body": [
            "World:isTimeStopped()"
        ],
        "description": "World:isTimeStopped()"
    },
    "World:setTimeStopped(stepped)": {
        "prefix": "World:setTimeStopped(stepped)",
        "body": [
            "World:setTimeStopped(stepped)"
        ],
        "description": "World:setTimeStopped(stepped)"
    },
    "World:setWorldTimeSpeed(time)": {
        "prefix": "World:setWorldTimeSpeed(time)",
        "body": [
            "World:setWorldTimeSpeed(time)"
        ],
        "description": "World:setWorldTimeSpeed(time)"
    },
    "World:getObject(objID)": {
        "prefix": "World:getObject(objID)",
        "body": [
            "World:getObject(objID)"
        ],
        "description": "World:getObject(objID)"
    },
    "World:getAllObject()": {
        "prefix": "World:getAllObject()",
        "body": [
            "World:getAllObject()"
        ],
        "description": "World:getAllObject()"
    },
    "World:filterWord(content)": {
        "prefix": "World:filterWord(content)",
        "body": [
            "World:filterWord(content)"
        ],
        "description": "World:filterWord(content)"
    },
    "Map:isValid()": {
        "prefix": "Map:isValid()",
        "body": [
            "Map:isValid()"
        ],
        "description": "Map:isValid()"
    },
    "Map:getBlock(pos)": {
        "prefix": "Map:getBlock(pos)",
        "body": [
            "Map:getBlock(pos)"
        ],
        "description": "Map:getBlock(pos)"
    },
    "Map:getRegion(key)": {
        "prefix": "Map:getRegion(key)",
        "body": [
            "Map:getRegion(key)"
        ],
        "description": "Map:getRegion(key)"
    },
    "Map:getAllRegion()": {
        "prefix": "Map:getAllRegion()",
        "body": [
            "Map:getAllRegion()"
        ],
        "description": "Map:getAllRegion()"
    },
    "Map:getBlockConfigId(pos)": {
        "prefix": "Map:getBlockConfigId(pos)",
        "body": [
            "Map:getBlockConfigId(pos)"
        ],
        "description": "Map:getBlockConfigId(pos)"
    },
    "Map:posConvertBlock(pos, fullName)": {
        "prefix": "Map:posConvertBlock(pos, fullName)",
        "body": [
            "Map:posConvertBlock(pos, fullName)"
        ],
        "description": "Map:posConvertBlock(pos, fullName)"
    },
    "Map:fillBlocks(min, max, fullName)": {
        "prefix": "Map:fillBlocks(min, max, fullName)",
        "body": [
            "Map:fillBlocks(min, max, fullName)"
        ],
        "description": "Map:fillBlocks(min, max, fullName)"
    },
    "Map:clearBlocksInArea(min, max, fullNames)": {
        "prefix": "Map:clearBlocksInArea(min, max, fullNames)",
        "body": [
            "Map:clearBlocksInArea(min, max, fullNames)"
        ],
        "description": "Map:clearBlocksInArea(min, max, fullNames)"
    },
    "Map:checkBlockFall(pos)": {
        "prefix": "Map:checkBlockFall(pos)",
        "body": [
            "Map:checkBlockFall(pos)"
        ],
        "description": "Map:checkBlockFall(pos)"
    },
    "Map:clearBlocks(min, max, all)": {
        "prefix": "Map:clearBlocks(min, max, all)",
        "body": [
            "Map:clearBlocks(min, max, all)"
        ],
        "description": "Map:clearBlocks(min, max, all)"
    },
    "Map:getTouchObject(min, max)": {
        "prefix": "Map:getTouchObject(min, max)",
        "body": [
            "Map:getTouchObject(min, max)"
        ],
        "description": "Map:getTouchObject(min, max)"
    },
    "Map:getTouchEntities(min, max, includeDead)": {
        "prefix": "Map:getTouchEntities(min, max, includeDead)",
        "body": [
            "Map:getTouchEntities(min, max, includeDead)"
        ],
        "description": "Map:getTouchEntities(min, max, includeDead)"
    },
    "Map:getNearbyEntities(pos, maxDistance)": {
        "prefix": "Map:getNearbyEntities(pos, maxDistance)",
        "body": [
            "Map:getNearbyEntities(pos, maxDistance)"
        ],
        "description": "Map:getNearbyEntities(pos, maxDistance)"
    },
    "Map:getBlockPosInArea(min, max, fullNames)": {
        "prefix": "Map:getBlockPosInArea(min, max, fullNames)",
        "body": [
            "Map:getBlockPosInArea(min, max, fullNames)"
        ],
        "description": "Map:getBlockPosInArea(min, max, fullNames)"
    },
    "Map:setVar(key, value)": {
        "prefix": "Map:setVar(key, value)",
        "body": [
            "Map:setVar(key, value)"
        ],
        "description": "Map:setVar(key, value)"
    },
    "Map:getVar(key)": {
        "prefix": "Map:getVar(key)",
        "body": [
            "Map:getVar(key)"
        ],
        "description": "Map:getVar(key)"
    },
    "Map:movePlayersTo(map, pos)": {
        "prefix": "Map:movePlayersTo(map, pos)",
        "body": [
            "Map:movePlayersTo(map, pos)"
        ],
        "description": "Map:movePlayersTo(map, pos)"
    },
    "Map:saveBlocks(min, max)": {
        "prefix": "Map:saveBlocks(min, max)",
        "body": [
            "Map:saveBlocks(min, max)"
        ],
        "description": "Map:saveBlocks(min, max)"
    },
    "Map:loadBlocks(min, max, data)": {
        "prefix": "Map:loadBlocks(min, max, data)",
        "body": [
            "Map:loadBlocks(min, max, data)"
        ],
        "description": "Map:loadBlocks(min, max, data)"
    },
    "Map:createBlock(pos, fullName)": {
        "prefix": "Map:createBlock(pos, fullName)",
        "body": [
            "Map:createBlock(pos, fullName)"
        ],
        "description": "Map:createBlock(pos, fullName)"
    },
    "Map:removeBlock(pos)": {
        "prefix": "Map:removeBlock(pos)",
        "body": [
            "Map:removeBlock(pos)"
        ],
        "description": "Map:removeBlock(pos)"
    },
    "Map:getBlockData(pos)": {
        "prefix": "Map:getBlockData(pos)",
        "body": [
            "Map:getBlockData(pos)"
        ],
        "description": "Map:getBlockData(pos)"
    },
    "Map:getOrCreateBlockData(pos)": {
        "prefix": "Map:getOrCreateBlockData(pos)",
        "body": [
            "Map:getOrCreateBlockData(pos)"
        ],
        "description": "Map:getOrCreateBlockData(pos)"
    },
    "Map:setBlockData(pos, value)": {
        "prefix": "Map:setBlockData(pos, value)",
        "body": [
            "Map:setBlockData(pos, value)"
        ],
        "description": "Map:setBlockData(pos, value)"
    },
    "Map:bakeLightAndSave(maxLightMode, forceRecalculate)": {
        "prefix": "Map:bakeLightAndSave(maxLightMode, forceRecalculate)",
        "body": [
            "Map:bakeLightAndSave(maxLightMode, forceRecalculate)"
        ],
        "description": "Map:bakeLightAndSave(maxLightMode, forceRecalculate)"
    },
    "Region:isOwner(object)": {
        "prefix": "Region:isOwner(object)",
        "body": [
            "Region:isOwner(object)"
        ],
        "description": "Region:isOwner(object)"
    },
    "Region:setOwner(obj)": {
        "prefix": "Region:setOwner(obj)",
        "body": [
            "Region:setOwner(obj)"
        ],
        "description": "Region:setOwner(obj)"
    },
    "Region:removeOwner(obj)": {
        "prefix": "Region:removeOwner(obj)",
        "body": [
            "Region:removeOwner(obj)"
        ],
        "description": "Region:removeOwner(obj)"
    },
    "Map:addRegion(min, max, cfgName)": {
        "prefix": "Map:addRegion(min, max, cfgName)",
        "body": [
            "Map:addRegion(min, max, cfgName)"
        ],
        "description": "Map:addRegion(min, max, cfgName)"
    },
    "Map:removeRegion(key, isCheckTrigger)": {
        "prefix": "Map:removeRegion(key, isCheckTrigger)",
        "body": [
            "Map:removeRegion(key, isCheckTrigger)"
        ],
        "description": "Map:removeRegion(key, isCheckTrigger)"
    },
    "Block.GetNameCfgId(name)": {
        "prefix": "Block.GetNameCfgId(name)",
        "body": [
            "Block.GetNameCfgId(name)"
        ],
        "description": "Block.GetNameCfgId(name)"
    },
    "Block.GetNameCfg(name)": {
        "prefix": "Block.GetNameCfg(name)",
        "body": [
            "Block.GetNameCfg(name)"
        ],
        "description": "Block.GetNameCfg(name)"
    },
    "Block.GetAirBlockName()": {
        "prefix": "Block.GetAirBlockName()",
        "body": [
            "Block.GetAirBlockName()"
        ],
        "description": "Block.GetAirBlockName()"
    },
    "Map:triggerRegions(pos, name, context)": {
        "prefix": "Map:triggerRegions(pos, name, context)",
        "body": [
            "Map:triggerRegions(pos, name, context)"
        ],
        "description": "Map:triggerRegions(pos, name, context)"
    },
    "REGION_ENTER": {
        "prefix": "REGION_ENTER",
        "body": [
            "REGION_ENTER"
        ],
        "description": "REGION_ENTER"
    },
    "REGION_LEAVE": {
        "prefix": "REGION_LEAVE",
        "body": [
            "REGION_LEAVE"
        ],
        "description": "REGION_LEAVE"
    },
    "BLOCK_CLICK": {
        "prefix": "BLOCK_CLICK",
        "body": [
            "BLOCK_CLICK"
        ],
        "description": "BLOCK_CLICK"
    },
    "BLOCK_PLACE": {
        "prefix": "BLOCK_PLACE",
        "body": [
            "BLOCK_PLACE"
        ],
        "description": "BLOCK_PLACE"
    },
    "BLOCK_BREAK": {
        "prefix": "BLOCK_BREAK",
        "body": [
            "BLOCK_BREAK"
        ],
        "description": "BLOCK_BREAK"
    },
    "BLOCK_SPAWN": {
        "prefix": "BLOCK_SPAWN",
        "body": [
            "BLOCK_SPAWN"
        ],
        "description": "BLOCK_SPAWN"
    },
    "BLOCK_REMOVED": {
        "prefix": "BLOCK_REMOVED",
        "body": [
            "BLOCK_REMOVED"
        ],
        "description": "BLOCK_REMOVED"
    },
    "BLOCK_HITTED": {
        "prefix": "BLOCK_HITTED",
        "body": [
            "BLOCK_HITTED"
        ],
        "description": "BLOCK_HITTED"
    },
    "BLOCK_HITTED_BY_RAY": {
        "prefix": "BLOCK_HITTED_BY_RAY",
        "body": [
            "BLOCK_HITTED_BY_RAY"
        ],
        "description": "BLOCK_HITTED_BY_RAY"
    },
    "BLOCK_TOUCH": {
        "prefix": "BLOCK_TOUCH",
        "body": [
            "BLOCK_TOUCH"
        ],
        "description": "BLOCK_TOUCH"
    },
    "BLOCK_APART": {
        "prefix": "BLOCK_APART",
        "body": [
            "BLOCK_APART"
        ],
        "description": "BLOCK_APART"
    },
    "Map:getWorkSpace()": {
        "prefix": "Map:getWorkSpace()",
        "body": [
            "Map:getWorkSpace()"
        ],
        "description": "Map:getWorkSpace()"
    },
    "Map:getTouchParts(min, max)": {
        "prefix": "Map:getTouchParts(min, max)",
        "body": [
            "Map:getTouchParts(min, max)"
        ],
        "description": "Map:getTouchParts(min, max)"
    },
    "Object:cfg()": {
        "prefix": "Object:cfg()",
        "body": [
            "Object:cfg()"
        ],
        "description": "Object:cfg()"
    },
    "Object:data(key)": {
        "prefix": "Object:data(key)",
        "body": [
            "Object:data(key)"
        ],
        "description": "Object:data(key)"
    },
    "Object:setData(key, val)": {
        "prefix": "Object:setData(key, val)",
        "body": [
            "Object:setData(key, val)"
        ],
        "description": "Object:setData(key, val)"
    },
    "Object:timer(time, function, ...)": {
        "prefix": "Object:timer(time, function, ...)",
        "body": [
            "Object:timer(time, function, ...)"
        ],
        "description": "Object:timer(time, function, ...)"
    },
    "Object:lightTimer(stack, time, func, ...)": {
        "prefix": "Object:lightTimer(stack, time, func, ...)",
        "body": [
            "Object:lightTimer(stack, time, func, ...)"
        ],
        "description": "Object:lightTimer(stack, time, func, ...)"
    },
    "Object:distance(obj)": {
        "prefix": "Object:distance(obj)",
        "body": [
            "Object:distance(obj)"
        ],
        "description": "Object:distance(obj)"
    },
    "Object:isValid()": {
        "prefix": "Object:isValid()",
        "body": [
            "Object:isValid()"
        ],
        "description": "Object:isValid()"
    },
    "Object:setMap(map)": {
        "prefix": "Object:setMap(map)",
        "body": [
            "Object:setMap(map)"
        ],
        "description": "Object:setMap(map)"
    },
    "Object:setRotationYaw(yaw)": {
        "prefix": "Object:setRotationYaw(yaw)",
        "body": [
            "Object:setRotationYaw(yaw)"
        ],
        "description": "Object:setRotationYaw(yaw)"
    },
    "Object:setRotationPitch(pitch)": {
        "prefix": "Object:setRotationPitch(pitch)",
        "body": [
            "Object:setRotationPitch(pitch)"
        ],
        "description": "Object:setRotationPitch(pitch)"
    },
    "Object:getRotationYaw()": {
        "prefix": "Object:getRotationYaw()",
        "body": [
            "Object:getRotationYaw()"
        ],
        "description": "Object:getRotationYaw()"
    },
    "Object:getRotationPitch()": {
        "prefix": "Object:getRotationPitch()",
        "body": [
            "Object:getRotationPitch()"
        ],
        "description": "Object:getRotationPitch()"
    },
    "Object:setPosition(pos)": {
        "prefix": "Object:setPosition(pos)",
        "body": [
            "Object:setPosition(pos)"
        ],
        "description": "Object:setPosition(pos)"
    },
    "Object:getPosition()": {
        "prefix": "Object:getPosition()",
        "body": [
            "Object:getPosition()"
        ],
        "description": "Object:getPosition()"
    },
    "Object:delayCall(func, time)": {
        "prefix": "Object:delayCall(func, time)",
        "body": [
            "Object:delayCall(func, time)"
        ],
        "description": "Object:delayCall(func, time)"
    },
    "Object:destroy()": {
        "prefix": "Object:destroy()",
        "body": [
            "Object:destroy()"
        ],
        "description": "Object:destroy()"
    },
    "Entity:prop(key)": {
        "prefix": "Entity:prop(key)",
        "body": [
            "Entity:prop(key)"
        ],
        "description": "Entity:prop(key)"
    },
    "Entity:setProp(key, value)": {
        "prefix": "Entity:setProp(key, value)",
        "body": [
            "Entity:setProp(key, value)"
        ],
        "description": "Entity:setProp(key, value)"
    },
    "Entity:isSwimming()": {
        "prefix": "Entity:isSwimming()",
        "body": [
            "Entity:isSwimming()"
        ],
        "description": "Entity:isSwimming()"
    },
    "Entity:jump(x, z)": {
        "prefix": "Entity:jump(x, z)",
        "body": [
            "Entity:jump(x, z)"
        ],
        "description": "Entity:jump(x, z)"
    },
    "Entity:getSpeed()": {
        "prefix": "Entity:getSpeed()",
        "body": [
            "Entity:getSpeed()"
        ],
        "description": "Entity:getSpeed()"
    },
    "Entity:getCollidableUnderfootObjId()": {
        "prefix": "Entity:getCollidableUnderfootObjId()",
        "body": [
            "Entity:getCollidableUnderfootObjId()"
        ],
        "description": "Entity:getCollidableUnderfootObjId()"
    },
    "Entity:isControl()": {
        "prefix": "Entity:isControl()",
        "body": [
            "Entity:isControl()"
        ],
        "description": "Entity:isControl()"
    },
    "Entity:setBodyTurnSpeed(speed)": {
        "prefix": "Entity:setBodyTurnSpeed(speed)",
        "body": [
            "Entity:setBodyTurnSpeed(speed)"
        ],
        "description": "Entity:setBodyTurnSpeed(speed)"
    },
    "Entity:getBodyTurnSpeed()": {
        "prefix": "Entity:getBodyTurnSpeed()",
        "body": [
            "Entity:getBodyTurnSpeed()"
        ],
        "description": "Entity:getBodyTurnSpeed()"
    },
    "Entity:isClimbing()": {
        "prefix": "Entity:isClimbing()",
        "body": [
            "Entity:isClimbing()"
        ],
        "description": "Entity:isClimbing()"
    },
    "Entity:curBlockPos()": {
        "prefix": "Entity:curBlockPos()",
        "body": [
            "Entity:curBlockPos()"
        ],
        "description": "Entity:curBlockPos()"
    },
    "Entity:changeFlyMode(mode)": {
        "prefix": "Entity:changeFlyMode(mode)",
        "body": [
            "Entity:changeFlyMode(mode)"
        ],
        "description": "Entity:changeFlyMode(mode)"
    },
    "Entity:setPos(pos, yaw, pitch)": {
        "prefix": "Entity:setPos(pos, yaw, pitch)",
        "body": [
            "Entity:setPos(pos, yaw, pitch)"
        ],
        "description": "Entity:setPos(pos, yaw, pitch)"
    },
    "Entity:getFrontPos(dis, isFoot, bCenter)": {
        "prefix": "Entity:getFrontPos(dis, isFoot, bCenter)",
        "body": [
            "Entity:getFrontPos(dis, isFoot, bCenter)"
        ],
        "description": "Entity:getFrontPos(dis, isFoot, bCenter)"
    },
    "Entity:tray()": {
        "prefix": "Entity:tray()",
        "body": [
            "Entity:tray()"
        ],
        "description": "Entity:tray()"
    },
    "Entity:owner()": {
        "prefix": "Entity:owner()",
        "body": [
            "Entity:owner()"
        ],
        "description": "Entity:owner()"
    },
    "Entity:getNearbyEntities(maxDistance, filter)": {
        "prefix": "Entity:getNearbyEntities(maxDistance, filter)",
        "body": [
            "Entity:getNearbyEntities(maxDistance, filter)"
        ],
        "description": "Entity:getNearbyEntities(maxDistance, filter)"
    },
    "Entity:getEyePos()": {
        "prefix": "Entity:getEyePos()",
        "body": [
            "Entity:getEyePos()"
        ],
        "description": "Entity:getEyePos()"
    },
    "Entity:setAlwaysAction(action)": {
        "prefix": "Entity:setAlwaysAction(action)",
        "body": [
            "Entity:setAlwaysAction(action)"
        ],
        "description": "Entity:setAlwaysAction(action)"
    },
    "Entity:updateUpperAction(action, ticks)": {
        "prefix": "Entity:updateUpperAction(action, ticks)",
        "body": [
            "Entity:updateUpperAction(action, ticks)"
        ],
        "description": "Entity:updateUpperAction(action, ticks)"
    },
    "Entity:getBaseAction()": {
        "prefix": "Entity:getBaseAction()",
        "body": [
            "Entity:getBaseAction()"
        ],
        "description": "Entity:getBaseAction()"
    },
    "Entity:getUpperAction()": {
        "prefix": "Entity:getUpperAction()",
        "body": [
            "Entity:getUpperAction()"
        ],
        "description": "Entity:getUpperAction()"
    },
    "Entity:getPrevBaseAction()": {
        "prefix": "Entity:getPrevBaseAction()",
        "body": [
            "Entity:getPrevBaseAction()"
        ],
        "description": "Entity:getPrevBaseAction()"
    },
    "Entity:getPrevUpperAction()": {
        "prefix": "Entity:getPrevUpperAction()",
        "body": [
            "Entity:getPrevUpperAction()"
        ],
        "description": "Entity:getPrevUpperAction()"
    },
    "Entity:setAlpha(alpha, time)": {
        "prefix": "Entity:setAlpha(alpha, time)",
        "body": [
            "Entity:setAlpha(alpha, time)"
        ],
        "description": "Entity:setAlpha(alpha, time)"
    },
    "Entity:removeActionMapping(action)": {
        "prefix": "Entity:removeActionMapping(action)",
        "body": [
            "Entity:removeActionMapping(action)"
        ],
        "description": "Entity:removeActionMapping(action)"
    },
    "Entity:isDead()": {
        "prefix": "Entity:isDead()",
        "body": [
            "Entity:isDead()"
        ],
        "description": "Entity:isDead()"
    },
    "Entity:getInvisible()": {
        "prefix": "Entity:getInvisible()",
        "body": [
            "Entity:getInvisible()"
        ],
        "description": "Entity:getInvisible()"
    },
    "Entity:getBodyYaw()": {
        "prefix": "Entity:getBodyYaw()",
        "body": [
            "Entity:getBodyYaw()"
        ],
        "description": "Entity:getBodyYaw()"
    },
    "Entity:setBodyYaw(yaw)": {
        "prefix": "Entity:setBodyYaw(yaw)",
        "body": [
            "Entity:setBodyYaw(yaw)"
        ],
        "description": "Entity:setBodyYaw(yaw)"
    },
    "Entity:setShowName(txt)": {
        "prefix": "Entity:setShowName(txt)",
        "body": [
            "Entity:setShowName(txt)"
        ],
        "description": "Entity:setShowName(txt)"
    },
    "Entity:setHeadText(x, y, txt)": {
        "prefix": "Entity:setHeadText(x, y, txt)",
        "body": [
            "Entity:setHeadText(x, y, txt)"
        ],
        "description": "Entity:setHeadText(x, y, txt)"
    },
    "Entity:setShowHpColor(color)": {
        "prefix": "Entity:setShowHpColor(color)",
        "body": [
            "Entity:setShowHpColor(color)"
        ],
        "description": "Entity:setShowHpColor(color)"
    },
    "Entity:getShowHpColor()": {
        "prefix": "Entity:getShowHpColor()",
        "body": [
            "Entity:getShowHpColor()"
        ],
        "description": "Entity:getShowHpColor()"
    },
    "Entity:addEffect(name, effectName, once, pos, yaw, scale, socketName)": {
        "prefix": "Entity:addEffect(name, effectName, once, pos, yaw, scale, socketName)",
        "body": [
            "Entity:addEffect(name, effectName, once, pos, yaw, scale, socketName)"
        ],
        "description": "Entity:addEffect(name, effectName, once, pos, yaw, scale, socketName)"
    },
    "Entity:delEffect(name, smooth)": {
        "prefix": "Entity:delEffect(name, smooth)",
        "body": [
            "Entity:delEffect(name, smooth)"
        ],
        "description": "Entity:delEffect(name, smooth)"
    },
    "Entity:getActorName()": {
        "prefix": "Entity:getActorName()",
        "body": [
            "Entity:getActorName()"
        ],
        "description": "Entity:getActorName()"
    },
    "Entity:setActorScale(scale)": {
        "prefix": "Entity:setActorScale(scale)",
        "body": [
            "Entity:setActorScale(scale)"
        ],
        "description": "Entity:setActorScale(scale)"
    },
    "Entity:play3dSound(filename, isLoop)": {
        "prefix": "Entity:play3dSound(filename, isLoop)",
        "body": [
            "Entity:play3dSound(filename, isLoop)"
        ],
        "description": "Entity:play3dSound(filename, isLoop)"
    },
    "Entity:showHeadMessage(txt)": {
        "prefix": "Entity:showHeadMessage(txt)",
        "body": [
            "Entity:showHeadMessage(txt)"
        ],
        "description": "Entity:showHeadMessage(txt)"
    },
    "Entity:setGuideTarget(targetPosition, texName, speed)": {
        "prefix": "Entity:setGuideTarget(targetPosition, texName, speed)",
        "body": [
            "Entity:setGuideTarget(targetPosition, texName, speed)"
        ],
        "description": "Entity:setGuideTarget(targetPosition, texName, speed)"
    },
    "Entity:setGuideTarget1(targetEntity, texName, speed)": {
        "prefix": "Entity:setGuideTarget1(targetEntity, texName, speed)",
        "body": [
            "Entity:setGuideTarget1(targetEntity, texName, speed)"
        ],
        "description": "Entity:setGuideTarget1(targetEntity, texName, speed)"
    },
    "Entity:delGuideTarget()": {
        "prefix": "Entity:delGuideTarget()",
        "body": [
            "Entity:delGuideTarget()"
        ],
        "description": "Entity:delGuideTarget()"
    },
    "Entity:setGhost(enable, color, interval, num)": {
        "prefix": "Entity:setGhost(enable, color, interval, num)",
        "body": [
            "Entity:setGhost(enable, color, interval, num)"
        ],
        "description": "Entity:setGhost(enable, color, interval, num)"
    },
    "Entity:setHoldModelARGBStrength(r, g, b, a)": {
        "prefix": "Entity:setHoldModelARGBStrength(r, g, b, a)",
        "body": [
            "Entity:setHoldModelARGBStrength(r, g, b, a)"
        ],
        "description": "Entity:setHoldModelARGBStrength(r, g, b, a)"
    },
    "Entity:getHoldModelARGBStrength()": {
        "prefix": "Entity:getHoldModelARGBStrength()",
        "body": [
            "Entity:getHoldModelARGBStrength()"
        ],
        "description": "Entity:getHoldModelARGBStrength()"
    },
    "Entity:setUseOverlayColorReplaceMode(masterSlaveName, isUse)": {
        "prefix": "Entity:setUseOverlayColorReplaceMode(masterSlaveName, isUse)",
        "body": [
            "Entity:setUseOverlayColorReplaceMode(masterSlaveName, isUse)"
        ],
        "description": "Entity:setUseOverlayColorReplaceMode(masterSlaveName, isUse)"
    },
    "Entity:setOverlayColor(masterSlaveName, color)": {
        "prefix": "Entity:setOverlayColor(masterSlaveName, color)",
        "body": [
            "Entity:setOverlayColor(masterSlaveName, color)"
        ],
        "description": "Entity:setOverlayColor(masterSlaveName, color)"
    },
    "Entity:applySkin(skin)": {
        "prefix": "Entity:applySkin(skin)",
        "body": [
            "Entity:applySkin(skin)"
        ],
        "description": "Entity:applySkin(skin)"
    },
    "Entity:setEntityHide(hide)": {
        "prefix": "Entity:setEntityHide(hide)",
        "body": [
            "Entity:setEntityHide(hide)"
        ],
        "description": "Entity:setEntityHide(hide)"
    },
    "Entity:changeActor(actorName, clearSkin)": {
        "prefix": "Entity:changeActor(actorName, clearSkin)",
        "body": [
            "Entity:changeActor(actorName, clearSkin)"
        ],
        "description": "Entity:changeActor(actorName, clearSkin)"
    },
    "Entity:getHandItem()": {
        "prefix": "Entity:getHandItem()",
        "body": [
            "Entity:getHandItem()"
        ],
        "description": "Entity:getHandItem()"
    },
    "Entity:searchItem(cfgKey, val, type_list)": {
        "prefix": "Entity:searchItem(cfgKey, val, type_list)",
        "body": [
            "Entity:searchItem(cfgKey, val, type_list)"
        ],
        "description": "Entity:searchItem(cfgKey, val, type_list)"
    },
    "Entity:setEntityActorFlashEffect(add)": {
        "prefix": "Entity:setEntityActorFlashEffect(add)",
        "body": [
            "Entity:setEntityActorFlashEffect(add)"
        ],
        "description": "Entity:setEntityActorFlashEffect(add)"
    },
    "Entity:parserBubbleMsg(packet)": {
        "prefix": "Entity:parserBubbleMsg(packet)",
        "body": [
            "Entity:parserBubbleMsg(packet)"
        ],
        "description": "Entity:parserBubbleMsg(packet)"
    },
    "Entity:setHp(hp)": {
        "prefix": "Entity:setHp(hp)",
        "body": [
            "Entity:setHp(hp)"
        ],
        "description": "Entity:setHp(hp)"
    },
    "Entity:addHp(hp)": {
        "prefix": "Entity:addHp(hp)",
        "body": [
            "Entity:addHp(hp)"
        ],
        "description": "Entity:addHp(hp)"
    },
    "Entity:setVp(vp)": {
        "prefix": "Entity:setVp(vp)",
        "body": [
            "Entity:setVp(vp)"
        ],
        "description": "Entity:setVp(vp)"
    },
    "Entity:addVp(vp)": {
        "prefix": "Entity:addVp(vp)",
        "body": [
            "Entity:addVp(vp)"
        ],
        "description": "Entity:addVp(vp)"
    },
    "Entity:setPlayerControl(player)": {
        "prefix": "Entity:setPlayerControl(player)",
        "body": [
            "Entity:setPlayerControl(player)"
        ],
        "description": "Entity:setPlayerControl(player)"
    },
    "Entity:serverRebirth(map, pos, yaw, pitch)": {
        "prefix": "Entity:serverRebirth(map, pos, yaw, pitch)",
        "body": [
            "Entity:serverRebirth(map, pos, yaw, pitch)"
        ],
        "description": "Entity:serverRebirth(map, pos, yaw, pitch)"
    },
    "Entity:getCtrlPlayer()": {
        "prefix": "Entity:getCtrlPlayer()",
        "body": [
            "Entity:getCtrlPlayer()"
        ],
        "description": "Entity:getCtrlPlayer()"
    },
    "Entity:setMapPos(map, pos, yaw, pitch)": {
        "prefix": "Entity:setMapPos(map, pos, yaw, pitch)",
        "body": [
            "Entity:setMapPos(map, pos, yaw, pitch)"
        ],
        "description": "Entity:setMapPos(map, pos, yaw, pitch)"
    },
    "Entity:face2Pos(pos)": {
        "prefix": "Entity:face2Pos(pos)",
        "body": [
            "Entity:face2Pos(pos)"
        ],
        "description": "Entity:face2Pos(pos)"
    },
    "Entity:changeSkin(skinData)": {
        "prefix": "Entity:changeSkin(skinData)",
        "body": [
            "Entity:changeSkin(skinData)"
        ],
        "description": "Entity:changeSkin(skinData)"
    },
    "Entity:getTeam()": {
        "prefix": "Entity:getTeam()",
        "body": [
            "Entity:getTeam()"
        ],
        "description": "Entity:getTeam()"
    },
    "Entity:getRebirthPos()": {
        "prefix": "Entity:getRebirthPos()",
        "body": [
            "Entity:getRebirthPos()"
        ],
        "description": "Entity:getRebirthPos()"
    },
    "Entity:setRebirthPos(pos, map)": {
        "prefix": "Entity:setRebirthPos(pos, map)",
        "body": [
            "Entity:setRebirthPos(pos, map)"
        ],
        "description": "Entity:setRebirthPos(pos, map)"
    },
    "Entity:addItem(fullName, count, proc, reason)": {
        "prefix": "Entity:addItem(fullName, count, proc, reason)",
        "body": [
            "Entity:addItem(fullName, count, proc, reason)"
        ],
        "description": "Entity:addItem(fullName, count, proc, reason)"
    },
    "Entity:takeDamage(damage, from, isFormula, cause)": {
        "prefix": "Entity:takeDamage(damage, from, isFormula, cause)",
        "body": [
            "Entity:takeDamage(damage, from, isFormula, cause)"
        ],
        "description": "Entity:takeDamage(damage, from, isFormula, cause)"
    },
    "Entity:kill(from, cause)": {
        "prefix": "Entity:kill(from, cause)",
        "body": [
            "Entity:kill(from, cause)"
        ],
        "description": "Entity:kill(from, cause)"
    },
    "EntitySever.Create({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}}, func)": {
        "prefix": "EntitySever.Create({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}}, func)",
        "body": [
            "EntitySever.Create({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}}, func)"
        ],
        "description": "EntitySever.Create({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}}, func)"
    },
    "EntityClient.CreateClientEntity({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}, map = defaultMap})": {
        "prefix": "EntityClient.CreateClientEntity({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}, map = defaultMap})",
        "body": [
            "EntityClient.CreateClientEntity({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}, map = defaultMap})"
        ],
        "description": "EntityClient.CreateClientEntity({cfgName = \"myplugin/entity\", pos = {x = 0, y = 1, z = 0}, map = defaultMap})"
    },
    "ENTITY_ENTER": {
        "prefix": "ENTITY_ENTER",
        "body": [
            "ENTITY_ENTER"
        ],
        "description": "ENTITY_ENTER"
    },
    "ENTITY_LEAVE": {
        "prefix": "ENTITY_LEAVE",
        "body": [
            "ENTITY_LEAVE"
        ],
        "description": "ENTITY_LEAVE"
    },
    "ENTITY_CLICK": {
        "prefix": "ENTITY_CLICK",
        "body": [
            "ENTITY_CLICK"
        ],
        "description": "ENTITY_CLICK"
    },
    "ENTITY_TOUCHDOWN": {
        "prefix": "ENTITY_TOUCHDOWN",
        "body": [
            "ENTITY_TOUCHDOWN"
        ],
        "description": "ENTITY_TOUCHDOWN"
    },
    "ENTITY_DAMAGE": {
        "prefix": "ENTITY_DAMAGE",
        "body": [
            "ENTITY_DAMAGE"
        ],
        "description": "ENTITY_DAMAGE"
    },
    "ENTITY_DIE": {
        "prefix": "ENTITY_DIE",
        "body": [
            "ENTITY_DIE"
        ],
        "description": "ENTITY_DIE"
    },
    "ENTITY_REBIRTH": {
        "prefix": "ENTITY_REBIRTH",
        "body": [
            "ENTITY_REBIRTH"
        ],
        "description": "ENTITY_REBIRTH"
    },
    "ENTITY_USE_ITEM": {
        "prefix": "ENTITY_USE_ITEM",
        "body": [
            "ENTITY_USE_ITEM"
        ],
        "description": "ENTITY_USE_ITEM"
    },
    "WEAR_EQUIPMEN": {
        "prefix": "WEAR_EQUIPMEN",
        "body": [
            "WEAR_EQUIPMEN"
        ],
        "description": "WEAR_EQUIPMEN"
    },
    "TAKEOFF_EQUIPMEN": {
        "prefix": "TAKEOFF_EQUIPMEN",
        "body": [
            "TAKEOFF_EQUIPMEN"
        ],
        "description": "TAKEOFF_EQUIPMEN"
    },
    "HAND_ITEM_CHANGED": {
        "prefix": "HAND_ITEM_CHANGED",
        "body": [
            "HAND_ITEM_CHANGED"
        ],
        "description": "HAND_ITEM_CHANGED"
    },
    "JOIN_TEAM": {
        "prefix": "JOIN_TEAM",
        "body": [
            "JOIN_TEAM"
        ],
        "description": "JOIN_TEAM"
    },
    "LEAVE_TEAM": {
        "prefix": "LEAVE_TEAM",
        "body": [
            "LEAVE_TEAM"
        ],
        "description": "LEAVE_TEAM"
    },
    "ENTER_MAP": {
        "prefix": "ENTER_MAP",
        "body": [
            "ENTER_MAP"
        ],
        "description": "ENTER_MAP"
    },
    "LEAVE_MAP": {
        "prefix": "LEAVE_MAP",
        "body": [
            "LEAVE_MAP"
        ],
        "description": "LEAVE_MAP"
    },
    "ENTITY_TOUCH_ALL": {
        "prefix": "ENTITY_TOUCH_ALL",
        "body": [
            "ENTITY_TOUCH_ALL"
        ],
        "description": "ENTITY_TOUCH_ALL"
    },
    "ENTITY_HITTED": {
        "prefix": "ENTITY_HITTED",
        "body": [
            "ENTITY_HITTED"
        ],
        "description": "ENTITY_HITTED"
    },
    "HIT_ENTITY": {
        "prefix": "HIT_ENTITY",
        "body": [
            "HIT_ENTITY"
        ],
        "description": "HIT_ENTITY"
    },
    "HIT_BLOCK": {
        "prefix": "HIT_BLOCK",
        "body": [
            "HIT_BLOCK"
        ],
        "description": "HIT_BLOCK"
    },
    "ENTITY_HITTED_BY_RAY": {
        "prefix": "ENTITY_HITTED_BY_RAY",
        "body": [
            "ENTITY_HITTED_BY_RAY"
        ],
        "description": "ENTITY_HITTED_BY_RAY"
    },
    "HIT_ENTITY_BY_RAY": {
        "prefix": "HIT_ENTITY_BY_RAY",
        "body": [
            "HIT_ENTITY_BY_RAY"
        ],
        "description": "HIT_ENTITY_BY_RAY"
    },
    "HIT_BLOCK_BY_RAY": {
        "prefix": "HIT_BLOCK_BY_RAY",
        "body": [
            "HIT_BLOCK_BY_RAY"
        ],
        "description": "HIT_BLOCK_BY_RAY"
    },
    "SETTLE_ITEM": {
        "prefix": "SETTLE_ITEM",
        "body": [
            "SETTLE_ITEM"
        ],
        "description": "SETTLE_ITEM"
    },
    "REMOVE_ITEM": {
        "prefix": "REMOVE_ITEM",
        "body": [
            "REMOVE_ITEM"
        ],
        "description": "REMOVE_ITEM"
    },
    "Entity.GetCfg(cfgName)": {
        "prefix": "Entity.GetCfg(cfgName)",
        "body": [
            "Entity.GetCfg(cfgName)"
        ],
        "description": "Entity.GetCfg(cfgName)"
    },
    "Entity:getValue(key)": {
        "prefix": "Entity:getValue(key)",
        "body": [
            "Entity:getValue(key)"
        ],
        "description": "Entity:getValue(key)"
    },
    "Entity.addValueDef(key, init, toSelf, toOther, saveDB, client)": {
        "prefix": "Entity.addValueDef(key, init, toSelf, toOther, saveDB, client)",
        "body": [
            "Entity.addValueDef(key, init, toSelf, toOther, saveDB, client)"
        ],
        "description": "Entity.addValueDef(key, init, toSelf, toOther, saveDB, client)"
    },
    "Entity.addValueFunc(key, func)": {
        "prefix": "Entity.addValueFunc(key, func)",
        "body": [
            "Entity.addValueFunc(key, func)"
        ],
        "description": "Entity.addValueFunc(key, func)"
    },
    "Entity:setValue(key, value, noSync)": {
        "prefix": "Entity:setValue(key, value, noSync)",
        "body": [
            "Entity:setValue(key, value, noSync)"
        ],
        "description": "Entity:setValue(key, value, noSync)"
    },
    "Entity:doHurtRepel(vector)": {
        "prefix": "Entity:doHurtRepel(vector)",
        "body": [
            "Entity:doHurtRepel(vector)"
        ],
        "description": "Entity:doHurtRepel(vector)"
    },
    "Entity:setActorPause(isPause)": {
        "prefix": "Entity:setActorPause(isPause)",
        "body": [
            "Entity:setActorPause(isPause)"
        ],
        "description": "Entity:setActorPause(isPause)"
    },
    "Entity:getActorPause()": {
        "prefix": "Entity:getActorPause()",
        "body": [
            "Entity:getActorPause()"
        ],
        "description": "Entity:getActorPause()"
    },
    "Entity:setActorAnimRewind(rewind)": {
        "prefix": "Entity:setActorAnimRewind(rewind)",
        "body": [
            "Entity:setActorAnimRewind(rewind)"
        ],
        "description": "Entity:setActorAnimRewind(rewind)"
    },
    "Entity:isActorAnimRewind()": {
        "prefix": "Entity:isActorAnimRewind()",
        "body": [
            "Entity:isActorAnimRewind()"
        ],
        "description": "Entity:isActorAnimRewind()"
    },
    "Entity:refreshUpperAction()": {
        "prefix": "Entity:refreshUpperAction()",
        "body": [
            "Entity:refreshUpperAction()"
        ],
        "description": "Entity:refreshUpperAction()"
    },
    "Entity:refreshBaseAction()": {
        "prefix": "Entity:refreshBaseAction()",
        "body": [
            "Entity:refreshBaseAction()"
        ],
        "description": "Entity:refreshBaseAction()"
    },
    "Entity:setBaseActionScale(scale)": {
        "prefix": "Entity:setBaseActionScale(scale)",
        "body": [
            "Entity:setBaseActionScale(scale)"
        ],
        "description": "Entity:setBaseActionScale(scale)"
    },
    "Entity:getBaseActionScale()": {
        "prefix": "Entity:getBaseActionScale()",
        "body": [
            "Entity:getBaseActionScale()"
        ],
        "description": "Entity:getBaseActionScale()"
    },
    "Entity:setActionTimeScale(action, scale)": {
        "prefix": "Entity:setActionTimeScale(action, scale)",
        "body": [
            "Entity:setActionTimeScale(action, scale)"
        ],
        "description": "Entity:setActionTimeScale(action, scale)"
    },
    "Entity:getActionTimeScale(action)": {
        "prefix": "Entity:getActionTimeScale(action)",
        "body": [
            "Entity:getActionTimeScale(action)"
        ],
        "description": "Entity:getActionTimeScale(action)"
    },
    "Entity:removeActionTimeScale(action)": {
        "prefix": "Entity:removeActionTimeScale(action)",
        "body": [
            "Entity:removeActionTimeScale(action)"
        ],
        "description": "Entity:removeActionTimeScale(action)"
    },
    "Entity:isActionInTimeScaleMap(action)": {
        "prefix": "Entity:isActionInTimeScaleMap(action)",
        "body": [
            "Entity:isActionInTimeScaleMap(action)"
        ],
        "description": "Entity:isActionInTimeScaleMap(action)"
    },
    "Entity:getAIControl()": {
        "prefix": "Entity:getAIControl()",
        "body": [
            "Entity:getAIControl()"
        ],
        "description": "Entity:getAIControl()"
    },
    "Entity:startAI()": {
        "prefix": "Entity:startAI()",
        "body": [
            "Entity:startAI()"
        ],
        "description": "Entity:startAI()"
    },
    "Entity:stopAI()": {
        "prefix": "Entity:stopAI()",
        "body": [
            "Entity:stopAI()"
        ],
        "description": "Entity:stopAI()"
    },
    "Entity:setAITargetPos(pos, enable)": {
        "prefix": "Entity:setAITargetPos(pos, enable)",
        "body": [
            "Entity:setAITargetPos(pos, enable)"
        ],
        "description": "Entity:setAITargetPos(pos, enable)"
    },
    "Entity:enableAITargetPos(enable)": {
        "prefix": "Entity:enableAITargetPos(enable)",
        "body": [
            "Entity:enableAITargetPos(enable)"
        ],
        "description": "Entity:enableAITargetPos(enable)"
    },
    "Entity:addSkill( fullName )": {
        "prefix": "Entity:addSkill( fullName )",
        "body": [
            "Entity:addSkill( fullName )"
        ],
        "description": "Entity:addSkill( fullName )"
    },
    "Entity:removeSkill ( fullName )": {
        "prefix": "Entity:removeSkill ( fullName )",
        "body": [
            "Entity:removeSkill ( fullName )"
        ],
        "description": "Entity:removeSkill ( fullName )"
    },
    "Entity:addBuff( fullName )": {
        "prefix": "Entity:addBuff( fullName )",
        "body": [
            "Entity:addBuff( fullName )"
        ],
        "description": "Entity:addBuff( fullName )"
    },
    "Entity:removeBuff(buff)": {
        "prefix": "Entity:removeBuff(buff)",
        "body": [
            "Entity:removeBuff(buff)"
        ],
        "description": "Entity:removeBuff(buff)"
    },
    "Player:createPet(cfgName, show, map, pos)": {
        "prefix": "Player:createPet(cfgName, show, map, pos)",
        "body": [
            "Player:createPet(cfgName, show, map, pos)"
        ],
        "description": "Player:createPet(cfgName, show, map, pos)"
    },
    "Player:addPet(entity, index)": {
        "prefix": "Player:addPet(entity, index)",
        "body": [
            "Player:addPet(entity, index)"
        ],
        "description": "Player:addPet(entity, index)"
    },
    "Player:relievedPet(index)": {
        "prefix": "Player:relievedPet(index)",
        "body": [
            "Player:relievedPet(index)"
        ],
        "description": "Player:relievedPet(index)"
    },
    "Player:changePetCfg(index, cfgName)": {
        "prefix": "Player:changePetCfg(index, cfgName)",
        "body": [
            "Player:changePetCfg(index, cfgName)"
        ],
        "description": "Player:changePetCfg(index, cfgName)"
    },
    "Player:showPet(index, map, pos)": {
        "prefix": "Player:showPet(index, map, pos)",
        "body": [
            "Player:showPet(index, map, pos)"
        ],
        "description": "Player:showPet(index, map, pos)"
    },
    "Player:hidePet(index)": {
        "prefix": "Player:hidePet(index)",
        "body": [
            "Player:hidePet(index)"
        ],
        "description": "Player:hidePet(index)"
    },
    "Player:getPet(index)": {
        "prefix": "Player:getPet(index)",
        "body": [
            "Player:getPet(index)"
        ],
        "description": "Player:getPet(index)"
    },
    "Player:addCurrency(coinName, count, reason)": {
        "prefix": "Player:addCurrency(coinName, count, reason)",
        "body": [
            "Player:addCurrency(coinName, count, reason)"
        ],
        "description": "Player:addCurrency(coinName, count, reason)"
    },
    "Player:payCurrency(coinName, count, clear, check, reason)": {
        "prefix": "Player:payCurrency(coinName, count, clear, check, reason)",
        "body": [
            "Player:payCurrency(coinName, count, clear, check, reason)"
        ],
        "description": "Player:payCurrency(coinName, count, clear, check, reason)"
    },
    "Player:getWalletBalance(coinName)": {
        "prefix": "Player:getWalletBalance(coinName)",
        "body": [
            "Player:getWalletBalance(coinName)"
        ],
        "description": "Player:getWalletBalance(coinName)"
    },
    "Player:sendTip(tipType, textKey, keepTime)": {
        "prefix": "Player:sendTip(tipType, textKey, keepTime)",
        "body": [
            "Player:sendTip(tipType, textKey, keepTime)"
        ],
        "description": "Player:sendTip(tipType, textKey, keepTime)"
    },
    "PRE_CHECK_PICK_ITEM": {
        "prefix": "PRE_CHECK_PICK_ITEM",
        "body": [
            "PRE_CHECK_PICK_ITEM"
        ],
        "description": "PRE_CHECK_PICK_ITEM"
    },
    "Skill.Cast(fullName, packet, entity)": {
        "prefix": "Skill.Cast(fullName, packet, entity)",
        "body": [
            "Skill.Cast(fullName, packet, entity)"
        ],
        "description": "Skill.Cast(fullName, packet, entity)"
    },
    "Skill.Cfg(fullName)": {
        "prefix": "Skill.Cfg(fullName)",
        "body": [
            "Skill.Cfg(fullName)"
        ],
        "description": "Skill.Cfg(fullName)"
    },
    "Missile.GetCfg(cfgName)": {
        "prefix": "Missile.GetCfg(cfgName)",
        "body": [
            "Missile.GetCfg(cfgName)"
        ],
        "description": "Missile.GetCfg(cfgName)"
    },
    "DropItemServer.Create(params)": {
        "prefix": "DropItemServer.Create(params)",
        "body": [
            "DropItemServer.Create(params)"
        ],
        "description": "DropItemServer.Create(params)"
    },
    "DebugDraw.Instance()": {
        "prefix": "DebugDraw.Instance()",
        "body": [
            "DebugDraw.Instance()"
        ],
        "description": "DebugDraw.Instance()"
    },
    "DebugDraw:drawLine(from, to, color)": {
        "prefix": "DebugDraw:drawLine(from, to, color)",
        "body": [
            "DebugDraw:drawLine(from, to, color)"
        ],
        "description": "DebugDraw:drawLine(from, to, color)"
    },
    "DebugDraw:drawAABB(min, max, color)": {
        "prefix": "DebugDraw:drawAABB(min, max, color)",
        "body": [
            "DebugDraw:drawAABB(min, max, color)"
        ],
        "description": "DebugDraw:drawAABB(min, max, color)"
    },
    "DebugDraw.addEntry(flagName, renderFunc)": {
        "prefix": "DebugDraw.addEntry(flagName, renderFunc)",
        "body": [
            "DebugDraw.addEntry(flagName, renderFunc)"
        ],
        "description": "DebugDraw.addEntry(flagName, renderFunc)"
    },
    "DebugDraw:drawTriangle(vertex1, vertex2, vertex3, color)": {
        "prefix": "DebugDraw:drawTriangle(vertex1, vertex2, vertex3, color)",
        "body": [
            "DebugDraw:drawTriangle(vertex1, vertex2, vertex3, color)"
        ],
        "description": "DebugDraw:drawTriangle(vertex1, vertex2, vertex3, color)"
    },
    "DebugDraw:drawCircle(center, radius, normal, color)": {
        "prefix": "DebugDraw:drawCircle(center, radius, normal, color)",
        "body": [
            "DebugDraw:drawCircle(center, radius, normal, color)"
        ],
        "description": "DebugDraw:drawCircle(center, radius, normal, color)"
    },
    "DebugDraw:drawSphere(center, radius, color)": {
        "prefix": "DebugDraw:drawSphere(center, radius, color)",
        "body": [
            "DebugDraw:drawSphere(center, radius, color)"
        ],
        "description": "DebugDraw:drawSphere(center, radius, color)"
    },
    "DebugDraw:setLineWidth(width)": {
        "prefix": "DebugDraw:setLineWidth(width)",
        "body": [
            "DebugDraw:setLineWidth(width)"
        ],
        "description": "DebugDraw:setLineWidth(width)"
    },
    "TdAudioEngine.Instance()": {
        "prefix": "TdAudioEngine.Instance()",
        "body": [
            "TdAudioEngine.Instance()"
        ],
        "description": "TdAudioEngine.Instance()"
    },
    "TdAudioEngine:play3dSound(filePath, pos, isLoop)": {
        "prefix": "TdAudioEngine:play3dSound(filePath, pos, isLoop)",
        "body": [
            "TdAudioEngine:play3dSound(filePath, pos, isLoop)"
        ],
        "description": "TdAudioEngine:play3dSound(filePath, pos, isLoop)"
    },
    "TdAudioEngine:set3DMinMaxDistance(nSoundId, minDistance, maxDistance)": {
        "prefix": "TdAudioEngine:set3DMinMaxDistance(nSoundId, minDistance, maxDistance)",
        "body": [
            "TdAudioEngine:set3DMinMaxDistance(nSoundId, minDistance, maxDistance)"
        ],
        "description": "TdAudioEngine:set3DMinMaxDistance(nSoundId, minDistance, maxDistance)"
    },
    "TdAudioEngine:set3DRollOffMode(nSoundId, mode)": {
        "prefix": "TdAudioEngine:set3DRollOffMode(nSoundId, mode)",
        "body": [
            "TdAudioEngine:set3DRollOffMode(nSoundId, mode)"
        ],
        "description": "TdAudioEngine:set3DRollOffMode(nSoundId, mode)"
    },
    "TdAudioEngine:play2dSound(filePath, isLoop)": {
        "prefix": "TdAudioEngine:play2dSound(filePath, isLoop)",
        "body": [
            "TdAudioEngine:play2dSound(filePath, isLoop)"
        ],
        "description": "TdAudioEngine:play2dSound(filePath, isLoop)"
    },
    "TdAudioEngine:stopSound(nSoundId)": {
        "prefix": "TdAudioEngine:stopSound(nSoundId)",
        "body": [
            "TdAudioEngine:stopSound(nSoundId)"
        ],
        "description": "TdAudioEngine:stopSound(nSoundId)"
    },
    "TdAudioEngine:setSoundsVolume(nSoundId, volume)": {
        "prefix": "TdAudioEngine:setSoundsVolume(nSoundId, volume)",
        "body": [
            "TdAudioEngine:setSoundsVolume(nSoundId, volume)"
        ],
        "description": "TdAudioEngine:setSoundsVolume(nSoundId, volume)"
    },
    "TdAudioEngine:getSoundsVolume(nSoundId)": {
        "prefix": "TdAudioEngine:getSoundsVolume(nSoundId)",
        "body": [
            "TdAudioEngine:getSoundsVolume(nSoundId)"
        ],
        "description": "TdAudioEngine:getSoundsVolume(nSoundId)"
    },
    "TdAudioEngine:isPlaying(nSoundId)": {
        "prefix": "TdAudioEngine:isPlaying(nSoundId)",
        "body": [
            "TdAudioEngine:isPlaying(nSoundId)"
        ],
        "description": "TdAudioEngine:isPlaying(nSoundId)"
    },
    "TdAudioEngine:pauseSound(nSoundId)": {
        "prefix": "TdAudioEngine:pauseSound(nSoundId)",
        "body": [
            "TdAudioEngine:pauseSound(nSoundId)"
        ],
        "description": "TdAudioEngine:pauseSound(nSoundId)"
    },
    "TdAudioEngine:resumeSound(nSoundId)": {
        "prefix": "TdAudioEngine:resumeSound(nSoundId)",
        "body": [
            "TdAudioEngine:resumeSound(nSoundId)"
        ],
        "description": "TdAudioEngine:resumeSound(nSoundId)"
    },
    "TdAudioEngine:allMute(isMute)": {
        "prefix": "TdAudioEngine:allMute(isMute)",
        "body": [
            "TdAudioEngine:allMute(isMute)"
        ],
        "description": "TdAudioEngine:allMute(isMute)"
    },
    "TdAudioEngine:setGlobalVolume(volume)": {
        "prefix": "TdAudioEngine:setGlobalVolume(volume)",
        "body": [
            "TdAudioEngine:setGlobalVolume(volume)"
        ],
        "description": "TdAudioEngine:setGlobalVolume(volume)"
    },
    "TdAudioEngine:setSoundSpeed(nSoundId, percentage)": {
        "prefix": "TdAudioEngine:setSoundSpeed(nSoundId, percentage)",
        "body": [
            "TdAudioEngine:setSoundSpeed(nSoundId, percentage)"
        ],
        "description": "TdAudioEngine:setSoundSpeed(nSoundId, percentage)"
    },
    "TdAudioEngine:getGlobalVolume()": {
        "prefix": "TdAudioEngine:getGlobalVolume()",
        "body": [
            "TdAudioEngine:getGlobalVolume()"
        ],
        "description": "TdAudioEngine:getGlobalVolume()"
    },
    "PlayerControl:attach(entity)": {
        "prefix": "PlayerControl:attach(entity)",
        "body": [
            "PlayerControl:attach(entity)"
        ],
        "description": "PlayerControl:attach(entity)"
    },
    "PlayerControl:jump()": {
        "prefix": "PlayerControl:jump()",
        "body": [
            "PlayerControl:jump()"
        ],
        "description": "PlayerControl:jump()"
    },
    "Blockman.Instance()": {
        "prefix": "Blockman.Instance()",
        "body": [
            "Blockman.Instance()"
        ],
        "description": "Blockman.Instance()"
    },
    "Blockman:getUserAction()": {
        "prefix": "Blockman:getUserAction()",
        "body": [
            "Blockman:getUserAction()"
        ],
        "description": "Blockman:getUserAction()"
    },
    "Blockman:getHitInfo()": {
        "prefix": "Blockman:getHitInfo()",
        "body": [
            "Blockman:getHitInfo()"
        ],
        "description": "Blockman:getHitInfo()"
    },
    "Blockman.Instance():switchPersonView()": {
        "prefix": "Blockman.Instance():switchPersonView()",
        "body": [
            "Blockman.Instance():switchPersonView()"
        ],
        "description": "Blockman.Instance():switchPersonView()"
    },
    "Blockman.Instance():setCanSwitchView(false)": {
        "prefix": "Blockman.Instance():setCanSwitchView(false)",
        "body": [
            "Blockman.Instance():setCanSwitchView(false)"
        ],
        "description": "Blockman.Instance():setCanSwitchView(false)"
    },
    "Blockman.Instance():setPersonView(1)": {
        "prefix": "Blockman.Instance():setPersonView(1)",
        "body": [
            "Blockman.Instance():setPersonView(1)"
        ],
        "description": "Blockman.Instance():setPersonView(1)"
    },
    "Blockman.Instance():getPersonView()": {
        "prefix": "Blockman.Instance():getPersonView()",
        "body": [
            "Blockman.Instance():getPersonView()"
        ],
        "description": "Blockman.Instance():getPersonView()"
    },
    "Blockman.Instance():control()": {
        "prefix": "Blockman.Instance():control()",
        "body": [
            "Blockman.Instance():control()"
        ],
        "description": "Blockman.Instance():control()"
    },
    "Blockman.Instance():setViewEntity(entity)": {
        "prefix": "Blockman.Instance():setViewEntity(entity)",
        "body": [
            "Blockman.Instance():setViewEntity(entity)"
        ],
        "description": "Blockman.Instance():setViewEntity(entity)"
    },
    "Blockman.Instance():viewEntity()": {
        "prefix": "Blockman.Instance():viewEntity()",
        "body": [
            "Blockman.Instance():viewEntity()"
        ],
        "description": "Blockman.Instance():viewEntity()"
    },
    "Blockman.Instance():getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)": {
        "prefix": "Blockman.Instance():getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)",
        "body": [
            "Blockman.Instance():getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)"
        ],
        "description": "Blockman.Instance():getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)"
    },
    "Blockman.Instance():getClosestRayTraceResult(startPos, endPos, rayLength)": {
        "prefix": "Blockman.Instance():getClosestRayTraceResult(startPos, endPos, rayLength)",
        "body": [
            "Blockman.Instance():getClosestRayTraceResult(startPos, endPos, rayLength)"
        ],
        "description": "Blockman.Instance():getClosestRayTraceResult(startPos, endPos, rayLength)"
    },
    "Blockman.Instance():getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)": {
        "prefix": "Blockman.Instance():getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)",
        "body": [
            "Blockman.Instance():getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)"
        ],
        "description": "Blockman.Instance():getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)"
    },
    "Blockman.Instance():changeCameraView(pos, yaw, pitch, distance, smooth)": {
        "prefix": "Blockman.Instance():changeCameraView(pos, yaw, pitch, distance, smooth)",
        "body": [
            "Blockman.Instance():changeCameraView(pos, yaw, pitch, distance, smooth)"
        ],
        "description": "Blockman.Instance():changeCameraView(pos, yaw, pitch, distance, smooth)"
    },
    "Blockman.Instance():changeCameraCfg(config, modeViewIndex)": {
        "prefix": "Blockman.Instance():changeCameraCfg(config, modeViewIndex)",
        "body": [
            "Blockman.Instance():changeCameraCfg(config, modeViewIndex)"
        ],
        "description": "Blockman.Instance():changeCameraCfg(config, modeViewIndex)"
    },
    "Blockman.Instance():getCameraInfo(viewIndex)": {
        "prefix": "Blockman.Instance():getCameraInfo(viewIndex)",
        "body": [
            "Blockman.Instance():getCameraInfo(viewIndex)"
        ],
        "description": "Blockman.Instance():getCameraInfo(viewIndex)"
    },
    "Blockman.Instance():getScreenPos(position)": {
        "prefix": "Blockman.Instance():getScreenPos(position)",
        "body": [
            "Blockman.Instance():getScreenPos(position)"
        ],
        "description": "Blockman.Instance():getScreenPos(position)"
    },
    "Blockman.Instance():getScreenSize()": {
        "prefix": "Blockman.Instance():getScreenSize()",
        "body": [
            "Blockman.Instance():getScreenSize()"
        ],
        "description": "Blockman.Instance():getScreenSize()"
    },
    "Blockman.Instance():playEffectByPos(templateName, position, yaw, duration, scale)": {
        "prefix": "Blockman.Instance():playEffectByPos(templateName, position, yaw, duration, scale)",
        "body": [
            "Blockman.Instance():playEffectByPos(templateName, position, yaw, duration, scale)"
        ],
        "description": "Blockman.Instance():playEffectByPos(templateName, position, yaw, duration, scale)"
    },
    "Blockman.Instance():delEffect(templateName, position)": {
        "prefix": "Blockman.Instance():delEffect(templateName, position)",
        "body": [
            "Blockman.Instance():delEffect(templateName, position)"
        ],
        "description": "Blockman.Instance():delEffect(templateName, position)"
    },
    "Blockman.Instance():addBetweenEffect(templateName, position, endPos, duration)": {
        "prefix": "Blockman.Instance():addBetweenEffect(templateName, position, endPos, duration)",
        "body": [
            "Blockman.Instance():addBetweenEffect(templateName, position, endPos, duration)"
        ],
        "description": "Blockman.Instance():addBetweenEffect(templateName, position, endPos, duration)"
    },
    "Blockman.Instance():trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)": {
        "prefix": "Blockman.Instance():trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)",
        "body": [
            "Blockman.Instance():trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)"
        ],
        "description": "Blockman.Instance():trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)"
    },
    "Blockman.Instance():getClickPos()": {
        "prefix": "Blockman.Instance():getClickPos()",
        "body": [
            "Blockman.Instance():getClickPos()"
        ],
        "description": "Blockman.Instance():getClickPos()"
    },
    "Blockman.Instance():toScreenClickPos(pos)": {
        "prefix": "Blockman.Instance():toScreenClickPos(pos)",
        "body": [
            "Blockman.Instance():toScreenClickPos(pos)"
        ],
        "description": "Blockman.Instance():toScreenClickPos(pos)"
    },
    "item:cfg()": {
        "prefix": "item:cfg()",
        "body": [
            "item:cfg()"
        ],
        "description": "item:cfg()"
    },
    "item:full_name()": {
        "prefix": "item:full_name()",
        "body": [
            "item:full_name()"
        ],
        "description": "item:full_name()"
    },
    "item:stack_count_max()": {
        "prefix": "item:stack_count_max()",
        "body": [
            "item:stack_count_max()"
        ],
        "description": "item:stack_count_max()"
    },
    "item:null()": {
        "prefix": "item:null()",
        "body": [
            "item:null()"
        ],
        "description": "item:null()"
    },
    "item:tid()": {
        "prefix": "item:tid()",
        "body": [
            "item:tid()"
        ],
        "description": "item:tid()"
    },
    "item:slot()": {
        "prefix": "item:slot()",
        "body": [
            "item:slot()"
        ],
        "description": "item:slot()"
    },
    "item:replace(fullName)": {
        "prefix": "item:replace(fullName)",
        "body": [
            "item:replace(fullName)"
        ],
        "description": "item:replace(fullName)"
    },
    "item:consume(count)": {
        "prefix": "item:consume(count)",
        "body": [
            "item:consume(count)"
        ],
        "description": "item:consume(count)"
    },
    "item:stack_count()": {
        "prefix": "item:stack_count()",
        "body": [
            "item:stack_count()"
        ],
        "description": "item:stack_count()"
    },
    "item:set_stack_count(count)": {
        "prefix": "item:set_stack_count(count)",
        "body": [
            "item:set_stack_count(count)"
        ],
        "description": "item:set_stack_count(count)"
    },
    "item:stack_free()": {
        "prefix": "item:stack_free()",
        "body": [
            "item:stack_free()"
        ],
        "description": "item:stack_free()"
    },
    "item:is_block()": {
        "prefix": "item:is_block()",
        "body": [
            "item:is_block()"
        ],
        "description": "item:is_block()"
    },
    "item:block_id()": {
        "prefix": "item:block_id()",
        "body": [
            "item:block_id()"
        ],
        "description": "item:block_id()"
    },
    "item:block_cfg()": {
        "prefix": "item:block_cfg()",
        "body": [
            "item:block_cfg()"
        ],
        "description": "item:block_cfg()"
    },
    "item:set_block_id(id)": {
        "prefix": "item:set_block_id(id)",
        "body": [
            "item:set_block_id(id)"
        ],
        "description": "item:set_block_id(id)"
    },
    "item:set_block(name)": {
        "prefix": "item:set_block(name)",
        "body": [
            "item:set_block(name)"
        ],
        "description": "item:set_block(name)"
    },
    "item:model(act)": {
        "prefix": "item:model(act)",
        "body": [
            "item:model(act)"
        ],
        "description": "item:model(act)"
    },
    "item:icon()": {
        "prefix": "item:icon()",
        "body": [
            "item:icon()"
        ],
        "description": "item:icon()"
    },
    "Item.new(fullName, count)": {
        "prefix": "Item.new(fullName, count)",
        "body": [
            "Item.new(fullName, count)"
        ],
        "description": "Item.new(fullName, count)"
    },
    "Item.newBlock(fullName, count)": {
        "prefix": "Item.newBlock(fullName, count)",
        "body": [
            "Item.newBlock(fullName, count)"
        ],
        "description": "Item.newBlock(fullName, count)"
    },
    "tray:owner()": {
        "prefix": "tray:owner()",
        "body": [
            "tray:owner()"
        ],
        "description": "tray:owner()"
    },
    "tray:capacity()": {
        "prefix": "tray:capacity()",
        "body": [
            "tray:capacity()"
        ],
        "description": "tray:capacity()"
    },
    "tray:set_capacity(capacity)": {
        "prefix": "tray:set_capacity(capacity)",
        "body": [
            "tray:set_capacity(capacity)"
        ],
        "description": "tray:set_capacity(capacity)"
    },
    "tray:add_capacity(capacity)": {
        "prefix": "tray:add_capacity(capacity)",
        "body": [
            "tray:add_capacity(capacity)"
        ],
        "description": "tray:add_capacity(capacity)"
    },
    "tray:max_capacity()": {
        "prefix": "tray:max_capacity()",
        "body": [
            "tray:max_capacity()"
        ],
        "description": "tray:max_capacity()"
    },
    "tray:set_max_capacity(capacity)": {
        "prefix": "tray:set_max_capacity(capacity)",
        "body": [
            "tray:set_max_capacity(capacity)"
        ],
        "description": "tray:set_max_capacity(capacity)"
    },
    "tray:avail_capacity()": {
        "prefix": "tray:avail_capacity()",
        "body": [
            "tray:avail_capacity()"
        ],
        "description": "tray:avail_capacity()"
    },
    "tray:type()": {
        "prefix": "tray:type()",
        "body": [
            "tray:type()"
        ],
        "description": "tray:type()"
    },
    "tray:is_valid_slot(slot)": {
        "prefix": "tray:is_valid_slot(slot)",
        "body": [
            "tray:is_valid_slot(slot)"
        ],
        "description": "tray:is_valid_slot(slot)"
    },
    "tray:fetch_item(slot)": {
        "prefix": "tray:fetch_item(slot)",
        "body": [
            "tray:fetch_item(slot)"
        ],
        "description": "tray:fetch_item(slot)"
    },
    "tray:query_items(cmp)": {
        "prefix": "tray:query_items(cmp)",
        "body": [
            "tray:query_items(cmp)"
        ],
        "description": "tray:query_items(cmp)"
    },
    "tray:find_free(force)": {
        "prefix": "tray:find_free(force)",
        "body": [
            "tray:find_free(force)"
        ],
        "description": "tray:find_free(force)"
    },
    "tray:count_item_num_by_fullname(fullname)": {
        "prefix": "tray:count_item_num_by_fullname(fullname)",
        "body": [
            "tray:count_item_num_by_fullname(fullname)"
        ],
        "description": "tray:count_item_num_by_fullname(fullname)"
    },
    "EntityTrays:add_tray(tray)": {
        "prefix": "EntityTrays:add_tray(tray)",
        "body": [
            "EntityTrays:add_tray(tray)"
        ],
        "description": "EntityTrays:add_tray(tray)"
    },
    "EntityTrays:fetch_tray(tid)": {
        "prefix": "EntityTrays:fetch_tray(tid)",
        "body": [
            "EntityTrays:fetch_tray(tid)"
        ],
        "description": "EntityTrays:fetch_tray(tid)"
    },
    "EntityTrays:query_trays(filter)": {
        "prefix": "EntityTrays:query_trays(filter)",
        "body": [
            "EntityTrays:query_trays(filter)"
        ],
        "description": "EntityTrays:query_trays(filter)"
    },
    "EntityTrays:find_item(item_name)": {
        "prefix": "EntityTrays:find_item(item_name)",
        "body": [
            "EntityTrays:find_item(item_name)"
        ],
        "description": "EntityTrays:find_item(item_name)"
    },
    "Tray:new_tray(type, capacity)": {
        "prefix": "Tray:new_tray(type, capacity)",
        "body": [
            "Tray:new_tray(type, capacity)"
        ],
        "description": "Tray:new_tray(type, capacity)"
    },
    "tray:remove_item(slot)": {
        "prefix": "tray:remove_item(slot)",
        "body": [
            "tray:remove_item(slot)"
        ],
        "description": "tray:remove_item(slot)"
    },
    "tray:settle_item(slot, item)": {
        "prefix": "tray:settle_item(slot, item)",
        "body": [
            "tray:settle_item(slot, item)"
        ],
        "description": "tray:settle_item(slot, item)"
    },
    "DebugDraw:isEnabled()": {
        "prefix": "DebugDraw:isEnabled()",
        "body": [
            "DebugDraw:isEnabled()"
        ],
        "description": "DebugDraw:isEnabled()"
    },
    "DebugDraw:setEnabled(value)": {
        "prefix": "DebugDraw:setEnabled(value)",
        "body": [
            "DebugDraw:setEnabled(value)"
        ],
        "description": "DebugDraw:setEnabled(value)"
    },
    "DebugDraw:isDrawColliderEnabled()": {
        "prefix": "DebugDraw:isDrawColliderEnabled()",
        "body": [
            "DebugDraw:isDrawColliderEnabled()"
        ],
        "description": "DebugDraw:isDrawColliderEnabled()"
    },
    "DebugDraw:setDrawColliderEnabled(enabled)": {
        "prefix": "DebugDraw:setDrawColliderEnabled(enabled)",
        "body": [
            "DebugDraw:setDrawColliderEnabled(enabled)"
        ],
        "description": "DebugDraw:setDrawColliderEnabled(enabled)"
    },
    "DebugDraw:isDrawRegionEnabled()": {
        "prefix": "DebugDraw:isDrawRegionEnabled()",
        "body": [
            "DebugDraw:isDrawRegionEnabled()"
        ],
        "description": "DebugDraw:isDrawRegionEnabled()"
    },
    "DebugDraw:setDrawRegionEnabled(enabled)": {
        "prefix": "DebugDraw:setDrawRegionEnabled(enabled)",
        "body": [
            "DebugDraw:setDrawRegionEnabled(enabled)"
        ],
        "description": "DebugDraw:setDrawRegionEnabled(enabled)"
    },
    "Blockman.Instance().gameSettings": {
        "prefix": "Blockman.Instance().gameSettings",
        "body": [
            "Blockman.Instance().gameSettings"
        ],
        "description": "Blockman.Instance().gameSettings"
    },
    "Blockman.Instance().gameSettings:getCameraSensitive()": {
        "prefix": "Blockman.Instance().gameSettings:getCameraSensitive()",
        "body": [
            "Blockman.Instance().gameSettings:getCameraSensitive()"
        ],
        "description": "Blockman.Instance().gameSettings:getCameraSensitive()"
    },
    "Blockman.Instance().gameSettings:setCameraSensitive(sensitive)": {
        "prefix": "Blockman.Instance().gameSettings:setCameraSensitive(sensitive)",
        "body": [
            "Blockman.Instance().gameSettings:setCameraSensitive(sensitive)"
        ],
        "description": "Blockman.Instance().gameSettings:setCameraSensitive(sensitive)"
    },
    "Blockman.Instance().gameSettings:setCustomFog(start, end, density, color)": {
        "prefix": "Blockman.Instance().gameSettings:setCustomFog(start, end, density, color)",
        "body": [
            "Blockman.Instance().gameSettings:setCustomFog(start, end, density, color)"
        ],
        "description": "Blockman.Instance().gameSettings:setCustomFog(start, end, density, color)"
    },
    "Blockman.Instance().gameSettings:setMainLightDir(dir)": {
        "prefix": "Blockman.Instance().gameSettings:setMainLightDir(dir)",
        "body": [
            "Blockman.Instance().gameSettings:setMainLightDir(dir)"
        ],
        "description": "Blockman.Instance().gameSettings:setMainLightDir(dir)"
    },
    "Blockman.Instance().gameSettings:setMainLightColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setMainLightColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setMainLightColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setMainLightColor(color)"
    },
    "Blockman.Instance().gameSettings:setSubLightColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setSubLightColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setSubLightColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setSubLightColor(color)"
    },
    "Blockman.Instance().gameSettings:setAmbientColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setAmbientColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setAmbientColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setAmbientColor(color)"
    },
    "Blockman.Instance().gameSettings:setBrightness(color)": {
        "prefix": "Blockman.Instance().gameSettings:setBrightness(color)",
        "body": [
            "Blockman.Instance().gameSettings:setBrightness(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setBrightness(color)"
    },
    "Blockman.Instance().gameSettings:getMainLightDir()": {
        "prefix": "Blockman.Instance().gameSettings:getMainLightDir()",
        "body": [
            "Blockman.Instance().gameSettings:getMainLightDir()"
        ],
        "description": "Blockman.Instance().gameSettings:getMainLightDir()"
    },
    "Blockman.Instance().gameSettings:getMainLightColor()": {
        "prefix": "Blockman.Instance().gameSettings:getMainLightColor()",
        "body": [
            "Blockman.Instance().gameSettings:getMainLightColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getMainLightColor()"
    },
    "Blockman.Instance().gameSettings:getSubLightColor()": {
        "prefix": "Blockman.Instance().gameSettings:getSubLightColor()",
        "body": [
            "Blockman.Instance().gameSettings:getSubLightColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getSubLightColor()"
    },
    "Blockman.Instance().gameSettings:getAmbientColor()": {
        "prefix": "Blockman.Instance().gameSettings:getAmbientColor()",
        "body": [
            "Blockman.Instance().gameSettings:getAmbientColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getAmbientColor()"
    },
    "Blockman.Instance().gameSettings:getBrightness()": {
        "prefix": "Blockman.Instance().gameSettings:getBrightness()",
        "body": [
            "Blockman.Instance().gameSettings:getBrightness()"
        ],
        "description": "Blockman.Instance().gameSettings:getBrightness()"
    },
    "Blockman.Instance().gameSettings:setActorReceiveBlockLight(val)": {
        "prefix": "Blockman.Instance().gameSettings:setActorReceiveBlockLight(val)",
        "body": [
            "Blockman.Instance().gameSettings:setActorReceiveBlockLight(val)"
        ],
        "description": "Blockman.Instance().gameSettings:setActorReceiveBlockLight(val)"
    },
    "Blockman.Instance().gameSettings:setActorMainLightColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setActorMainLightColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setActorMainLightColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setActorMainLightColor(color)"
    },
    "Blockman.Instance().gameSettings:setActorSubLightColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setActorSubLightColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setActorSubLightColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setActorSubLightColor(color)"
    },
    "Blockman.Instance().gameSettings:setActorAmbientColor(color)": {
        "prefix": "Blockman.Instance().gameSettings:setActorAmbientColor(color)",
        "body": [
            "Blockman.Instance().gameSettings:setActorAmbientColor(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setActorAmbientColor(color)"
    },
    "Blockman.Instance().gameSettings:setActorBrightness(color)": {
        "prefix": "Blockman.Instance().gameSettings:setActorBrightness(color)",
        "body": [
            "Blockman.Instance().gameSettings:setActorBrightness(color)"
        ],
        "description": "Blockman.Instance().gameSettings:setActorBrightness(color)"
    },
    "Blockman.Instance().gameSettings:getActorMainLightColor()": {
        "prefix": "Blockman.Instance().gameSettings:getActorMainLightColor()",
        "body": [
            "Blockman.Instance().gameSettings:getActorMainLightColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getActorMainLightColor()"
    },
    "Blockman.Instance().gameSettings:getActorSubLightColor()": {
        "prefix": "Blockman.Instance().gameSettings:getActorSubLightColor()",
        "body": [
            "Blockman.Instance().gameSettings:getActorSubLightColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getActorSubLightColor()"
    },
    "Blockman.Instance().gameSettings:getActorAmbientColor()": {
        "prefix": "Blockman.Instance().gameSettings:getActorAmbientColor()",
        "body": [
            "Blockman.Instance().gameSettings:getActorAmbientColor()"
        ],
        "description": "Blockman.Instance().gameSettings:getActorAmbientColor()"
    },
    "Blockman.Instance().gameSettings:getActorBrightness()": {
        "prefix": "Blockman.Instance().gameSettings:getActorBrightness()",
        "body": [
            "Blockman.Instance().gameSettings:getActorBrightness()"
        ],
        "description": "Blockman.Instance().gameSettings:getActorBrightness()"
    },
    "Blockman.Instance().gameSettings:setCurQualityLevel(level)": {
        "prefix": "Blockman.Instance().gameSettings:setCurQualityLevel(level)",
        "body": [
            "Blockman.Instance().gameSettings:setCurQualityLevel(level)"
        ],
        "description": "Blockman.Instance().gameSettings:setCurQualityLevel(level)"
    },
    "Blockman.Instance().gameSettings:getEnableSpecular()": {
        "prefix": "Blockman.Instance().gameSettings:getEnableSpecular()",
        "body": [
            "Blockman.Instance().gameSettings:getEnableSpecular()"
        ],
        "description": "Blockman.Instance().gameSettings:getEnableSpecular()"
    },
    "Blockman.Instance().gameSettings:setEnableBlockRender(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableBlockRender(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableBlockRender(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableBlockRender(_val)"
    },
    "Blockman.Instance().gameSettings:setEnableActorRender(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableActorRender(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableActorRender(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableActorRender(_val)"
    },
    "Blockman.Instance().gameSettings:setEnableEffectRender(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableEffectRender(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableEffectRender(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableEffectRender(_val)"
    },
    "Blockman.Instance().gameSettings:setWorldEffectVisualDistance(distance)": {
        "prefix": "Blockman.Instance().gameSettings:setWorldEffectVisualDistance(distance)",
        "body": [
            "Blockman.Instance().gameSettings:setWorldEffectVisualDistance(distance)"
        ],
        "description": "Blockman.Instance().gameSettings:setWorldEffectVisualDistance(distance)"
    },
    "Blockman.Instance().gameSettings:getWorldEffectVisualDistance()": {
        "prefix": "Blockman.Instance().gameSettings:getWorldEffectVisualDistance()",
        "body": [
            "Blockman.Instance().gameSettings:getWorldEffectVisualDistance()"
        ],
        "description": "Blockman.Instance().gameSettings:getWorldEffectVisualDistance()"
    },
    "Blockman.Instance().gameSettings:clearSky()": {
        "prefix": "Blockman.Instance().gameSettings:clearSky()",
        "body": [
            "Blockman.Instance().gameSettings:clearSky()"
        ],
        "description": "Blockman.Instance().gameSettings:clearSky()"
    },
    "Blockman.Instance().gameSettings:addSky(right, left, top, bottom, back, front, time, transition)": {
        "prefix": "Blockman.Instance().gameSettings:addSky(right, left, top, bottom, back, front, time, transition)",
        "body": [
            "Blockman.Instance().gameSettings:addSky(right, left, top, bottom, back, front, time, transition)"
        ],
        "description": "Blockman.Instance().gameSettings:addSky(right, left, top, bottom, back, front, time, transition)"
    },
    "Blockman.Instance().gameSettings:setEnableAntiAliasing(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableAntiAliasing(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableAntiAliasing(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableAntiAliasing(_val)"
    },
    "Blockman.Instance().gameSettings:getEnableAntiAliasing()": {
        "prefix": "Blockman.Instance().gameSettings:getEnableAntiAliasing()",
        "body": [
            "Blockman.Instance().gameSettings:getEnableAntiAliasing()"
        ],
        "description": "Blockman.Instance().gameSettings:getEnableAntiAliasing()"
    },
    "Blockman.Instance().gameSettings:setEnableBloom(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableBloom(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableBloom(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableBloom(_val)"
    },
    "Blockman.Instance().gameSettings:getEnableBloom()": {
        "prefix": "Blockman.Instance().gameSettings:getEnableBloom()",
        "body": [
            "Blockman.Instance().gameSettings:getEnableBloom()"
        ],
        "description": "Blockman.Instance().gameSettings:getEnableBloom()"
    },
    "Blockman.Instance().gameSettings:setBloomThreshold(val)": {
        "prefix": "Blockman.Instance().gameSettings:setBloomThreshold(val)",
        "body": [
            "Blockman.Instance().gameSettings:setBloomThreshold(val)"
        ],
        "description": "Blockman.Instance().gameSettings:setBloomThreshold(val)"
    },
    "Blockman.Instance().gameSettings:getBloomThreshold()": {
        "prefix": "Blockman.Instance().gameSettings:getBloomThreshold()",
        "body": [
            "Blockman.Instance().gameSettings:getBloomThreshold()"
        ],
        "description": "Blockman.Instance().gameSettings:getBloomThreshold()"
    },
    "Blockman.Instance().gameSettings:setBloomSaturation(val)": {
        "prefix": "Blockman.Instance().gameSettings:setBloomSaturation(val)",
        "body": [
            "Blockman.Instance().gameSettings:setBloomSaturation(val)"
        ],
        "description": "Blockman.Instance().gameSettings:setBloomSaturation(val)"
    },
    "Blockman.Instance().gameSettings:getBloomSaturation()": {
        "prefix": "Blockman.Instance().gameSettings:getBloomSaturation()",
        "body": [
            "Blockman.Instance().gameSettings:getBloomSaturation()"
        ],
        "description": "Blockman.Instance().gameSettings:getBloomSaturation()"
    },
    "Blockman.Instance().gameSettings:setBloomDeviation(val)": {
        "prefix": "Blockman.Instance().gameSettings:setBloomDeviation(val)",
        "body": [
            "Blockman.Instance().gameSettings:setBloomDeviation(val)"
        ],
        "description": "Blockman.Instance().gameSettings:setBloomDeviation(val)"
    },
    "Blockman.Instance().gameSettings:getBloomDeviation()": {
        "prefix": "Blockman.Instance().gameSettings:getBloomDeviation()",
        "body": [
            "Blockman.Instance().gameSettings:getBloomDeviation()"
        ],
        "description": "Blockman.Instance().gameSettings:getBloomDeviation()"
    },
    "Blockman.Instance().gameSettings:setBloomIntensity(val)": {
        "prefix": "Blockman.Instance().gameSettings:setBloomIntensity(val)",
        "body": [
            "Blockman.Instance().gameSettings:setBloomIntensity(val)"
        ],
        "description": "Blockman.Instance().gameSettings:setBloomIntensity(val)"
    },
    "Blockman.Instance().gameSettings:getBloomIntensity()": {
        "prefix": "Blockman.Instance().gameSettings:getBloomIntensity()",
        "body": [
            "Blockman.Instance().gameSettings:getBloomIntensity()"
        ],
        "description": "Blockman.Instance().gameSettings:getBloomIntensity()"
    },
    "Blockman.Instance().gameSettings:setEnableMotionBlur(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableMotionBlur(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableMotionBlur(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableMotionBlur(_val)"
    },
    "Blockman.Instance().gameSettings:getEnableMotionBlur()": {
        "prefix": "Blockman.Instance().gameSettings:getEnableMotionBlur()",
        "body": [
            "Blockman.Instance().gameSettings:getEnableMotionBlur()"
        ],
        "description": "Blockman.Instance().gameSettings:getEnableMotionBlur()"
    },
    "Blockman.Instance().gameSettings:setMotionBlurStrength(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setMotionBlurStrength(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setMotionBlurStrength(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setMotionBlurStrength(_val)"
    },
    "Blockman.Instance().gameSettings:getMotionBlurStrength()": {
        "prefix": "Blockman.Instance().gameSettings:getMotionBlurStrength()",
        "body": [
            "Blockman.Instance().gameSettings:getMotionBlurStrength()"
        ],
        "description": "Blockman.Instance().gameSettings:getMotionBlurStrength()"
    },
    "Blockman.Instance().gameSettings:setEnableRadialBlur(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setEnableRadialBlur(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setEnableRadialBlur(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setEnableRadialBlur(_val)"
    },
    "Blockman.Instance().gameSettings:setRadialBlurStrength(_val)": {
        "prefix": "Blockman.Instance().gameSettings:setRadialBlurStrength(_val)",
        "body": [
            "Blockman.Instance().gameSettings:setRadialBlurStrength(_val)"
        ],
        "description": "Blockman.Instance().gameSettings:setRadialBlurStrength(_val)"
    },
    "Blockman.Instance().gameSettings:loadCameraCfg(config)": {
        "prefix": "Blockman.Instance().gameSettings:loadCameraCfg(config)",
        "body": [
            "Blockman.Instance().gameSettings:loadCameraCfg(config)"
        ],
        "description": "Blockman.Instance().gameSettings:loadCameraCfg(config)"
    },
    "Blockman.Instance().gameSettings:setPersonView(viewMode)": {
        "prefix": "Blockman.Instance().gameSettings:setPersonView(viewMode)",
        "body": [
            "Blockman.Instance().gameSettings:setPersonView(viewMode)"
        ],
        "description": "Blockman.Instance().gameSettings:setPersonView(viewMode)"
    },
    "Blockman.Instance().gameSettings:clearLight()": {
        "prefix": "Blockman.Instance().gameSettings:clearLight()",
        "body": [
            "Blockman.Instance().gameSettings:clearLight()"
        ],
        "description": "Blockman.Instance().gameSettings:clearLight()"
    },
    "Blockman.Instance().gameSettings:addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)": {
        "prefix": "Blockman.Instance().gameSettings:addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)",
        "body": [
            "Blockman.Instance().gameSettings:addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
        ],
        "description": "Blockman.Instance().gameSettings:addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
    },
    "Blockman.Instance().gameSettings:clearActorLight()": {
        "prefix": "Blockman.Instance().gameSettings:clearActorLight()",
        "body": [
            "Blockman.Instance().gameSettings:clearActorLight()"
        ],
        "description": "Blockman.Instance().gameSettings:clearActorLight()"
    },
    "Blockman.Instance().gameSettings:addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)": {
        "prefix": "Blockman.Instance().gameSettings:addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)",
        "body": [
            "Blockman.Instance().gameSettings:addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
        ],
        "description": "Blockman.Instance().gameSettings:addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
    },
    "Blockman.Instance().gameSettings:beginMouseMove(x, y)": {
        "prefix": "Blockman.Instance().gameSettings:beginMouseMove(x, y)",
        "body": [
            "Blockman.Instance().gameSettings:beginMouseMove(x, y)"
        ],
        "description": "Blockman.Instance().gameSettings:beginMouseMove(x, y)"
    },
    "Blockman.Instance().gameSettings:setMouseMoveState(bState)": {
        "prefix": "Blockman.Instance().gameSettings:setMouseMoveState(bState)",
        "body": [
            "Blockman.Instance().gameSettings:setMouseMoveState(bState)"
        ],
        "description": "Blockman.Instance().gameSettings:setMouseMoveState(bState)"
    },
    "Blockman.Instance().gameSettings:endMouseMove(x, y)": {
        "prefix": "Blockman.Instance().gameSettings:endMouseMove(x, y)",
        "body": [
            "Blockman.Instance().gameSettings:endMouseMove(x, y)"
        ],
        "description": "Blockman.Instance().gameSettings:endMouseMove(x, y)"
    },
    "Blockman.Instance().gameSettings:setMousePos(x, y, immd)": {
        "prefix": "Blockman.Instance().gameSettings:setMousePos(x, y, immd)",
        "body": [
            "Blockman.Instance().gameSettings:setMousePos(x, y, immd)"
        ],
        "description": "Blockman.Instance().gameSettings:setMousePos(x, y, immd)"
    },
    "Blockman.Instance().gameSettings:clearMousePos()": {
        "prefix": "Blockman.Instance().gameSettings:clearMousePos()",
        "body": [
            "Blockman.Instance().gameSettings:clearMousePos()"
        ],
        "description": "Blockman.Instance().gameSettings:clearMousePos()"
    },
    "Blockman.Instance().gameSettings:setLockViewPos(value)": {
        "prefix": "Blockman.Instance().gameSettings:setLockViewPos(value)",
        "body": [
            "Blockman.Instance().gameSettings:setLockViewPos(value)"
        ],
        "description": "Blockman.Instance().gameSettings:setLockViewPos(value)"
    },
    "Blockman.Instance().gameSettings:setExtraCameraDistance(distance)": {
        "prefix": "Blockman.Instance().gameSettings:setExtraCameraDistance(distance)",
        "body": [
            "Blockman.Instance().gameSettings:setExtraCameraDistance(distance)"
        ],
        "description": "Blockman.Instance().gameSettings:setExtraCameraDistance(distance)"
    },
    "Blockman.Instance().gameSettings:isLockBodyRotation()": {
        "prefix": "Blockman.Instance().gameSettings:isLockBodyRotation()",
        "body": [
            "Blockman.Instance().gameSettings:isLockBodyRotation()"
        ],
        "description": "Blockman.Instance().gameSettings:isLockBodyRotation()"
    },
    "Blockman.Instance().gameSettings:setLockBodyRotation(value)": {
        "prefix": "Blockman.Instance().gameSettings:setLockBodyRotation(value)",
        "body": [
            "Blockman.Instance().gameSettings:setLockBodyRotation(value)"
        ],
        "description": "Blockman.Instance().gameSettings:setLockBodyRotation(value)"
    },
    "Blockman.Instance().gameSettings:isLockSlideScreen()": {
        "prefix": "Blockman.Instance().gameSettings:isLockSlideScreen()",
        "body": [
            "Blockman.Instance().gameSettings:isLockSlideScreen()"
        ],
        "description": "Blockman.Instance().gameSettings:isLockSlideScreen()"
    },
    "Blockman.Instance().gameSettings:setLockSlideScreen(value)": {
        "prefix": "Blockman.Instance().gameSettings:setLockSlideScreen(value)",
        "body": [
            "Blockman.Instance().gameSettings:setLockSlideScreen(value)"
        ],
        "description": "Blockman.Instance().gameSettings:setLockSlideScreen(value)"
    },
    "Game.GetService(name)": {
        "prefix": "Game.GetService(name)",
        "body": [
            "Game.GetService(name)"
        ],
        "description": "Game.GetService(name)"
    },
    "Game.TriggersAll(name)": {
        "prefix": "Game.TriggersAll(name)",
        "body": [
            "Game.TriggersAll(name)"
        ],
        "description": "Game.TriggersAll(name)"
    },
    "Game.GetStartGamePlayerCount()": {
        "prefix": "Game.GetStartGamePlayerCount()",
        "body": [
            "Game.GetStartGamePlayerCount()"
        ],
        "description": "Game.GetStartGamePlayerCount()"
    },
    "Game.GetGameTime()": {
        "prefix": "Game.GetGameTime()",
        "body": [
            "Game.GetGameTime()"
        ],
        "description": "Game.GetGameTime()"
    },
    "Game.GetAllPlayers()": {
        "prefix": "Game.GetAllPlayers()",
        "body": [
            "Game.GetAllPlayers()"
        ],
        "description": "Game.GetAllPlayers()"
    },
    "Game.GetAllPlayersCount()": {
        "prefix": "Game.GetAllPlayersCount()",
        "body": [
            "Game.GetAllPlayersCount()"
        ],
        "description": "Game.GetAllPlayersCount()"
    },
    "Game.GetSurvivePlayers()": {
        "prefix": "Game.GetSurvivePlayers()",
        "body": [
            "Game.GetSurvivePlayers()"
        ],
        "description": "Game.GetSurvivePlayers()"
    },
    "Game.GetPlayerByUserId(userId)": {
        "prefix": "Game.GetPlayerByUserId(userId)",
        "body": [
            "Game.GetPlayerByUserId(userId)"
        ],
        "description": "Game.GetPlayerByUserId(userId)"
    },
    "Game.GetSurvivePlayersCount()": {
        "prefix": "Game.GetSurvivePlayersCount()",
        "body": [
            "Game.GetSurvivePlayersCount()"
        ],
        "description": "Game.GetSurvivePlayersCount()"
    },
    "GAME_INIT": {
        "prefix": "GAME_INIT",
        "body": [
            "GAME_INIT"
        ],
        "description": "GAME_INIT"
    },
    "Game.CreateTeam(id)": {
        "prefix": "Game.CreateTeam(id)",
        "body": [
            "Game.CreateTeam(id)"
        ],
        "description": "Game.CreateTeam(id)"
    },
    "Game.TryJoinTeamByPlayer(player, teamId)": {
        "prefix": "Game.TryJoinTeamByPlayer(player, teamId)",
        "body": [
            "Game.TryJoinTeamByPlayer(player, teamId)"
        ],
        "description": "Game.TryJoinTeamByPlayer(player, teamId)"
    },
    "Game.GetTeam(id, create)": {
        "prefix": "Game.GetTeam(id, create)",
        "body": [
            "Game.GetTeam(id, create)"
        ],
        "description": "Game.GetTeam(id, create)"
    },
    "Game.Exit(player)": {
        "prefix": "Game.Exit(player)",
        "body": [
            "Game.Exit(player)"
        ],
        "description": "Game.Exit(player)"
    },
    "GAME_START": {
        "prefix": "GAME_START",
        "body": [
            "GAME_START"
        ],
        "description": "GAME_START"
    },
    "GAME_OVER": {
        "prefix": "GAME_OVER",
        "body": [
            "GAME_OVER"
        ],
        "description": "GAME_OVER"
    },
    "GAME_EXIT": {
        "prefix": "GAME_EXIT",
        "body": [
            "GAME_EXIT"
        ],
        "description": "GAME_EXIT"
    },
    "Team:getFirstPlayer()": {
        "prefix": "Team:getFirstPlayer()",
        "body": [
            "Team:getFirstPlayer()"
        ],
        "description": "Team:getFirstPlayer()"
    },
    "Team:joinEntity(entity)": {
        "prefix": "Team:joinEntity(entity)",
        "body": [
            "Team:joinEntity(entity)"
        ],
        "description": "Team:joinEntity(entity)"
    },
    "Team:leaveEntity(entity)": {
        "prefix": "Team:leaveEntity(entity)",
        "body": [
            "Team:leaveEntity(entity)"
        ],
        "description": "Team:leaveEntity(entity)"
    },
    "Team:dismiss()": {
        "prefix": "Team:dismiss()",
        "body": [
            "Team:dismiss()"
        ],
        "description": "Team:dismiss()"
    },
    "Team:getEntityList()": {
        "prefix": "Team:getEntityList()",
        "body": [
            "Team:getEntityList()"
        ],
        "description": "Team:getEntityList()"
    },
    "UI:openWindow(\"dwInstance\")": {
        "prefix": "UI:openWindow(\"dwInstance\")",
        "body": [
            "UI:openWindow(\"dwInstance\")"
        ],
        "description": "UI:openWindow(\"dwInstance\")"
    },
    "UI:openSceneWindow": {
        "prefix": "UI:openSceneWindow",
        "body": [
            "UI:openSceneWindow"
        ],
        "description": "UI:openSceneWindow"
    },
    "UI:createWindow(name, type)": {
        "prefix": "UI:createWindow(name, type)",
        "body": [
            "UI:createWindow(name, type)"
        ],
        "description": "UI:createWindow(name, type)"
    },
    "UI:createStaticText(name)": {
        "prefix": "UI:createStaticText(name)",
        "body": [
            "UI:createStaticText(name)"
        ],
        "description": "UI:createStaticText(name)"
    },
    "UI:createStaticImage(name)": {
        "prefix": "UI:createStaticImage(name)",
        "body": [
            "UI:createStaticImage(name)"
        ],
        "description": "UI:createStaticImage(name)"
    },
    "UI:createButton(name)": {
        "prefix": "UI:createButton(name)",
        "body": [
            "UI:createButton(name)"
        ],
        "description": "UI:createButton(name)"
    },
    "UI:closeWindow(\"dwInstance\", ...)": {
        "prefix": "UI:closeWindow(\"dwInstance\", ...)",
        "body": [
            "UI:closeWindow(\"dwInstance\", ...)"
        ],
        "description": "UI:closeWindow(\"dwInstance\", ...)"
    },
    "UI:closeSceneWindow(\"dw1\")": {
        "prefix": "UI:closeSceneWindow(\"dw1\")",
        "body": [
            "UI:closeSceneWindow(\"dw1\")"
        ],
        "description": "UI:closeSceneWindow(\"dw1\")"
    },
    "UI:isOpenWindow(\"dwInstance\")": {
        "prefix": "UI:isOpenWindow(\"dwInstance\")",
        "body": [
            "UI:isOpenWindow(\"dwInstance\")"
        ],
        "description": "UI:isOpenWindow(\"dwInstance\")"
    },
    "Window:child(childName)": {
        "prefix": "Window:child(childName)",
        "body": [
            "Window:child(childName)"
        ],
        "description": "Window:child(childName)"
    },
    "Window:close(...)": {
        "prefix": "Window:close(...)",
        "body": [
            "Window:close(...)"
        ],
        "description": "Window:close(...)"
    },
    "Window:isAlive()": {
        "prefix": "Window:isAlive()",
        "body": [
            "Window:isAlive()"
        ],
        "description": "Window:isAlive()"
    },
    "Window:getWindow()": {
        "prefix": "Window:getWindow()",
        "body": [
            "Window:getWindow()"
        ],
        "description": "Window:getWindow()"
    },
    "Window:clone()": {
        "prefix": "Window:clone()",
        "body": [
            "Window:clone()"
        ],
        "description": "Window:clone()"
    },
    "window:setProperty(\"Alpha\", 0.5)": {
        "prefix": "window:setProperty(\"Alpha\", 0.5)",
        "body": [
            "window:setProperty(\"Alpha\", 0.5)"
        ],
        "description": "window:setProperty(\"Alpha\", 0.5)"
    },
    "window:setAlpha(1.0)": {
        "prefix": "window:setAlpha(1.0)",
        "body": [
            "window:setAlpha(1.0)"
        ],
        "description": "window:setAlpha(1.0)"
    },
    "window:setDestroyedByParent(true)": {
        "prefix": "window:setDestroyedByParent(true)",
        "body": [
            "window:setDestroyedByParent(true)"
        ],
        "description": "window:setDestroyedByParent(true)"
    },
    "window:setAlwaysOnTop(true)": {
        "prefix": "window:setAlwaysOnTop(true)",
        "body": [
            "window:setAlwaysOnTop(true)"
        ],
        "description": "window:setAlwaysOnTop(true)"
    },
    "window:setLevel(1)": {
        "prefix": "window:setLevel(1)",
        "body": [
            "window:setLevel(1)"
        ],
        "description": "window:setLevel(1)"
    },
    "window:setEnabled(true)": {
        "prefix": "window:setEnabled(true)",
        "body": [
            "window:setEnabled(true)"
        ],
        "description": "window:setEnabled(true)"
    },
    "window:setVisible(true)": {
        "prefix": "window:setVisible(true)",
        "body": [
            "window:setVisible(true)"
        ],
        "description": "window:setVisible(true)"
    },
    "window:setClippedByParent(true)": {
        "prefix": "window:setClippedByParent(true)",
        "body": [
            "window:setClippedByParent(true)"
        ],
        "description": "window:setClippedByParent(true)"
    },
    "window:setWantsMultiClickEvents(true)": {
        "prefix": "window:setWantsMultiClickEvents(true)",
        "body": [
            "window:setWantsMultiClickEvents(true)"
        ],
        "description": "window:setWantsMultiClickEvents(true)"
    },
    "window:setMousePassThroughEnabled(true)": {
        "prefix": "window:setMousePassThroughEnabled(true)",
        "body": [
            "window:setMousePassThroughEnabled(true)"
        ],
        "description": "window:setMousePassThroughEnabled(true)"
    },
    "window:setText(\"aa\")": {
        "prefix": "window:setText(\"aa\")",
        "body": [
            "window:setText(\"aa\")"
        ],
        "description": "window:setText(\"aa\")"
    },
    "window:setHorizontalAlignment(1)": {
        "prefix": "window:setHorizontalAlignment(1)",
        "body": [
            "window:setHorizontalAlignment(1)"
        ],
        "description": "window:setHorizontalAlignment(1)"
    },
    "window:setArea2({0,0},{0,0},{0,100},{0,100})": {
        "prefix": "window:setArea2({0,0},{0,0},{0,100},{0,100})",
        "body": [
            "window:setArea2({0,0},{0,0},{0,100},{0,100})"
        ],
        "description": "window:setArea2({0,0},{0,0},{0,100},{0,100})"
    },
    "window:setVerticalAlignment(1)": {
        "prefix": "window:setVerticalAlignment(1)",
        "body": [
            "window:setVerticalAlignment(1)"
        ],
        "description": "window:setVerticalAlignment(1)"
    },
    "window:setPosition(UDim2.new(0, 100, 0, 100))": {
        "prefix": "window:setPosition(UDim2.new(0, 100, 0, 100))",
        "body": [
            "window:setPosition(UDim2.new(0, 100, 0, 100))"
        ],
        "description": "window:setPosition(UDim2.new(0, 100, 0, 100))"
    },
    "window:setSize(UDim2.new(1, 0, 1, 0))": {
        "prefix": "window:setSize(UDim2.new(1, 0, 1, 0))",
        "body": [
            "window:setSize(UDim2.new(1, 0, 1, 0))"
        ],
        "description": "window:setSize(UDim2.new(1, 0, 1, 0))"
    },
    "window:setXPosition(UDim.new(0,100))": {
        "prefix": "window:setXPosition(UDim.new(0,100))",
        "body": [
            "window:setXPosition(UDim.new(0,100))"
        ],
        "description": "window:setXPosition(UDim.new(0,100))"
    },
    "window:setYPosition(UDim.new(0.5,0))": {
        "prefix": "window:setYPosition(UDim.new(0.5,0))",
        "body": [
            "window:setYPosition(UDim.new(0.5,0))"
        ],
        "description": "window:setYPosition(UDim.new(0.5,0))"
    },
    "window:setWidth(UDim.new(0.5,0))": {
        "prefix": "window:setWidth(UDim.new(0.5,0))",
        "body": [
            "window:setWidth(UDim.new(0.5,0))"
        ],
        "description": "window:setWidth(UDim.new(0.5,0))"
    },
    "window:setHeight(UDim.new(0.1,100))": {
        "prefix": "window:setHeight(UDim.new(0.1,100))",
        "body": [
            "window:setHeight(UDim.new(0.1,100))"
        ],
        "description": "window:setHeight(UDim.new(0.1,100))"
    },
    "window:setFontStyle(\"BungeeRegular\")": {
        "prefix": "window:setFontStyle(\"BungeeRegular\")",
        "body": [
            "window:setFontStyle(\"BungeeRegular\")"
        ],
        "description": "window:setFontStyle(\"BungeeRegular\")"
    },
    "window:setFontSize(40)": {
        "prefix": "window:setFontSize(40)",
        "body": [
            "window:setFontSize(40)"
        ],
        "description": "window:setFontSize(40)"
    },
    "window:getProperty(\"Alpha\")": {
        "prefix": "window:getProperty(\"Alpha\")",
        "body": [
            "window:getProperty(\"Alpha\")"
        ],
        "description": "window:getProperty(\"Alpha\")"
    },
    "window:getType()": {
        "prefix": "window:getType()",
        "body": [
            "window:getType()"
        ],
        "description": "window:getType()"
    },
    "window:getAlpha()": {
        "prefix": "window:getAlpha()",
        "body": [
            "window:getAlpha()"
        ],
        "description": "window:getAlpha()"
    },
    "window:isDestroyedByParent()": {
        "prefix": "window:isDestroyedByParent()",
        "body": [
            "window:isDestroyedByParent()"
        ],
        "description": "window:isDestroyedByParent()"
    },
    "window:isAlwaysOnTop()": {
        "prefix": "window:isAlwaysOnTop()",
        "body": [
            "window:isAlwaysOnTop()"
        ],
        "description": "window:isAlwaysOnTop()"
    },
    "window:getLevel()": {
        "prefix": "window:getLevel()",
        "body": [
            "window:getLevel()"
        ],
        "description": "window:getLevel()"
    },
    "window:isDisabled()": {
        "prefix": "window:isDisabled()",
        "body": [
            "window:isDisabled()"
        ],
        "description": "window:isDisabled()"
    },
    "window:isVisible()": {
        "prefix": "window:isVisible()",
        "body": [
            "window:isVisible()"
        ],
        "description": "window:isVisible()"
    },
    "window:isClippedByParent()": {
        "prefix": "window:isClippedByParent()",
        "body": [
            "window:isClippedByParent()"
        ],
        "description": "window:isClippedByParent()"
    },
    "window:wantsMultiClickEvents()": {
        "prefix": "window:wantsMultiClickEvents()",
        "body": [
            "window:wantsMultiClickEvents()"
        ],
        "description": "window:wantsMultiClickEvents()"
    },
    "window:isMousePassThroughEnabled()": {
        "prefix": "window:isMousePassThroughEnabled()",
        "body": [
            "window:isMousePassThroughEnabled()"
        ],
        "description": "window:isMousePassThroughEnabled()"
    },
    "window:getText()": {
        "prefix": "window:getText()",
        "body": [
            "window:getText()"
        ],
        "description": "window:getText()"
    },
    "window:getHorizontalAlignment()": {
        "prefix": "window:getHorizontalAlignment()",
        "body": [
            "window:getHorizontalAlignment()"
        ],
        "description": "window:getHorizontalAlignment()"
    },
    "window:getVerticalAlignment()": {
        "prefix": "window:getVerticalAlignment()",
        "body": [
            "window:getVerticalAlignment()"
        ],
        "description": "window:getVerticalAlignment()"
    },
    "window:getPosition()": {
        "prefix": "window:getPosition()",
        "body": [
            "window:getPosition()"
        ],
        "description": "window:getPosition()"
    },
    "window:getSize()": {
        "prefix": "window:getSize()",
        "body": [
            "window:getSize()"
        ],
        "description": "window:getSize()"
    },
    "window:getPixelPosition()": {
        "prefix": "window:getPixelPosition()",
        "body": [
            "window:getPixelPosition()"
        ],
        "description": "window:getPixelPosition()"
    },
    "window:getXPosition()": {
        "prefix": "window:getXPosition()",
        "body": [
            "window:getXPosition()"
        ],
        "description": "window:getXPosition()"
    },
    "window:getPixelSize()": {
        "prefix": "window:getPixelSize()",
        "body": [
            "window:getPixelSize()"
        ],
        "description": "window:getPixelSize()"
    },
    "window:getYPosition()": {
        "prefix": "window:getYPosition()",
        "body": [
            "window:getYPosition()"
        ],
        "description": "window:getYPosition()"
    },
    "window:getWidth()": {
        "prefix": "window:getWidth()",
        "body": [
            "window:getWidth()"
        ],
        "description": "window:getWidth()"
    },
    "window:getHeight()": {
        "prefix": "window:getHeight()",
        "body": [
            "window:getHeight()"
        ],
        "description": "window:getHeight()"
    },
    "window:getID()": {
        "prefix": "window:getID()",
        "body": [
            "window:getID()"
        ],
        "description": "window:getID()"
    },
    "window:isChildID(Id)": {
        "prefix": "window:isChildID(Id)",
        "body": [
            "window:isChildID(Id)"
        ],
        "description": "window:isChildID(Id)"
    },
    "window:isChildIDRecursive(Id)": {
        "prefix": "window:isChildIDRecursive(Id)",
        "body": [
            "window:isChildIDRecursive(Id)"
        ],
        "description": "window:isChildIDRecursive(Id)"
    },
    "window:getChildById(id)": {
        "prefix": "window:getChildById(id)",
        "body": [
            "window:getChildById(id)"
        ],
        "description": "window:getChildById(id)"
    },
    "window:getChildRecursiveById(id)": {
        "prefix": "window:getChildRecursiveById(id)",
        "body": [
            "window:getChildRecursiveById(id)"
        ],
        "description": "window:getChildRecursiveById(id)"
    },
    "window:getChildAtIdx(0)": {
        "prefix": "window:getChildAtIdx(0)",
        "body": [
            "window:getChildAtIdx(0)"
        ],
        "description": "window:getChildAtIdx(0)"
    },
    "window:getParent()": {
        "prefix": "window:getParent()",
        "body": [
            "window:getParent()"
        ],
        "description": "window:getParent()"
    },
    "window:getRootWindow()": {
        "prefix": "window:getRootWindow()",
        "body": [
            "window:getRootWindow()"
        ],
        "description": "window:getRootWindow()"
    },
    "window:destroy()": {
        "prefix": "window:destroy()",
        "body": [
            "window:destroy()"
        ],
        "description": "window:destroy()"
    },
    "window:removeChildByID(id)": {
        "prefix": "window:removeChildByID(id)",
        "body": [
            "window:removeChildByID(id)"
        ],
        "description": "window:removeChildByID(id)"
    },
    "window:cleanupChildren()": {
        "prefix": "window:cleanupChildren()",
        "body": [
            "window:cleanupChildren()"
        ],
        "description": "window:cleanupChildren()"
    },
    "window:addChild(child)": {
        "prefix": "window:addChild(child)",
        "body": [
            "window:addChild(child)"
        ],
        "description": "window:addChild(child)"
    },
    "window:removeChild(child)": {
        "prefix": "window:removeChild(child)",
        "body": [
            "window:removeChild(child)"
        ],
        "description": "window:removeChild(child)"
    },
    "window:getChildCount()": {
        "prefix": "window:getChildCount()",
        "body": [
            "window:getChildCount()"
        ],
        "description": "window:getChildCount()"
    },
    "window:isChild(child)": {
        "prefix": "window:isChild(child)",
        "body": [
            "window:isChild(child)"
        ],
        "description": "window:isChild(child)"
    },
    "LayoutContainer:markNeedsLayouting()": {
        "prefix": "LayoutContainer:markNeedsLayouting()",
        "body": [
            "LayoutContainer:markNeedsLayouting()"
        ],
        "description": "LayoutContainer:markNeedsLayouting()"
    },
    "LayoutContainer:needsLayouting()": {
        "prefix": "LayoutContainer:needsLayouting()",
        "body": [
            "LayoutContainer:needsLayouting()"
        ],
        "description": "LayoutContainer:needsLayouting()"
    },
    "LayoutContainer:layout()": {
        "prefix": "LayoutContainer:layout()",
        "body": [
            "LayoutContainer:layout()"
        ],
        "description": "LayoutContainer:layout()"
    },
    "HorizontalLayoutContainer:setProperty(\"space\", 5)": {
        "prefix": "HorizontalLayoutContainer:setProperty(\"space\", 5)",
        "body": [
            "HorizontalLayoutContainer:setProperty(\"space\", 5)"
        ],
        "description": "HorizontalLayoutContainer:setProperty(\"space\", 5)"
    },
    "HorizontalLayoutContainer:getProperty(\"space\")": {
        "prefix": "HorizontalLayoutContainer:getProperty(\"space\")",
        "body": [
            "HorizontalLayoutContainer:getProperty(\"space\")"
        ],
        "description": "HorizontalLayoutContainer:getProperty(\"space\")"
    },
    "VerticalLayoutContainer:setProperty(\"space\", 5)": {
        "prefix": "VerticalLayoutContainer:setProperty(\"space\", 5)",
        "body": [
            "VerticalLayoutContainer:setProperty(\"space\", 5)"
        ],
        "description": "VerticalLayoutContainer:setProperty(\"space\", 5)"
    },
    "VerticalLayoutContainer:getProperty(\"space\")": {
        "prefix": "VerticalLayoutContainer:getProperty(\"space\")",
        "body": [
            "VerticalLayoutContainer:getProperty(\"space\")"
        ],
        "description": "VerticalLayoutContainer:getProperty(\"space\")"
    },
    "GridView:setProperty(\"hInterval\", 20)": {
        "prefix": "GridView:setProperty(\"hInterval\", 20)",
        "body": [
            "GridView:setProperty(\"hInterval\", 20)"
        ],
        "description": "GridView:setProperty(\"hInterval\", 20)"
    },
    "GridView:getProperty(\"rowSize\")": {
        "prefix": "GridView:getProperty(\"rowSize\")",
        "body": [
            "GridView:getProperty(\"rowSize\")"
        ],
        "description": "GridView:getProperty(\"rowSize\")"
    },
    "Image:setProperty(\"Image\", \"icon_7.png\")": {
        "prefix": "Image:setProperty(\"Image\", \"icon_7.png\")",
        "body": [
            "Image:setProperty(\"Image\", \"icon_7.png\")"
        ],
        "description": "Image:setProperty(\"Image\", \"icon_7.png\")"
    },
    "Image:getProperty(\"Image\")": {
        "prefix": "Image:getProperty(\"Image\")",
        "body": [
            "Image:getProperty(\"Image\")"
        ],
        "description": "Image:getProperty(\"Image\")"
    },
    "Image:setImage(\"gameres|asset/Texture/Gui/def_image.png\")": {
        "prefix": "Image:setImage(\"gameres|asset/Texture/Gui/def_image.png\")",
        "body": [
            "Image:setImage(\"gameres|asset/Texture/Gui/def_image.png\")"
        ],
        "description": "Image:setImage(\"gameres|asset/Texture/Gui/def_image.png\")"
    },
    "Image:isFrameEnabled()": {
        "prefix": "Image:isFrameEnabled()",
        "body": [
            "Image:isFrameEnabled()"
        ],
        "description": "Image:isFrameEnabled()"
    },
    "Image:setFrameEnabled(true)": {
        "prefix": "Image:setFrameEnabled(true)",
        "body": [
            "Image:setFrameEnabled(true)"
        ],
        "description": "Image:setFrameEnabled(true)"
    },
    "Image:isBackgroundEnabled()": {
        "prefix": "Image:isBackgroundEnabled()",
        "body": [
            "Image:isBackgroundEnabled()"
        ],
        "description": "Image:isBackgroundEnabled()"
    },
    "Image:setBackgroundEnabled(true)": {
        "prefix": "Image:setBackgroundEnabled(true)",
        "body": [
            "Image:setBackgroundEnabled(true)"
        ],
        "description": "Image:setBackgroundEnabled(true)"
    },
    "Text:setProperty(\"FrameEnabled\", false)": {
        "prefix": "Text:setProperty(\"FrameEnabled\", false)",
        "body": [
            "Text:setProperty(\"FrameEnabled\", false)"
        ],
        "description": "Text:setProperty(\"FrameEnabled\", false)"
    },
    "Text:getProperty(\"FrameEnabled\")": {
        "prefix": "Text:getProperty(\"FrameEnabled\")",
        "body": [
            "Text:getProperty(\"FrameEnabled\")"
        ],
        "description": "Text:getProperty(\"FrameEnabled\")"
    },
    "Text:setTextColours(Color3.new(1,1,1))": {
        "prefix": "Text:setTextColours(Color3.new(1,1,1))",
        "body": [
            "Text:setTextColours(Color3.new(1,1,1))"
        ],
        "description": "Text:setTextColours(Color3.new(1,1,1))"
    },
    "Text:getTextColours()": {
        "prefix": "Text:getTextColours()",
        "body": [
            "Text:getTextColours()"
        ],
        "description": "Text:getTextColours()"
    },
    "Text:setHorizontalFormatting(0)": {
        "prefix": "Text:setHorizontalFormatting(0)",
        "body": [
            "Text:setHorizontalFormatting(0)"
        ],
        "description": "Text:setHorizontalFormatting(0)"
    },
    "Text:getHorizontalFormatting()": {
        "prefix": "Text:getHorizontalFormatting()",
        "body": [
            "Text:getHorizontalFormatting()"
        ],
        "description": "Text:getHorizontalFormatting()"
    },
    "Text:setVerticalFormatting(0)": {
        "prefix": "Text:setVerticalFormatting(0)",
        "body": [
            "Text:setVerticalFormatting(0)"
        ],
        "description": "Text:setVerticalFormatting(0)"
    },
    "Text:getVerticalFormatting()": {
        "prefix": "Text:getVerticalFormatting()",
        "body": [
            "Text:getVerticalFormatting()"
        ],
        "description": "Text:getVerticalFormatting()"
    },
    "Text:isFrameEnabled()": {
        "prefix": "Text:isFrameEnabled()",
        "body": [
            "Text:isFrameEnabled()"
        ],
        "description": "Text:isFrameEnabled()"
    },
    "Text:setFrameEnabled(true)": {
        "prefix": "Text:setFrameEnabled(true)",
        "body": [
            "Text:setFrameEnabled(true)"
        ],
        "description": "Text:setFrameEnabled(true)"
    },
    "Text:isBackgroundEnabled()": {
        "prefix": "Text:isBackgroundEnabled()",
        "body": [
            "Text:isBackgroundEnabled()"
        ],
        "description": "Text:isBackgroundEnabled()"
    },
    "Text:setBackgroundEnabled(true)": {
        "prefix": "Text:setBackgroundEnabled(true)",
        "body": [
            "Text:setBackgroundEnabled(true)"
        ],
        "description": "Text:setBackgroundEnabled(true)"
    },
    "Text:setVerticalScrollbarEnabled(true)": {
        "prefix": "Text:setVerticalScrollbarEnabled(true)",
        "body": [
            "Text:setVerticalScrollbarEnabled(true)"
        ],
        "description": "Text:setVerticalScrollbarEnabled(true)"
    },
    "Text:isVerticalScrollbarEnabled()": {
        "prefix": "Text:isVerticalScrollbarEnabled()",
        "body": [
            "Text:isVerticalScrollbarEnabled()"
        ],
        "description": "Text:isVerticalScrollbarEnabled()"
    },
    "Text:setHorizontalScrollbarEnabled(true)": {
        "prefix": "Text:setHorizontalScrollbarEnabled(true)",
        "body": [
            "Text:setHorizontalScrollbarEnabled(true)"
        ],
        "description": "Text:setHorizontalScrollbarEnabled(true)"
    },
    "Text:isHorizontalScrollbarEnabled()": {
        "prefix": "Text:isHorizontalScrollbarEnabled()",
        "body": [
            "Text:isHorizontalScrollbarEnabled()"
        ],
        "description": "Text:isHorizontalScrollbarEnabled()"
    },
    "Button:setProperty(\"NormalImage\", \"icon_7.png\")": {
        "prefix": "Button:setProperty(\"NormalImage\", \"icon_7.png\")",
        "body": [
            "Button:setProperty(\"NormalImage\", \"icon_7.png\")"
        ],
        "description": "Button:setProperty(\"NormalImage\", \"icon_7.png\")"
    },
    "Button:getProperty(\"NormalImage\")": {
        "prefix": "Button:getProperty(\"NormalImage\")",
        "body": [
            "Button:getProperty(\"NormalImage\")"
        ],
        "description": "Button:getProperty(\"NormalImage\")"
    },
    "Button:isPushed()": {
        "prefix": "Button:isPushed()",
        "body": [
            "Button:isPushed()"
        ],
        "description": "Button:isPushed()"
    },
    "Button:setPushedState(true)": {
        "prefix": "Button:setPushedState(true)",
        "body": [
            "Button:setPushedState(true)"
        ],
        "description": "Button:setPushedState(true)"
    },
    "Button:setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")": {
        "prefix": "Button:setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")",
        "body": [
            "Button:setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")"
        ],
        "description": "Button:setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")"
    },
    "Button:setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")": {
        "prefix": "Button:setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")",
        "body": [
            "Button:setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")"
        ],
        "description": "Button:setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")"
    },
    "ProgressBar:setProperty(\"CurrentProgress\", 0.5)": {
        "prefix": "ProgressBar:setProperty(\"CurrentProgress\", 0.5)",
        "body": [
            "ProgressBar:setProperty(\"CurrentProgress\", 0.5)"
        ],
        "description": "ProgressBar:setProperty(\"CurrentProgress\", 0.5)"
    },
    "ProgressBar:getProperty(\"CurrentProgress\")": {
        "prefix": "ProgressBar:getProperty(\"CurrentProgress\")",
        "body": [
            "ProgressBar:getProperty(\"CurrentProgress\")"
        ],
        "description": "ProgressBar:getProperty(\"CurrentProgress\")"
    },
    "ProgressBar:getProgress()": {
        "prefix": "ProgressBar:getProgress()",
        "body": [
            "ProgressBar:getProgress()"
        ],
        "description": "ProgressBar:getProgress()"
    },
    "ProgressBar:setProgress(0.5)": {
        "prefix": "ProgressBar:setProgress(0.5)",
        "body": [
            "ProgressBar:setProgress(0.5)"
        ],
        "description": "ProgressBar:setProgress(0.5)"
    },
    "ProgressBar:getStepSize()": {
        "prefix": "ProgressBar:getStepSize()",
        "body": [
            "ProgressBar:getStepSize()"
        ],
        "description": "ProgressBar:getStepSize()"
    },
    "ProgressBar:setStepSize(0.01)": {
        "prefix": "ProgressBar:setStepSize(0.01)",
        "body": [
            "ProgressBar:setStepSize(0.01)"
        ],
        "description": "ProgressBar:setStepSize(0.01)"
    },
    "ProgressBar:step()": {
        "prefix": "ProgressBar:step()",
        "body": [
            "ProgressBar:step()"
        ],
        "description": "ProgressBar:step()"
    },
    "ProgressBar:adjustProgress(delta)": {
        "prefix": "ProgressBar:adjustProgress(delta)",
        "body": [
            "ProgressBar:adjustProgress(delta)"
        ],
        "description": "ProgressBar:adjustProgress(delta)"
    },
    "ProgressBar:setVertical(true)": {
        "prefix": "ProgressBar:setVertical(true)",
        "body": [
            "ProgressBar:setVertical(true)"
        ],
        "description": "ProgressBar:setVertical(true)"
    },
    "ProgressBar:isVertical()": {
        "prefix": "ProgressBar:isVertical()",
        "body": [
            "ProgressBar:isVertical()"
        ],
        "description": "ProgressBar:isVertical()"
    },
    "ProgressBar:setReversed(true)": {
        "prefix": "ProgressBar:setReversed(true)",
        "body": [
            "ProgressBar:setReversed(true)"
        ],
        "description": "ProgressBar:setReversed(true)"
    },
    "ProgressBar:isReversed()": {
        "prefix": "ProgressBar:isReversed()",
        "body": [
            "ProgressBar:isReversed()"
        ],
        "description": "ProgressBar:isReversed()"
    },
    "Slider:getCurrentValue()": {
        "prefix": "Slider:getCurrentValue()",
        "body": [
            "Slider:getCurrentValue()"
        ],
        "description": "Slider:getCurrentValue()"
    },
    "Slider:getMaxValue()": {
        "prefix": "Slider:getMaxValue()",
        "body": [
            "Slider:getMaxValue()"
        ],
        "description": "Slider:getMaxValue()"
    },
    "Slider:getClickStep()": {
        "prefix": "Slider:getClickStep()",
        "body": [
            "Slider:getClickStep()"
        ],
        "description": "Slider:getClickStep()"
    },
    "Slider:setMaxValue(maxVal)": {
        "prefix": "Slider:setMaxValue(maxVal)",
        "body": [
            "Slider:setMaxValue(maxVal)"
        ],
        "description": "Slider:setMaxValue(maxVal)"
    },
    "Slider:setCurrentValue(value)": {
        "prefix": "Slider:setCurrentValue(value)",
        "body": [
            "Slider:setCurrentValue(value)"
        ],
        "description": "Slider:setCurrentValue(value)"
    },
    "Slider:setClickStep(step)": {
        "prefix": "Slider:setClickStep(step)",
        "body": [
            "Slider:setClickStep(step)"
        ],
        "description": "Slider:setClickStep(step)"
    },
    "Slider.onSliderValueChanged = function() end": {
        "prefix": "Slider.onSliderValueChanged = function() end",
        "body": [
            "Slider.onSliderValueChanged = function() end"
        ],
        "description": "Slider.onSliderValueChanged = function() end"
    },
    "Editbox:setSelection(start_pos,end_pos)": {
        "prefix": "Editbox:setSelection(start_pos,end_pos)",
        "body": [
            "Editbox:setSelection(start_pos,end_pos)"
        ],
        "description": "Editbox:setSelection(start_pos,end_pos)"
    },
    "Editbox:setMaskCodePoint(code_point)": {
        "prefix": "Editbox:setMaskCodePoint(code_point)",
        "body": [
            "Editbox:setMaskCodePoint(code_point)"
        ],
        "description": "Editbox:setMaskCodePoint(code_point)"
    },
    "Editbox:isReadOnly()": {
        "prefix": "Editbox:isReadOnly()",
        "body": [
            "Editbox:isReadOnly()"
        ],
        "description": "Editbox:isReadOnly()"
    },
    "Editbox:isTextMasked()": {
        "prefix": "Editbox:isTextMasked()",
        "body": [
            "Editbox:isTextMasked()"
        ],
        "description": "Editbox:isTextMasked()"
    },
    "Editbox:getSelectionStartIndex()": {
        "prefix": "Editbox:getSelectionStartIndex()",
        "body": [
            "Editbox:getSelectionStartIndex()"
        ],
        "description": "Editbox:getSelectionStartIndex()"
    },
    "Editbox:getSelectionEndIndex()": {
        "prefix": "Editbox:getSelectionEndIndex()",
        "body": [
            "Editbox:getSelectionEndIndex()"
        ],
        "description": "Editbox:getSelectionEndIndex()"
    },
    "Editbox:getSelectionLength()": {
        "prefix": "Editbox:getSelectionLength()",
        "body": [
            "Editbox:getSelectionLength()"
        ],
        "description": "Editbox:getSelectionLength()"
    },
    "Editbox:getMaskCodePoint()": {
        "prefix": "Editbox:getMaskCodePoint()",
        "body": [
            "Editbox:getMaskCodePoint()"
        ],
        "description": "Editbox:getMaskCodePoint()"
    },
    "Editbox:getMaxTextLength()": {
        "prefix": "Editbox:getMaxTextLength()",
        "body": [
            "Editbox:getMaxTextLength()"
        ],
        "description": "Editbox:getMaxTextLength()"
    },
    "Editbox:setReadOnly(setting)": {
        "prefix": "Editbox:setReadOnly(setting)",
        "body": [
            "Editbox:setReadOnly(setting)"
        ],
        "description": "Editbox:setReadOnly(setting)"
    },
    "Editbox:setTextMasked(setting)": {
        "prefix": "Editbox:setTextMasked(setting)",
        "body": [
            "Editbox:setTextMasked(setting)"
        ],
        "description": "Editbox:setTextMasked(setting)"
    },
    "Editbox:setSelectionStart(start_pos)": {
        "prefix": "Editbox:setSelectionStart(start_pos)",
        "body": [
            "Editbox:setSelectionStart(start_pos)"
        ],
        "description": "Editbox:setSelectionStart(start_pos)"
    },
    "Editbox:setSelectionLength(length)": {
        "prefix": "Editbox:setSelectionLength(length)",
        "body": [
            "Editbox:setSelectionLength(length)"
        ],
        "description": "Editbox:setSelectionLength(length)"
    },
    "Editbox:setMaxTextLength(max_len)": {
        "prefix": "Editbox:setMaxTextLength(max_len)",
        "body": [
            "Editbox:setMaxTextLength(max_len)"
        ],
        "description": "Editbox:setMaxTextLength(max_len)"
    },
    "Editbox.onReadOnlyModeChanged = function() end": {
        "prefix": "Editbox.onReadOnlyModeChanged = function() end",
        "body": [
            "Editbox.onReadOnlyModeChanged = function() end"
        ],
        "description": "Editbox.onReadOnlyModeChanged = function() end"
    },
    "Editbox.onMaskedRenderingModeChanged = function() end": {
        "prefix": "Editbox.onMaskedRenderingModeChanged = function() end",
        "body": [
            "Editbox.onMaskedRenderingModeChanged = function() end"
        ],
        "description": "Editbox.onMaskedRenderingModeChanged = function() end"
    },
    "Editbox.onMaximumTextLengthChanged = function() end": {
        "prefix": "Editbox.onMaximumTextLengthChanged = function() end",
        "body": [
            "Editbox.onMaximumTextLengthChanged = function() end"
        ],
        "description": "Editbox.onMaximumTextLengthChanged = function() end"
    },
    "Editbox.onTextSelectionChanged = function() end": {
        "prefix": "Editbox.onTextSelectionChanged = function() end",
        "body": [
            "Editbox.onTextSelectionChanged = function() end"
        ],
        "description": "Editbox.onTextSelectionChanged = function() end"
    },
    "Editbox.onEditboxFull = function() end": {
        "prefix": "Editbox.onEditboxFull = function() end",
        "body": [
            "Editbox.onEditboxFull = function() end"
        ],
        "description": "Editbox.onEditboxFull = function() end"
    },
    "Editbox.onTextAccepted = function() end": {
        "prefix": "Editbox.onTextAccepted = function() end",
        "body": [
            "Editbox.onTextAccepted = function() end"
        ],
        "description": "Editbox.onTextAccepted = function() end"
    },
    "ScrollableView:setContentPaneArea(area)": {
        "prefix": "ScrollableView:setContentPaneArea(area)",
        "body": [
            "ScrollableView:setContentPaneArea(area)"
        ],
        "description": "ScrollableView:setContentPaneArea(area)"
    },
    "ScrollableView:setVerticalOverlapSize(overlap)": {
        "prefix": "ScrollableView:setVerticalOverlapSize(overlap)",
        "body": [
            "ScrollableView:setVerticalOverlapSize(overlap)"
        ],
        "description": "ScrollableView:setVerticalOverlapSize(overlap)"
    },
    "ScrollableView:getVerticalOverlapSize()": {
        "prefix": "ScrollableView:getVerticalOverlapSize()",
        "body": [
            "ScrollableView:getVerticalOverlapSize()"
        ],
        "description": "ScrollableView:getVerticalOverlapSize()"
    },
    "ScrollableView:getVerticalScrollPosition()": {
        "prefix": "ScrollableView:getVerticalScrollPosition()",
        "body": [
            "ScrollableView:getVerticalScrollPosition()"
        ],
        "description": "ScrollableView:getVerticalScrollPosition()"
    },
    "ScrollableView:setVerticalScrollPosition(position)": {
        "prefix": "ScrollableView:setVerticalScrollPosition(position)",
        "body": [
            "ScrollableView:setVerticalScrollPosition(position)"
        ],
        "description": "ScrollableView:setVerticalScrollPosition(position)"
    },
    "ScrollableView:isVertScrollbarAlwaysShown()": {
        "prefix": "ScrollableView:isVertScrollbarAlwaysShown()",
        "body": [
            "ScrollableView:isVertScrollbarAlwaysShown()"
        ],
        "description": "ScrollableView:isVertScrollbarAlwaysShown()"
    },
    "ScrollableView:setShowVertScrollbar(setting)": {
        "prefix": "ScrollableView:setShowVertScrollbar(setting)",
        "body": [
            "ScrollableView:setShowVertScrollbar(setting)"
        ],
        "description": "ScrollableView:setShowVertScrollbar(setting)"
    },
    "ScrollableView:isHorzScrollbarAlwaysShown()": {
        "prefix": "ScrollableView:isHorzScrollbarAlwaysShown()",
        "body": [
            "ScrollableView:isHorzScrollbarAlwaysShown()"
        ],
        "description": "ScrollableView:isHorzScrollbarAlwaysShown()"
    },
    "ScrollableView:setShowHorzScrollbar(setting)": {
        "prefix": "ScrollableView:setShowHorzScrollbar(setting)",
        "body": [
            "ScrollableView:setShowHorzScrollbar(setting)"
        ],
        "description": "ScrollableView:setShowHorzScrollbar(setting)"
    },
    "ScrollableView:isContentPaneAutoSized()": {
        "prefix": "ScrollableView:isContentPaneAutoSized()",
        "body": [
            "ScrollableView:isContentPaneAutoSized()"
        ],
        "description": "ScrollableView:isContentPaneAutoSized()"
    },
    "ScrollableView:setContentPaneAutoSized(setting)": {
        "prefix": "ScrollableView:setContentPaneAutoSized(setting)",
        "body": [
            "ScrollableView:setContentPaneAutoSized(setting)"
        ],
        "description": "ScrollableView:setContentPaneAutoSized(setting)"
    },
    "ScrollableView:getContentPaneArea()": {
        "prefix": "ScrollableView:getContentPaneArea()",
        "body": [
            "ScrollableView:getContentPaneArea()"
        ],
        "description": "ScrollableView:getContentPaneArea()"
    },
    "ScrollableView:getHorizontalStepSize()": {
        "prefix": "ScrollableView:getHorizontalStepSize()",
        "body": [
            "ScrollableView:getHorizontalStepSize()"
        ],
        "description": "ScrollableView:getHorizontalStepSize()"
    },
    "ScrollableView:setHorizontalStepSize(step)": {
        "prefix": "ScrollableView:setHorizontalStepSize(step)",
        "body": [
            "ScrollableView:setHorizontalStepSize(step)"
        ],
        "description": "ScrollableView:setHorizontalStepSize(step)"
    },
    "ScrollableView:getHorizontalOverlapSize()": {
        "prefix": "ScrollableView:getHorizontalOverlapSize()",
        "body": [
            "ScrollableView:getHorizontalOverlapSize()"
        ],
        "description": "ScrollableView:getHorizontalOverlapSize()"
    },
    "ScrollableView:setHorizontalOverlapSize(overlap)": {
        "prefix": "ScrollableView:setHorizontalOverlapSize(overlap)",
        "body": [
            "ScrollableView:setHorizontalOverlapSize(overlap)"
        ],
        "description": "ScrollableView:setHorizontalOverlapSize(overlap)"
    },
    "ScrollableView:getHorizontalScrollPosition()": {
        "prefix": "ScrollableView:getHorizontalScrollPosition()",
        "body": [
            "ScrollableView:getHorizontalScrollPosition()"
        ],
        "description": "ScrollableView:getHorizontalScrollPosition()"
    },
    "ScrollableView:setHorizontalScrollPosition(position)": {
        "prefix": "ScrollableView:setHorizontalScrollPosition(position)",
        "body": [
            "ScrollableView:setHorizontalScrollPosition(position)"
        ],
        "description": "ScrollableView:setHorizontalScrollPosition(position)"
    },
    "ScrollableView:getViewableArea()": {
        "prefix": "ScrollableView:getViewableArea()",
        "body": [
            "ScrollableView:getViewableArea()"
        ],
        "description": "ScrollableView:getViewableArea()"
    },
    "ScrollableView.onContentPaneChanged = function() end": {
        "prefix": "ScrollableView.onContentPaneChanged = function() end",
        "body": [
            "ScrollableView.onContentPaneChanged = function() end"
        ],
        "description": "ScrollableView.onContentPaneChanged = function() end"
    },
    "ScrollableView.onAutoSizeSettingChanged = function() end": {
        "prefix": "ScrollableView.onAutoSizeSettingChanged = function() end",
        "body": [
            "ScrollableView.onAutoSizeSettingChanged = function() end"
        ],
        "description": "ScrollableView.onAutoSizeSettingChanged = function() end"
    },
    "ToggleButton:setSelected(select)": {
        "prefix": "ToggleButton:setSelected(select)",
        "body": [
            "ToggleButton:setSelected(select)"
        ],
        "description": "ToggleButton:setSelected(select)"
    },
    "ToggleButton:isSelected()": {
        "prefix": "ToggleButton:isSelected()",
        "body": [
            "ToggleButton:isSelected()"
        ],
        "description": "ToggleButton:isSelected()"
    },
    "ToggleButton.onSelectStateChanged = function() end": {
        "prefix": "ToggleButton.onSelectStateChanged = function() end",
        "body": [
            "ToggleButton.onSelectStateChanged = function() end"
        ],
        "description": "ToggleButton.onSelectStateChanged = function() end"
    },
    "RadioButton:setGroupID(group)": {
        "prefix": "RadioButton:setGroupID(group)",
        "body": [
            "RadioButton:setGroupID(group)"
        ],
        "description": "RadioButton:setGroupID(group)"
    },
    "RadioButton:getGroupID()": {
        "prefix": "RadioButton:getGroupID()",
        "body": [
            "RadioButton:getGroupID()"
        ],
        "description": "RadioButton:getGroupID()"
    },
    "RadioButton:isSelected()": {
        "prefix": "RadioButton:isSelected()",
        "body": [
            "RadioButton:isSelected()"
        ],
        "description": "RadioButton:isSelected()"
    },
    "ActorWindow:setActorName(\"boy.actor\")": {
        "prefix": "ActorWindow:setActorName(\"boy.actor\")",
        "body": [
            "ActorWindow:setActorName(\"boy.actor\")"
        ],
        "description": "ActorWindow:setActorName(\"boy.actor\")"
    },
    "ActorWindow:getActorName()": {
        "prefix": "ActorWindow:getActorName()",
        "body": [
            "ActorWindow:getActorName()"
        ],
        "description": "ActorWindow:getActorName()"
    },
    "ActorWindow:setSkillName(\"idle\")": {
        "prefix": "ActorWindow:setSkillName(\"idle\")",
        "body": [
            "ActorWindow:setSkillName(\"idle\")"
        ],
        "description": "ActorWindow:setSkillName(\"idle\")"
    },
    "ActorWindow:getSkillName()": {
        "prefix": "ActorWindow:getSkillName()",
        "body": [
            "ActorWindow:getSkillName()"
        ],
        "description": "ActorWindow:getSkillName()"
    },
    "ActorWindow:setActorScale(0.5)": {
        "prefix": "ActorWindow:setActorScale(0.5)",
        "body": [
            "ActorWindow:setActorScale(0.5)"
        ],
        "description": "ActorWindow:setActorScale(0.5)"
    },
    "ActorWindow:getActorScale()": {
        "prefix": "ActorWindow:getActorScale()",
        "body": [
            "ActorWindow:getActorScale()"
        ],
        "description": "ActorWindow:getActorScale()"
    },
    "ActorWindow:setPosition(Lib.v3(10,10,10))": {
        "prefix": "ActorWindow:setPosition(Lib.v3(10,10,10))",
        "body": [
            "ActorWindow:setPosition(Lib.v3(10,10,10))"
        ],
        "description": "ActorWindow:setPosition(Lib.v3(10,10,10))"
    },
    "ActorWindow:getPosition()": {
        "prefix": "ActorWindow:getPosition()",
        "body": [
            "ActorWindow:getPosition()"
        ],
        "description": "ActorWindow:getPosition()"
    },
    "ActorWindow:setRotateX(90)": {
        "prefix": "ActorWindow:setRotateX(90)",
        "body": [
            "ActorWindow:setRotateX(90)"
        ],
        "description": "ActorWindow:setRotateX(90)"
    },
    "ActorWindow:getRotateX()": {
        "prefix": "ActorWindow:getRotateX()",
        "body": [
            "ActorWindow:getRotateX()"
        ],
        "description": "ActorWindow:getRotateX()"
    },
    "ActorWindow:setRotateY(90)": {
        "prefix": "ActorWindow:setRotateY(90)",
        "body": [
            "ActorWindow:setRotateY(90)"
        ],
        "description": "ActorWindow:setRotateY(90)"
    },
    "ActorWindow:getRotateY()": {
        "prefix": "ActorWindow:getRotateY()",
        "body": [
            "ActorWindow:getRotateY()"
        ],
        "description": "ActorWindow:getRotateY()"
    },
    "ActorWindow:setRotateZ(90)": {
        "prefix": "ActorWindow:setRotateZ(90)",
        "body": [
            "ActorWindow:setRotateZ(90)"
        ],
        "description": "ActorWindow:setRotateZ(90)"
    },
    "ActorWindow:getRotateZ()": {
        "prefix": "ActorWindow:getRotateZ()",
        "body": [
            "ActorWindow:getRotateZ()"
        ],
        "description": "ActorWindow:getRotateZ()"
    },
    "ActorWindow:useBodyPart(\"hair\",\"my_source_hair1\")": {
        "prefix": "ActorWindow:useBodyPart(\"hair\",\"my_source_hair1\")",
        "body": [
            "ActorWindow:useBodyPart(\"hair\",\"my_source_hair1\")"
        ],
        "description": "ActorWindow:useBodyPart(\"hair\",\"my_source_hair1\")"
    },
    "ActorWindow:unloadBodyPart(\"hair\")": {
        "prefix": "ActorWindow:unloadBodyPart(\"hair\")",
        "body": [
            "ActorWindow:unloadBodyPart(\"hair\")"
        ],
        "description": "ActorWindow:unloadBodyPart(\"hair\")"
    },
    "ActorWindow:scaleBodyPart(\"head\",Lib.v3(2,1,1))": {
        "prefix": "ActorWindow:scaleBodyPart(\"head\",Lib.v3(2,1,1))",
        "body": [
            "ActorWindow:scaleBodyPart(\"head\",Lib.v3(2,1,1))"
        ],
        "description": "ActorWindow:scaleBodyPart(\"head\",Lib.v3(2,1,1))"
    },
    "ActorWindow:offsetBodyPart(\"head\",Lib.v3(2,1,1))": {
        "prefix": "ActorWindow:offsetBodyPart(\"head\",Lib.v3(2,1,1))",
        "body": [
            "ActorWindow:offsetBodyPart(\"head\",Lib.v3(2,1,1))"
        ],
        "description": "ActorWindow:offsetBodyPart(\"head\",Lib.v3(2,1,1))"
    },
    "ActorWindow:isActorPrepared()": {
        "prefix": "ActorWindow:isActorPrepared()",
        "body": [
            "ActorWindow:isActorPrepared()"
        ],
        "description": "ActorWindow:isActorPrepared()"
    },
    "sceneWindow:setRotation({x = 0, y = 1, z = 2})": {
        "prefix": "sceneWindow:setRotation({x = 0, y = 1, z = 2})",
        "body": [
            "sceneWindow:setRotation({x = 0, y = 1, z = 2})"
        ],
        "description": "sceneWindow:setRotation({x = 0, y = 1, z = 2})"
    },
    "sceneWindow:getRotation()": {
        "prefix": "sceneWindow:getRotation()",
        "body": [
            "sceneWindow:getRotation()"
        ],
        "description": "sceneWindow:getRotation()"
    },
    "sceneWindow:setPosition({x = 0, y = 1, z = 2})": {
        "prefix": "sceneWindow:setPosition({x = 0, y = 1, z = 2})",
        "body": [
            "sceneWindow:setPosition({x = 0, y = 1, z = 2})"
        ],
        "description": "sceneWindow:setPosition({x = 0, y = 1, z = 2})"
    },
    "sceneWindow:getPosition()": {
        "prefix": "sceneWindow:getPosition()",
        "body": [
            "sceneWindow:getPosition()"
        ],
        "description": "sceneWindow:getPosition()"
    },
    "sceneWindow:setObjID(10)": {
        "prefix": "sceneWindow:setObjID(10)",
        "body": [
            "sceneWindow:setObjID(10)"
        ],
        "description": "sceneWindow:setObjID(10)"
    },
    "sceneWindow:getObjID()": {
        "prefix": "sceneWindow:getObjID()",
        "body": [
            "sceneWindow:getObjID()"
        ],
        "description": "sceneWindow:getObjID()"
    },
    "Lang:toText(arg)": {
        "prefix": "Lang:toText(arg)",
        "body": [
            "Lang:toText(arg)"
        ],
        "description": "Lang:toText(arg)"
    },
    "Lib.getYearMonthStr(time)": {
        "prefix": "Lib.getYearMonthStr(time)",
        "body": [
            "Lib.getYearMonthStr(time)"
        ],
        "description": "Lib.getYearMonthStr(time)"
    },
    "Lib.getYearWeekStr(time)": {
        "prefix": "Lib.getYearWeekStr(time)",
        "body": [
            "Lib.getYearWeekStr(time)"
        ],
        "description": "Lib.getYearWeekStr(time)"
    },
    "Lib.getWeeksOfYear(time)": {
        "prefix": "Lib.getWeeksOfYear(time)",
        "body": [
            "Lib.getWeeksOfYear(time)"
        ],
        "description": "Lib.getWeeksOfYear(time)"
    },
    "Lib.getYearDayStr(time)": {
        "prefix": "Lib.getYearDayStr(time)",
        "body": [
            "Lib.getYearDayStr(time)"
        ],
        "description": "Lib.getYearDayStr(time)"
    },
    "Lib.getMonthStartTime(time)": {
        "prefix": "Lib.getMonthStartTime(time)",
        "body": [
            "Lib.getMonthStartTime(time)"
        ],
        "description": "Lib.getMonthStartTime(time)"
    },
    "Lib.getWeekStartTime(time)": {
        "prefix": "Lib.getWeekStartTime(time)",
        "body": [
            "Lib.getWeekStartTime(time)"
        ],
        "description": "Lib.getWeekStartTime(time)"
    },
    "Lib.getDayStartTime(time)": {
        "prefix": "Lib.getDayStartTime(time)",
        "body": [
            "Lib.getDayStartTime(time)"
        ],
        "description": "Lib.getDayStartTime(time)"
    },
    "Lib.getMonthEndTime(time)": {
        "prefix": "Lib.getMonthEndTime(time)",
        "body": [
            "Lib.getMonthEndTime(time)"
        ],
        "description": "Lib.getMonthEndTime(time)"
    },
    "Lib.getWeekEndTime(time)": {
        "prefix": "Lib.getWeekEndTime(time)",
        "body": [
            "Lib.getWeekEndTime(time)"
        ],
        "description": "Lib.getWeekEndTime(time)"
    },
    "Lib.getDayEndTime(time)": {
        "prefix": "Lib.getDayEndTime(time)",
        "body": [
            "Lib.getDayEndTime(time)"
        ],
        "description": "Lib.getDayEndTime(time)"
    },
    "Lib.isSameDay(time1, time2)": {
        "prefix": "Lib.isSameDay(time1, time2)",
        "body": [
            "Lib.isSameDay(time1, time2)"
        ],
        "description": "Lib.isSameDay(time1, time2)"
    },
    "Lib.isSameWeek(time1, time2)": {
        "prefix": "Lib.isSameWeek(time1, time2)",
        "body": [
            "Lib.isSameWeek(time1, time2)"
        ],
        "description": "Lib.isSameWeek(time1, time2)"
    },
    "Vector3.new(x, y, z)": {
        "prefix": "Vector3.new(x, y, z)",
        "body": [
            "Vector3.new(x, y, z)"
        ],
        "description": "Vector3.new(x, y, z)"
    },
    "Vector3.lenSqr()": {
        "prefix": "Vector3.lenSqr()",
        "body": [
            "Vector3.lenSqr()"
        ],
        "description": "Vector3.lenSqr()"
    },
    "Vector3:len()": {
        "prefix": "Vector3:len()",
        "body": [
            "Vector3:len()"
        ],
        "description": "Vector3:len()"
    },
    "Vector3:copy()": {
        "prefix": "Vector3:copy()",
        "body": [
            "Vector3:copy()"
        ],
        "description": "Vector3:copy()"
    },
    "Vector3:isZero()": {
        "prefix": "Vector3:isZero()",
        "body": [
            "Vector3:isZero()"
        ],
        "description": "Vector3:isZero()"
    },
    "Vector3:normalize()": {
        "prefix": "Vector3:normalize()",
        "body": [
            "Vector3:normalize()"
        ],
        "description": "Vector3:normalize()"
    },
    "Vector3:blockPos()": {
        "prefix": "Vector3:blockPos()",
        "body": [
            "Vector3:blockPos()"
        ],
        "description": "Vector3:blockPos()"
    },
    "Vector3:dot(rhs)": {
        "prefix": "Vector3:dot(rhs)",
        "body": [
            "Vector3:dot(rhs)"
        ],
        "description": "Vector3:dot(rhs)"
    },
    "Vector3:cross(rhs)": {
        "prefix": "Vector3:cross(rhs)",
        "body": [
            "Vector3:cross(rhs)"
        ],
        "description": "Vector3:cross(rhs)"
    },
    "DBHandler:getDataByUserId(subKey, dataKey, callback, failback)": {
        "prefix": "DBHandler:getDataByUserId(subKey, dataKey, callback, failback)",
        "body": [
            "DBHandler:getDataByUserId(subKey, dataKey, callback, failback)"
        ],
        "description": "DBHandler:getDataByUserId(subKey, dataKey, callback, failback)"
    },
    "DBHandler:setData(subKey, dataKey, data, immediately)": {
        "prefix": "DBHandler:setData(subKey, dataKey, data, immediately)",
        "body": [
            "DBHandler:setData(subKey, dataKey, data, immediately)"
        ],
        "description": "DBHandler:setData(subKey, dataKey, data, immediately)"
    },
    "RedisHandler:trySendZIncBy(immediately)": {
        "prefix": "RedisHandler:trySendZIncBy(immediately)",
        "body": [
            "RedisHandler:trySendZIncBy(immediately)"
        ],
        "description": "RedisHandler:trySendZIncBy(immediately)"
    },
    "RedisHandler:trySendZExpire(immediately)": {
        "prefix": "RedisHandler:trySendZExpire(immediately)",
        "body": [
            "RedisHandler:trySendZExpire(immediately)"
        ],
        "description": "RedisHandler:trySendZExpire(immediately)"
    },
    "RedisHandler:hasCachedData()": {
        "prefix": "RedisHandler:hasCachedData()",
        "body": [
            "RedisHandler:hasCachedData()"
        ],
        "description": "RedisHandler:hasCachedData()"
    },
    "RedisHandler:ZExpireat(setName, timeStamp)": {
        "prefix": "RedisHandler:ZExpireat(setName, timeStamp)",
        "body": [
            "RedisHandler:ZExpireat(setName, timeStamp)"
        ],
        "description": "RedisHandler:ZExpireat(setName, timeStamp)"
    },
    "RedisHandler:ZIncrBy(setName, key, value)": {
        "prefix": "RedisHandler:ZIncrBy(setName, key, value)",
        "body": [
            "RedisHandler:ZIncrBy(setName, key, value)"
        ],
        "description": "RedisHandler:ZIncrBy(setName, key, value)"
    },
    "RedisHandler:ZAdd(setName, key, value)": {
        "prefix": "RedisHandler:ZAdd(setName, key, value)",
        "body": [
            "RedisHandler:ZAdd(setName, key, value)"
        ],
        "description": "RedisHandler:ZAdd(setName, key, value)"
    },
    "RedisHandler:ZRemove(setName, key)": {
        "prefix": "RedisHandler:ZRemove(setName, key)",
        "body": [
            "RedisHandler:ZRemove(setName, key)"
        ],
        "description": "RedisHandler:ZRemove(setName, key)"
    },
    "RedisHandler:ZScore(setName, key, callback)": {
        "prefix": "RedisHandler:ZScore(setName, key, callback)",
        "body": [
            "RedisHandler:ZScore(setName, key, callback)"
        ],
        "description": "RedisHandler:ZScore(setName, key, callback)"
    },
    "RedisHandler:ZRange(setName, start, end, callback)": {
        "prefix": "RedisHandler:ZRange(setName, start, end, callback)",
        "body": [
            "RedisHandler:ZRange(setName, start, end, callback)"
        ],
        "description": "RedisHandler:ZRange(setName, start, end, callback)"
    },
    "UserInfoCache.LoadCacheByUserIds(userIds, callback)": {
        "prefix": "UserInfoCache.LoadCacheByUserIds(userIds, callback)",
        "body": [
            "UserInfoCache.LoadCacheByUserIds(userIds, callback)"
        ],
        "description": "UserInfoCache.LoadCacheByUserIds(userIds, callback)"
    },
    "UserInfoCache.CancelRequest(session)": {
        "prefix": "UserInfoCache.CancelRequest(session)",
        "body": [
            "UserInfoCache.CancelRequest(session)"
        ],
        "description": "UserInfoCache.CancelRequest(session)"
    },
    "UserInfoCache.GetCache(userId)": {
        "prefix": "UserInfoCache.GetCache(userId)",
        "body": [
            "UserInfoCache.GetCache(userId)"
        ],
        "description": "UserInfoCache.GetCache(userId)"
    },
    "PayHelper:payMoney(player, uniqueId, price, callBack)": {
        "prefix": "PayHelper:payMoney(player, uniqueId, price, callBack)",
        "body": [
            "PayHelper:payMoney(player, uniqueId, price, callBack)"
        ],
        "description": "PayHelper:payMoney(player, uniqueId, price, callBack)"
    },
    "AdHelper:defineAdPlace(place)": {
        "prefix": "AdHelper:defineAdPlace(place)",
        "body": [
            "AdHelper:defineAdPlace(place)"
        ],
        "description": "AdHelper:defineAdPlace(place)"
    },
    "AdHelper:reportAdPlace(place)": {
        "prefix": "AdHelper:reportAdPlace(place)",
        "body": [
            "AdHelper:reportAdPlace(place)"
        ],
        "description": "AdHelper:reportAdPlace(place)"
    },
    "AdHelper:videoAd(place, adIndex, callBack)": {
        "prefix": "AdHelper:videoAd(place, adIndex, callBack)",
        "body": [
            "AdHelper:videoAd(place, adIndex, callBack)"
        ],
        "description": "AdHelper:videoAd(place, adIndex, callBack)"
    },
    "AdHelper:registerEnableVideoAdChange(callBack)": {
        "prefix": "AdHelper:registerEnableVideoAdChange(callBack)",
        "body": [
            "AdHelper:registerEnableVideoAdChange(callBack)"
        ],
        "description": "AdHelper:registerEnableVideoAdChange(callBack)"
    },
    "AdHelper:canEnableVideoAd()": {
        "prefix": "AdHelper:canEnableVideoAd()",
        "body": [
            "AdHelper:canEnableVideoAd()"
        ],
        "description": "AdHelper:canEnableVideoAd()"
    },
    "Part:setProperty(\"useGravity\", \"true\")": {
        "prefix": "Part:setProperty(\"useGravity\", \"true\")",
        "body": [
            "Part:setProperty(\"useGravity\", \"true\")"
        ],
        "description": "Part:setProperty(\"useGravity\", \"true\")"
    },
    "Part:move(Vector3.new(1,1,1))": {
        "prefix": "Part:move(Vector3.new(1,1,1))",
        "body": [
            "Part:move(Vector3.new(1,1,1))"
        ],
        "description": "Part:move(Vector3.new(1,1,1))"
    },
    "Part:moveUntilCollide(Vector3.new(1,1,1))": {
        "prefix": "Part:moveUntilCollide(Vector3.new(1,1,1))",
        "body": [
            "Part:moveUntilCollide(Vector3.new(1,1,1))"
        ],
        "description": "Part:moveUntilCollide(Vector3.new(1,1,1))"
    },
    "Part:getVolume()": {
        "prefix": "Part:getVolume()",
        "body": [
            "Part:getVolume()"
        ],
        "description": "Part:getVolume()"
    },
    "Part:setMass(2)": {
        "prefix": "Part:setMass(2)",
        "body": [
            "Part:setMass(2)"
        ],
        "description": "Part:setMass(2)"
    },
    "Part:getMass()": {
        "prefix": "Part:getMass()",
        "body": [
            "Part:getMass()"
        ],
        "description": "Part:getMass()"
    },
    "Part:setDensity(2)": {
        "prefix": "Part:setDensity(2)",
        "body": [
            "Part:setDensity(2)"
        ],
        "description": "Part:setDensity(2)"
    },
    "Part:getDensity()": {
        "prefix": "Part:getDensity()",
        "body": [
            "Part:getDensity()"
        ],
        "description": "Part:getDensity()"
    },
    "Part:setFriction(2)": {
        "prefix": "Part:setFriction(2)",
        "body": [
            "Part:setFriction(2)"
        ],
        "description": "Part:setFriction(2)"
    },
    "Part:getFriction()": {
        "prefix": "Part:getFriction()",
        "body": [
            "Part:getFriction()"
        ],
        "description": "Part:getFriction()"
    },
    "Part:setRestitution(2)": {
        "prefix": "Part:setRestitution(2)",
        "body": [
            "Part:setRestitution(2)"
        ],
        "description": "Part:setRestitution(2)"
    },
    "Part:getRestitution()": {
        "prefix": "Part:getRestitution()",
        "body": [
            "Part:getRestitution()"
        ],
        "description": "Part:getRestitution()"
    },
    "Part:applyForce(Vector3.new(1,1,1))": {
        "prefix": "Part:applyForce(Vector3.new(1,1,1))",
        "body": [
            "Part:applyForce(Vector3.new(1,1,1))"
        ],
        "description": "Part:applyForce(Vector3.new(1,1,1))"
    },
    "Part:applyTorque(Vector3.new(1,1,1))": {
        "prefix": "Part:applyTorque(Vector3.new(1,1,1))",
        "body": [
            "Part:applyTorque(Vector3.new(1,1,1))"
        ],
        "description": "Part:applyTorque(Vector3.new(1,1,1))"
    },
    "Part:setUseAnchor(setting)": {
        "prefix": "Part:setUseAnchor(setting)",
        "body": [
            "Part:setUseAnchor(setting)"
        ],
        "description": "Part:setUseAnchor(setting)"
    },
    "Part:isUseAnchor()": {
        "prefix": "Part:isUseAnchor()",
        "body": [
            "Part:isUseAnchor()"
        ],
        "description": "Part:isUseAnchor()"
    },
    "Part:setUseGravity(false)": {
        "prefix": "Part:setUseGravity(false)",
        "body": [
            "Part:setUseGravity(false)"
        ],
        "description": "Part:setUseGravity(false)"
    },
    "Part:isUseGravity()": {
        "prefix": "Part:isUseGravity()",
        "body": [
            "Part:isUseGravity()"
        ],
        "description": "Part:isUseGravity()"
    },
    "Part:setLineVelocity(Vector3.new(1,0,0))": {
        "prefix": "Part:setLineVelocity(Vector3.new(1,0,0))",
        "body": [
            "Part:setLineVelocity(Vector3.new(1,0,0))"
        ],
        "description": "Part:setLineVelocity(Vector3.new(1,0,0))"
    },
    "Part:getCurLineVelocity()": {
        "prefix": "Part:getCurLineVelocity()",
        "body": [
            "Part:getCurLineVelocity()"
        ],
        "description": "Part:getCurLineVelocity()"
    },
    "Part:setAngleVelocity(Vector3.new(1,0,0))": {
        "prefix": "Part:setAngleVelocity(Vector3.new(1,0,0))",
        "body": [
            "Part:setAngleVelocity(Vector3.new(1,0,0))"
        ],
        "description": "Part:setAngleVelocity(Vector3.new(1,0,0))"
    },
    "Part:getCurAngleVelocity()": {
        "prefix": "Part:getCurAngleVelocity()",
        "body": [
            "Part:getCurAngleVelocity()"
        ],
        "description": "Part:getCurAngleVelocity()"
    },
    "Part:destoryAllConstraint()": {
        "prefix": "Part:destoryAllConstraint()",
        "body": [
            "Part:destoryAllConstraint()"
        ],
        "description": "Part:destoryAllConstraint()"
    },
    "Part:connect(signalKey, handle)": {
        "prefix": "Part:connect(signalKey, handle)",
        "body": [
            "Part:connect(signalKey, handle)"
        ],
        "description": "Part:connect(signalKey, handle)"
    },
    "Part:isConstrainted()": {
        "prefix": "Part:isConstrainted()",
        "body": [
            "Part:isConstrainted()"
        ],
        "description": "Part:isConstrainted()"
    },
    "Part:getAllConstrainPtr()": {
        "prefix": "Part:getAllConstrainPtr()",
        "body": [
            "Part:getAllConstrainPtr()"
        ],
        "description": "Part:getAllConstrainPtr()"
    },
    "Model:setPrimaryPart(part)": {
        "prefix": "Model:setPrimaryPart(part)",
        "body": [
            "Model:setPrimaryPart(part)"
        ],
        "description": "Model:setPrimaryPart(part)"
    },
    "ConstrainBase:getMasterPart()": {
        "prefix": "ConstrainBase:getMasterPart()",
        "body": [
            "ConstrainBase:getMasterPart()"
        ],
        "description": "ConstrainBase:getMasterPart()"
    },
    "ConstrainBase:getSlavePart()": {
        "prefix": "ConstrainBase:getSlavePart()",
        "body": [
            "ConstrainBase:getSlavePart()"
        ],
        "description": "ConstrainBase:getSlavePart()"
    },
    "Instance.Create(\"Part\")": {
        "prefix": "Instance.Create(\"Part\")",
        "body": [
            "Instance.Create(\"Part\")"
        ],
        "description": "Instance.Create(\"Part\")"
    },
    "Part:getInstanceID()": {
        "prefix": "Part:getInstanceID()",
        "body": [
            "Part:getInstanceID()"
        ],
        "description": "Part:getInstanceID()"
    },
    "Instance.getByInstanceId(id)": {
        "prefix": "Instance.getByInstanceId(id)",
        "body": [
            "Instance.getByInstanceId(id)"
        ],
        "description": "Instance.getByInstanceId(id)"
    },
    "Instance:setParent(parent)": {
        "prefix": "Instance:setParent(parent)",
        "body": [
            "Instance:setParent(parent)"
        ],
        "description": "Instance:setParent(parent)"
    },
    "Instance:getParent()": {
        "prefix": "Instance:getParent()",
        "body": [
            "Instance:getParent()"
        ],
        "description": "Instance:getParent()"
    },
    "Instance:getChildrenCount()": {
        "prefix": "Instance:getChildrenCount()",
        "body": [
            "Instance:getChildrenCount()"
        ],
        "description": "Instance:getChildrenCount()"
    },
    "Instance:getChildAt(0)": {
        "prefix": "Instance:getChildAt(0)",
        "body": [
            "Instance:getChildAt(0)"
        ],
        "description": "Instance:getChildAt(0)"
    },
    "Instance:findFirstAncestor(name)": {
        "prefix": "Instance:findFirstAncestor(name)",
        "body": [
            "Instance:findFirstAncestor(name)"
        ],
        "description": "Instance:findFirstAncestor(name)"
    },
    "Instance:findFirstAncestorOfClass(className)": {
        "prefix": "Instance:findFirstAncestorOfClass(className)",
        "body": [
            "Instance:findFirstAncestorOfClass(className)"
        ],
        "description": "Instance:findFirstAncestorOfClass(className)"
    },
    "Instance:findFirstChild(name, recursive)": {
        "prefix": "Instance:findFirstChild(name, recursive)",
        "body": [
            "Instance:findFirstChild(name, recursive)"
        ],
        "description": "Instance:findFirstChild(name, recursive)"
    },
    "Instance:findFirstChildOfClass(className)": {
        "prefix": "Instance:findFirstChildOfClass(className)",
        "body": [
            "Instance:findFirstChildOfClass(className)"
        ],
        "description": "Instance:findFirstChildOfClass(className)"
    },
    "Instance:isA(className)": {
        "prefix": "Instance:isA(className)",
        "body": [
            "Instance:isA(className)"
        ],
        "description": "Instance:isA(className)"
    },
    "Instance:isAncestorOf(descendant)": {
        "prefix": "Instance:isAncestorOf(descendant)",
        "body": [
            "Instance:isAncestorOf(descendant)"
        ],
        "description": "Instance:isAncestorOf(descendant)"
    },
    "Instance:isDescendantOf(ancestor)": {
        "prefix": "Instance:isDescendantOf(ancestor)",
        "body": [
            "Instance:isDescendantOf(ancestor)"
        ],
        "description": "Instance:isDescendantOf(ancestor)"
    },
    "Instance:clone()": {
        "prefix": "Instance:clone()",
        "body": [
            "Instance:clone()"
        ],
        "description": "Instance:clone()"
    },
    "Instance:destroy()": {
        "prefix": "Instance:destroy()",
        "body": [
            "Instance:destroy()"
        ],
        "description": "Instance:destroy()"
    },
    "PackageHandlers.sendServerHandler(player, name, packet)": {
        "prefix": "PackageHandlers.sendServerHandler(player, name, packet)",
        "body": [
            "PackageHandlers.sendServerHandler(player, name, packet)"
        ],
        "description": "PackageHandlers.sendServerHandler(player, name, packet)"
    },
    "PackageHandlers.sendServerHandlerToTracking(entity, name, packet, includeSelf)": {
        "prefix": "PackageHandlers.sendServerHandlerToTracking(entity, name, packet, includeSelf)",
        "body": [
            "PackageHandlers.sendServerHandlerToTracking(entity, name, packet, includeSelf)"
        ],
        "description": "PackageHandlers.sendServerHandlerToTracking(entity, name, packet, includeSelf)"
    },
    "PackageHandlers.sendServerHandlerToAll(name, packet)": {
        "prefix": "PackageHandlers.sendServerHandlerToAll(name, packet)",
        "body": [
            "PackageHandlers.sendServerHandlerToAll(name, packet)"
        ],
        "description": "PackageHandlers.sendServerHandlerToAll(name, packet)"
    },
    "PackageHandlers.sendClientHandler(name, packet, resp)": {
        "prefix": "PackageHandlers.sendClientHandler(name, packet, resp)",
        "body": [
            "PackageHandlers.sendClientHandler(name, packet, resp)"
        ],
        "description": "PackageHandlers.sendClientHandler(name, packet, resp)"
    },
    "PackageHandlers.sendOtherClient(userId, name, packet)": {
        "prefix": "PackageHandlers.sendOtherClient(userId, name, packet)",
        "body": [
            "PackageHandlers.sendOtherClient(userId, name, packet)"
        ],
        "description": "PackageHandlers.sendOtherClient(userId, name, packet)"
    },
    "Lib.subscribeEvent(name, func, args)": {
        "prefix": "Lib.subscribeEvent(name, func, args)",
        "body": [
            "Lib.subscribeEvent(name, func, args)"
        ],
        "description": "Lib.subscribeEvent(name, func, args)"
    },
    "Lib.unsubscribeEvent(name, index)": {
        "prefix": "Lib.unsubscribeEvent(name, index)",
        "body": [
            "Lib.unsubscribeEvent(name, index)"
        ],
        "description": "Lib.unsubscribeEvent(name, index)"
    },
    "Lib.emitEvent(name, args)": {
        "prefix": "Lib.emitEvent(name, args)",
        "body": [
            "Lib.emitEvent(name, args)"
        ],
        "description": "Lib.emitEvent(name, args)"
    },
    "Trigger.CheckTriggers(cfg, name, context)": {
        "prefix": "Trigger.CheckTriggers(cfg, name, context)",
        "body": [
            "Trigger.CheckTriggers(cfg, name, context)"
        ],
        "description": "Trigger.CheckTriggers(cfg, name, context)"
    },
    "Trigger.CheckTriggersOnly(cfg, name, context)": {
        "prefix": "Trigger.CheckTriggersOnly(cfg, name, context)",
        "body": [
            "Trigger.CheckTriggersOnly(cfg, name, context)"
        ],
        "description": "Trigger.CheckTriggersOnly(cfg, name, context)"
    },
    ".cfg": {
        "prefix": ".cfg",
        "body": [
            ".cfg"
        ],
        "description": ".cfg"
    },
    ".isClient": {
        "prefix": ".isClient",
        "body": [
            ".isClient"
        ],
        "description": ".isClient"
    },
    ".CurWorld": {
        "prefix": ".CurWorld",
        "body": [
            ".CurWorld"
        ],
        "description": ".CurWorld"
    },
    ".GameName": {
        "prefix": ".GameName",
        "body": [
            ".GameName"
        ],
        "description": ".GameName"
    },
    ".defaultMap": {
        "prefix": ".defaultMap",
        "body": [
            ".defaultMap"
        ],
        "description": ".defaultMap"
    },
    ".CurMap": {
        "prefix": ".CurMap",
        "body": [
            ".CurMap"
        ],
        "description": ".CurMap"
    },
    ".enableReconnectNetwork": {
        "prefix": ".enableReconnectNetwork",
        "body": [
            ".enableReconnectNetwork"
        ],
        "description": ".enableReconnectNetwork"
    },
    ".id": {
        "prefix": ".id",
        "body": [
            ".id"
        ],
        "description": ".id"
    },
    ".name": {
        "prefix": ".name",
        "body": [
            ".name"
        ],
        "description": ".name"
    },
    ".static": {
        "prefix": ".static",
        "body": [
            ".static"
        ],
        "description": ".static"
    },
    ".key": {
        "prefix": ".key",
        "body": [
            ".key"
        ],
        "description": ".key"
    },
    ".map": {
        "prefix": ".map",
        "body": [
            ".map"
        ],
        "description": ".map"
    },
    ".mix": {
        "prefix": ".mix",
        "body": [
            ".mix"
        ],
        "description": ".mix"
    },
    ".max": {
        "prefix": ".max",
        "body": [
            ".max"
        ],
        "description": ".max"
    },
    ".players": {
        "prefix": ".players",
        "body": [
            ".players"
        ],
        "description": ".players"
    },
    ".objects": {
        "prefix": ".objects",
        "body": [
            ".objects"
        ],
        "description": ".objects"
    },
    ".objID": {
        "prefix": ".objID",
        "body": [
            ".objID"
        ],
        "description": ".objID"
    },
    ".world": {
        "prefix": ".world",
        "body": [
            ".world"
        ],
        "description": ".world"
    },
    ".ownerId": {
        "prefix": ".ownerId",
        "body": [
            ".ownerId"
        ],
        "description": ".ownerId"
    },
    ".isMainPlayer": {
        "prefix": ".isMainPlayer",
        "body": [
            ".isMainPlayer"
        ],
        "description": ".isMainPlayer"
    },
    ".isEntity": {
        "prefix": ".isEntity",
        "body": [
            ".isEntity"
        ],
        "description": ".isEntity"
    },
    ".isPlayer": {
        "prefix": ".isPlayer",
        "body": [
            ".isPlayer"
        ],
        "description": ".isPlayer"
    },
    ".curHp": {
        "prefix": ".curHp",
        "body": [
            ".curHp"
        ],
        "description": ".curHp"
    },
    ".curVp": {
        "prefix": ".curVp",
        "body": [
            ".curVp"
        ],
        "description": ".curVp"
    },
    ".movingStyle": {
        "prefix": ".movingStyle",
        "body": [
            ".movingStyle"
        ],
        "description": ".movingStyle"
    },
    ".isMoving": {
        "prefix": ".isMoving",
        "body": [
            ".isMoving"
        ],
        "description": ".isMoving"
    },
    ".onGround": {
        "prefix": ".onGround",
        "body": [
            ".onGround"
        ],
        "description": ".onGround"
    },
    ".isFlying": {
        "prefix": ".isFlying",
        "body": [
            ".isFlying"
        ],
        "description": ".isFlying"
    },
    ".platformUserId": {
        "prefix": ".platformUserId",
        "body": [
            ".platformUserId"
        ],
        "description": ".platformUserId"
    },
    ".playerCount": {
        "prefix": ".playerCount",
        "body": [
            ".playerCount"
        ],
        "description": ".playerCount"
    },
    ".createTime": {
        "prefix": ".createTime",
        "body": [
            ".createTime"
        ],
        "description": ".createTime"
    },
    ".fullName": {
        "prefix": ".fullName",
        "body": [
            ".fullName"
        ],
        "description": ".fullName"
    },
    ".modName": {
        "prefix": ".modName",
        "body": [
            ".modName"
        ],
        "description": ".modName"
    },
    ".plugin": {
        "prefix": ".plugin",
        "body": [
            ".plugin"
        ],
        "description": ".plugin"
    },
    ".displayName": {
        "prefix": ".displayName",
        "body": [
            ".displayName"
        ],
        "description": ".displayName"
    },
    ".entity": {
        "prefix": ".entity",
        "body": [
            ".entity"
        ],
        "description": ".entity"
    },
    ".enable": {
        "prefix": ".enable",
        "body": [
            ".enable"
        ],
        "description": ".enable"
    },
    ".poleForward": {
        "prefix": ".poleForward",
        "body": [
            ".poleForward"
        ],
        "description": ".poleForward"
    },
    ".poleStrafe": {
        "prefix": ".poleStrafe",
        "body": [
            ".poleStrafe"
        ],
        "description": ".poleStrafe"
    },
    ".hideCloud": {
        "prefix": ".hideCloud",
        "body": [
            ".hideCloud"
        ],
        "description": ".hideCloud"
    },
    ".hideFog": {
        "prefix": ".hideFog",
        "body": [
            ".hideFog"
        ],
        "description": ".hideFog"
    },
    ".viewBobbing": {
        "prefix": ".viewBobbing",
        "body": [
            ".viewBobbing"
        ],
        "description": ".viewBobbing"
    },
    ".bobbingCameraEffect": {
        "prefix": ".bobbingCameraEffect",
        "body": [
            ".bobbingCameraEffect"
        ],
        "description": ".bobbingCameraEffect"
    },
    ".restitution": {
        "prefix": ".restitution",
        "body": [
            ".restitution"
        ],
        "description": ".restitution"
    },
    ".friction": {
        "prefix": ".friction",
        "body": [
            ".friction"
        ],
        "description": ".friction"
    },
    ".density": {
        "prefix": ".density",
        "body": [
            ".density"
        ],
        "description": ".density"
    },
    ".lineVelocity": {
        "prefix": ".lineVelocity",
        "body": [
            ".lineVelocity"
        ],
        "description": ".lineVelocity"
    },
    ".angleVelocity": {
        "prefix": ".angleVelocity",
        "body": [
            ".angleVelocity"
        ],
        "description": ".angleVelocity"
    },
    ".useAnchor": {
        "prefix": ".useAnchor",
        "body": [
            ".useAnchor"
        ],
        "description": ".useAnchor"
    },
    ".useGravity": {
        "prefix": ".useGravity",
        "body": [
            ".useGravity"
        ],
        "description": ".useGravity"
    },
    ".useCollide": {
        "prefix": ".useCollide",
        "body": [
            ".useCollide"
        ],
        "description": ".useCollide"
    },
    ".decalOffset": {
        "prefix": ".decalOffset",
        "body": [
            ".decalOffset"
        ],
        "description": ".decalOffset"
    },
    ".decalColor": {
        "prefix": ".decalColor",
        "body": [
            ".decalColor"
        ],
        "description": ".decalColor"
    },
    ".decalAlpha": {
        "prefix": ".decalAlpha",
        "body": [
            ".decalAlpha"
        ],
        "description": ".decalAlpha"
    },
    ".decalSurface": {
        "prefix": ".decalSurface",
        "body": [
            ".decalSurface"
        ],
        "description": ".decalSurface"
    },
    ".decalImageType": {
        "prefix": ".decalImageType",
        "body": [
            ".decalImageType"
        ],
        "description": ".decalImageType"
    },
    ".decalTiling": {
        "prefix": ".decalTiling",
        "body": [
            ".decalTiling"
        ],
        "description": ".decalTiling"
    },
    ".decalTexture": {
        "prefix": ".decalTexture",
        "body": [
            ".decalTexture"
        ],
        "description": ".decalTexture"
    },
    ".mesh": {
        "prefix": ".mesh",
        "body": [
            ".mesh"
        ],
        "description": ".mesh"
    },
    ".force = :new(0, 10, 0)": {
        "prefix": ".force = :new(0, 10, 0)",
        "body": [
            ".force = :new(0, 10, 0)"
        ],
        "description": ".force = :new(0, 10, 0)"
    },
    ".useRelativeForce = true": {
        "prefix": ".useRelativeForce = true",
        "body": [
            ".useRelativeForce = true"
        ],
        "description": ".useRelativeForce = true"
    },
    ".torque = :new(0, 10, 0)": {
        "prefix": ".torque = :new(0, 10, 0)",
        "body": [
            ".torque = :new(0, 10, 0)"
        ],
        "description": ".torque = :new(0, 10, 0)"
    },
    ".useRelativeTorque = true": {
        "prefix": ".useRelativeTorque = true",
        "body": [
            ".useRelativeTorque = true"
        ],
        "description": ".useRelativeTorque = true"
    },
    ".length = 2": {
        "prefix": ".length = 2",
        "body": [
            ".length = 2"
        ],
        "description": ".length = 2"
    },
    ".fixedJustify = true": {
        "prefix": ".fixedJustify = true",
        "body": [
            ".fixedJustify = true"
        ],
        "description": ".fixedJustify = true"
    },
    ".radius = 1": {
        "prefix": ".radius = 1",
        "body": [
            ".radius = 1"
        ],
        "description": ".radius = 1"
    },
    ".useSpring = true": {
        "prefix": ".useSpring = true",
        "body": [
            ".useSpring = true"
        ],
        "description": ".useSpring = true"
    },
    ".springTargetAngle = 90": {
        "prefix": ".springTargetAngle = 90",
        "body": [
            ".springTargetAngle = 90"
        ],
        "description": ".springTargetAngle = 90"
    },
    ".stiffness = 5": {
        "prefix": ".stiffness = 5",
        "body": [
            ".stiffness = 5"
        ],
        "description": ".stiffness = 5"
    },
    ".damping = 1": {
        "prefix": ".damping = 1",
        "body": [
            ".damping = 1"
        ],
        "description": ".damping = 1"
    },
    ".useMoter = true": {
        "prefix": ".useMoter = true",
        "body": [
            ".useMoter = true"
        ],
        "description": ".useMoter = true"
    },
    ".motorTargetAngleVelocity = 30": {
        "prefix": ".motorTargetAngleVelocity = 30",
        "body": [
            ".motorTargetAngleVelocity = 30"
        ],
        "description": ".motorTargetAngleVelocity = 30"
    },
    ".motorForce = 10": {
        "prefix": ".motorForce = 10",
        "body": [
            ".motorForce = 10"
        ],
        "description": ".motorForce = 10"
    },
    ".length = 10": {
        "prefix": ".length = 10",
        "body": [
            ".length = 10"
        ],
        "description": ".length = 10"
    },
    ".stiffness = 52": {
        "prefix": ".stiffness = 52",
        "body": [
            ".stiffness = 52"
        ],
        "description": ".stiffness = 52"
    },
    ".damping = 0.1": {
        "prefix": ".damping = 0.1",
        "body": [
            ".damping = 0.1"
        ],
        "description": ".damping = 0.1"
    },
    ".radius = 0.25": {
        "prefix": ".radius = 0.25",
        "body": [
            ".radius = 0.25"
        ],
        "description": ".radius = 0.25"
    },
    ".thickness = 0.20": {
        "prefix": ".thickness = 0.20",
        "body": [
            ".thickness = 0.20"
        ],
        "description": ".thickness = 0.20"
    },
    ".coil = 1": {
        "prefix": ".coil = 1",
        "body": [
            ".coil = 1"
        ],
        "description": ".coil = 1"
    },
    ".radius = 10": {
        "prefix": ".radius = 10",
        "body": [
            ".radius = 10"
        ],
        "description": ".radius = 10"
    },
    ".upperLimit = 10": {
        "prefix": ".upperLimit = 10",
        "body": [
            ".upperLimit = 10"
        ],
        "description": ".upperLimit = 10"
    },
    ".lowerLimit = 10": {
        "prefix": ".lowerLimit = 10",
        "body": [
            ".lowerLimit = 10"
        ],
        "description": ".lowerLimit = 10"
    },
    ".visible": {
        "prefix": ".visible",
        "body": [
            ".visible"
        ],
        "description": ".visible"
    },
    ".collision": {
        "prefix": ".collision",
        "body": [
            ".collision"
        ],
        "description": ".collision"
    },
    ".slavePartID": {
        "prefix": ".slavePartID",
        "body": [
            ".slavePartID"
        ],
        "description": ".slavePartID"
    },
    ".masterLocalPos": {
        "prefix": ".masterLocalPos",
        "body": [
            ".masterLocalPos"
        ],
        "description": ".masterLocalPos"
    },
    ".slaveLocalPos": {
        "prefix": ".slaveLocalPos",
        "body": [
            ".slaveLocalPos"
        ],
        "description": ".slaveLocalPos"
    },
    ".color": {
        "prefix": ".color",
        "body": [
            ".color"
        ],
        "description": ".color"
    },
    ".Now()": {
        "prefix": ".Now()",
        "body": [
            ".Now()"
        ],
        "description": ".Now()"
    },
    ".Timer(time, func, ...)": {
        "prefix": ".Timer(time, func, ...)",
        "body": [
            ".Timer(time, func, ...)"
        ],
        "description": ".Timer(time, func, ...)"
    },
    ".LightTimer(stack, time, func, ...)": {
        "prefix": ".LightTimer(stack, time, func, ...)",
        "body": [
            ".LightTimer(stack, time, func, ...)"
        ],
        "description": ".LightTimer(stack, time, func, ...)"
    },
    ":getMapById(id)": {
        "prefix": ":getMapById(id)",
        "body": [
            ":getMapById(id)"
        ],
        "description": ":getMapById(id)"
    },
    ":getMap(name)": {
        "prefix": ":getMap(name)",
        "body": [
            ":getMap(name)"
        ],
        "description": ":getMap(name)"
    },
    ":getOrCreateStaticMap(name)": {
        "prefix": ":getOrCreateStaticMap(name)",
        "body": [
            ":getOrCreateStaticMap(name)"
        ],
        "description": ":getOrCreateStaticMap(name)"
    },
    ":createDynamicMap(name, closeWhenEmpty)": {
        "prefix": ":createDynamicMap(name, closeWhenEmpty)",
        "body": [
            ":createDynamicMap(name, closeWhenEmpty)"
        ],
        "description": ":createDynamicMap(name, closeWhenEmpty)"
    },
    ":SystemChat(typ, key, ...)": {
        "prefix": ":SystemChat(typ, key, ...)",
        "body": [
            ":SystemChat(typ, key, ...)"
        ],
        "description": ":SystemChat(typ, key, ...)"
    },
    ":SystemNotice(typ, key, time, ...)": {
        "prefix": ":SystemNotice(typ, key, time, ...)",
        "body": [
            ":SystemNotice(typ, key, time, ...)"
        ],
        "description": ":SystemNotice(typ, key, time, ...)"
    },
    ":isTimeStopped()": {
        "prefix": ":isTimeStopped()",
        "body": [
            ":isTimeStopped()"
        ],
        "description": ":isTimeStopped()"
    },
    ":setTimeStopped(stepped)": {
        "prefix": ":setTimeStopped(stepped)",
        "body": [
            ":setTimeStopped(stepped)"
        ],
        "description": ":setTimeStopped(stepped)"
    },
    ":setWorldTimeSpeed(time)": {
        "prefix": ":setWorldTimeSpeed(time)",
        "body": [
            ":setWorldTimeSpeed(time)"
        ],
        "description": ":setWorldTimeSpeed(time)"
    },
    ":getObject(objID)": {
        "prefix": ":getObject(objID)",
        "body": [
            ":getObject(objID)"
        ],
        "description": ":getObject(objID)"
    },
    ":getAllObject()": {
        "prefix": ":getAllObject()",
        "body": [
            ":getAllObject()"
        ],
        "description": ":getAllObject()"
    },
    ":filterWord(content)": {
        "prefix": ":filterWord(content)",
        "body": [
            ":filterWord(content)"
        ],
        "description": ":filterWord(content)"
    },
    ":isValid()": {
        "prefix": ":isValid()",
        "body": [
            ":isValid()"
        ],
        "description": ":isValid()"
    },
    ":getBlock(pos)": {
        "prefix": ":getBlock(pos)",
        "body": [
            ":getBlock(pos)"
        ],
        "description": ":getBlock(pos)"
    },
    ":getRegion(key)": {
        "prefix": ":getRegion(key)",
        "body": [
            ":getRegion(key)"
        ],
        "description": ":getRegion(key)"
    },
    ":getAllRegion()": {
        "prefix": ":getAllRegion()",
        "body": [
            ":getAllRegion()"
        ],
        "description": ":getAllRegion()"
    },
    ":getBlockConfigId(pos)": {
        "prefix": ":getBlockConfigId(pos)",
        "body": [
            ":getBlockConfigId(pos)"
        ],
        "description": ":getBlockConfigId(pos)"
    },
    ":posConvertBlock(pos, fullName)": {
        "prefix": ":posConvertBlock(pos, fullName)",
        "body": [
            ":posConvertBlock(pos, fullName)"
        ],
        "description": ":posConvertBlock(pos, fullName)"
    },
    ":fillBlocks(min, max, fullName)": {
        "prefix": ":fillBlocks(min, max, fullName)",
        "body": [
            ":fillBlocks(min, max, fullName)"
        ],
        "description": ":fillBlocks(min, max, fullName)"
    },
    ":clearBlocksInArea(min, max, fullNames)": {
        "prefix": ":clearBlocksInArea(min, max, fullNames)",
        "body": [
            ":clearBlocksInArea(min, max, fullNames)"
        ],
        "description": ":clearBlocksInArea(min, max, fullNames)"
    },
    ":checkBlockFall(pos)": {
        "prefix": ":checkBlockFall(pos)",
        "body": [
            ":checkBlockFall(pos)"
        ],
        "description": ":checkBlockFall(pos)"
    },
    ":clearBlocks(min, max, all)": {
        "prefix": ":clearBlocks(min, max, all)",
        "body": [
            ":clearBlocks(min, max, all)"
        ],
        "description": ":clearBlocks(min, max, all)"
    },
    ":getTouchObject(min, max)": {
        "prefix": ":getTouchObject(min, max)",
        "body": [
            ":getTouchObject(min, max)"
        ],
        "description": ":getTouchObject(min, max)"
    },
    ":getTouchEntities(min, max, includeDead)": {
        "prefix": ":getTouchEntities(min, max, includeDead)",
        "body": [
            ":getTouchEntities(min, max, includeDead)"
        ],
        "description": ":getTouchEntities(min, max, includeDead)"
    },
    ":getNearbyEntities(pos, maxDistance)": {
        "prefix": ":getNearbyEntities(pos, maxDistance)",
        "body": [
            ":getNearbyEntities(pos, maxDistance)"
        ],
        "description": ":getNearbyEntities(pos, maxDistance)"
    },
    ":getBlockPosInArea(min, max, fullNames)": {
        "prefix": ":getBlockPosInArea(min, max, fullNames)",
        "body": [
            ":getBlockPosInArea(min, max, fullNames)"
        ],
        "description": ":getBlockPosInArea(min, max, fullNames)"
    },
    ":setVar(key, value)": {
        "prefix": ":setVar(key, value)",
        "body": [
            ":setVar(key, value)"
        ],
        "description": ":setVar(key, value)"
    },
    ":getVar(key)": {
        "prefix": ":getVar(key)",
        "body": [
            ":getVar(key)"
        ],
        "description": ":getVar(key)"
    },
    ":movePlayersTo(map, pos)": {
        "prefix": ":movePlayersTo(map, pos)",
        "body": [
            ":movePlayersTo(map, pos)"
        ],
        "description": ":movePlayersTo(map, pos)"
    },
    ":saveBlocks(min, max)": {
        "prefix": ":saveBlocks(min, max)",
        "body": [
            ":saveBlocks(min, max)"
        ],
        "description": ":saveBlocks(min, max)"
    },
    ":loadBlocks(min, max, data)": {
        "prefix": ":loadBlocks(min, max, data)",
        "body": [
            ":loadBlocks(min, max, data)"
        ],
        "description": ":loadBlocks(min, max, data)"
    },
    ":createBlock(pos, fullName)": {
        "prefix": ":createBlock(pos, fullName)",
        "body": [
            ":createBlock(pos, fullName)"
        ],
        "description": ":createBlock(pos, fullName)"
    },
    ":removeBlock(pos)": {
        "prefix": ":removeBlock(pos)",
        "body": [
            ":removeBlock(pos)"
        ],
        "description": ":removeBlock(pos)"
    },
    ":getBlockData(pos)": {
        "prefix": ":getBlockData(pos)",
        "body": [
            ":getBlockData(pos)"
        ],
        "description": ":getBlockData(pos)"
    },
    ":getOrCreateBlockData(pos)": {
        "prefix": ":getOrCreateBlockData(pos)",
        "body": [
            ":getOrCreateBlockData(pos)"
        ],
        "description": ":getOrCreateBlockData(pos)"
    },
    ":setBlockData(pos, value)": {
        "prefix": ":setBlockData(pos, value)",
        "body": [
            ":setBlockData(pos, value)"
        ],
        "description": ":setBlockData(pos, value)"
    },
    ":bakeLightAndSave(maxLightMode, forceRecalculate)": {
        "prefix": ":bakeLightAndSave(maxLightMode, forceRecalculate)",
        "body": [
            ":bakeLightAndSave(maxLightMode, forceRecalculate)"
        ],
        "description": ":bakeLightAndSave(maxLightMode, forceRecalculate)"
    },
    ":isOwner(object)": {
        "prefix": ":isOwner(object)",
        "body": [
            ":isOwner(object)"
        ],
        "description": ":isOwner(object)"
    },
    ":setOwner(obj)": {
        "prefix": ":setOwner(obj)",
        "body": [
            ":setOwner(obj)"
        ],
        "description": ":setOwner(obj)"
    },
    ":removeOwner(obj)": {
        "prefix": ":removeOwner(obj)",
        "body": [
            ":removeOwner(obj)"
        ],
        "description": ":removeOwner(obj)"
    },
    ":addRegion(min, max, cfgName)": {
        "prefix": ":addRegion(min, max, cfgName)",
        "body": [
            ":addRegion(min, max, cfgName)"
        ],
        "description": ":addRegion(min, max, cfgName)"
    },
    ":removeRegion(key, isCheckTrigger)": {
        "prefix": ":removeRegion(key, isCheckTrigger)",
        "body": [
            ":removeRegion(key, isCheckTrigger)"
        ],
        "description": ":removeRegion(key, isCheckTrigger)"
    },
    ".GetNameCfgId(name)": {
        "prefix": ".GetNameCfgId(name)",
        "body": [
            ".GetNameCfgId(name)"
        ],
        "description": ".GetNameCfgId(name)"
    },
    ".GetNameCfg(name)": {
        "prefix": ".GetNameCfg(name)",
        "body": [
            ".GetNameCfg(name)"
        ],
        "description": ".GetNameCfg(name)"
    },
    ".GetAirBlockName()": {
        "prefix": ".GetAirBlockName()",
        "body": [
            ".GetAirBlockName()"
        ],
        "description": ".GetAirBlockName()"
    },
    ":triggerRegions(pos, name, context)": {
        "prefix": ":triggerRegions(pos, name, context)",
        "body": [
            ":triggerRegions(pos, name, context)"
        ],
        "description": ":triggerRegions(pos, name, context)"
    },
    ":getWorkSpace()": {
        "prefix": ":getWorkSpace()",
        "body": [
            ":getWorkSpace()"
        ],
        "description": ":getWorkSpace()"
    },
    ":getTouchParts(min, max)": {
        "prefix": ":getTouchParts(min, max)",
        "body": [
            ":getTouchParts(min, max)"
        ],
        "description": ":getTouchParts(min, max)"
    },
    ":cfg()": {
        "prefix": ":cfg()",
        "body": [
            ":cfg()"
        ],
        "description": ":cfg()"
    },
    ":data(key)": {
        "prefix": ":data(key)",
        "body": [
            ":data(key)"
        ],
        "description": ":data(key)"
    },
    ":setData(key, val)": {
        "prefix": ":setData(key, val)",
        "body": [
            ":setData(key, val)"
        ],
        "description": ":setData(key, val)"
    },
    ":timer(time, function, ...)": {
        "prefix": ":timer(time, function, ...)",
        "body": [
            ":timer(time, function, ...)"
        ],
        "description": ":timer(time, function, ...)"
    },
    ":lightTimer(stack, time, func, ...)": {
        "prefix": ":lightTimer(stack, time, func, ...)",
        "body": [
            ":lightTimer(stack, time, func, ...)"
        ],
        "description": ":lightTimer(stack, time, func, ...)"
    },
    ":distance(obj)": {
        "prefix": ":distance(obj)",
        "body": [
            ":distance(obj)"
        ],
        "description": ":distance(obj)"
    },
    ":setMap(map)": {
        "prefix": ":setMap(map)",
        "body": [
            ":setMap(map)"
        ],
        "description": ":setMap(map)"
    },
    ":setRotationYaw(yaw)": {
        "prefix": ":setRotationYaw(yaw)",
        "body": [
            ":setRotationYaw(yaw)"
        ],
        "description": ":setRotationYaw(yaw)"
    },
    ":setRotationPitch(pitch)": {
        "prefix": ":setRotationPitch(pitch)",
        "body": [
            ":setRotationPitch(pitch)"
        ],
        "description": ":setRotationPitch(pitch)"
    },
    ":getRotationYaw()": {
        "prefix": ":getRotationYaw()",
        "body": [
            ":getRotationYaw()"
        ],
        "description": ":getRotationYaw()"
    },
    ":getRotationPitch()": {
        "prefix": ":getRotationPitch()",
        "body": [
            ":getRotationPitch()"
        ],
        "description": ":getRotationPitch()"
    },
    ":setPosition(pos)": {
        "prefix": ":setPosition(pos)",
        "body": [
            ":setPosition(pos)"
        ],
        "description": ":setPosition(pos)"
    },
    ":getPosition()": {
        "prefix": ":getPosition()",
        "body": [
            ":getPosition()"
        ],
        "description": ":getPosition()"
    },
    ":delayCall(func, time)": {
        "prefix": ":delayCall(func, time)",
        "body": [
            ":delayCall(func, time)"
        ],
        "description": ":delayCall(func, time)"
    },
    ":destroy()": {
        "prefix": ":destroy()",
        "body": [
            ":destroy()"
        ],
        "description": ":destroy()"
    },
    ":prop(key)": {
        "prefix": ":prop(key)",
        "body": [
            ":prop(key)"
        ],
        "description": ":prop(key)"
    },
    ":setProp(key, value)": {
        "prefix": ":setProp(key, value)",
        "body": [
            ":setProp(key, value)"
        ],
        "description": ":setProp(key, value)"
    },
    ":isSwimming()": {
        "prefix": ":isSwimming()",
        "body": [
            ":isSwimming()"
        ],
        "description": ":isSwimming()"
    },
    ":jump(x, z)": {
        "prefix": ":jump(x, z)",
        "body": [
            ":jump(x, z)"
        ],
        "description": ":jump(x, z)"
    },
    ":getSpeed()": {
        "prefix": ":getSpeed()",
        "body": [
            ":getSpeed()"
        ],
        "description": ":getSpeed()"
    },
    ":getCollidableUnderfootObjId()": {
        "prefix": ":getCollidableUnderfootObjId()",
        "body": [
            ":getCollidableUnderfootObjId()"
        ],
        "description": ":getCollidableUnderfootObjId()"
    },
    ":isControl()": {
        "prefix": ":isControl()",
        "body": [
            ":isControl()"
        ],
        "description": ":isControl()"
    },
    ":setBodyTurnSpeed(speed)": {
        "prefix": ":setBodyTurnSpeed(speed)",
        "body": [
            ":setBodyTurnSpeed(speed)"
        ],
        "description": ":setBodyTurnSpeed(speed)"
    },
    ":getBodyTurnSpeed()": {
        "prefix": ":getBodyTurnSpeed()",
        "body": [
            ":getBodyTurnSpeed()"
        ],
        "description": ":getBodyTurnSpeed()"
    },
    ":isClimbing()": {
        "prefix": ":isClimbing()",
        "body": [
            ":isClimbing()"
        ],
        "description": ":isClimbing()"
    },
    ":curBlockPos()": {
        "prefix": ":curBlockPos()",
        "body": [
            ":curBlockPos()"
        ],
        "description": ":curBlockPos()"
    },
    ":changeFlyMode(mode)": {
        "prefix": ":changeFlyMode(mode)",
        "body": [
            ":changeFlyMode(mode)"
        ],
        "description": ":changeFlyMode(mode)"
    },
    ":setPos(pos, yaw, pitch)": {
        "prefix": ":setPos(pos, yaw, pitch)",
        "body": [
            ":setPos(pos, yaw, pitch)"
        ],
        "description": ":setPos(pos, yaw, pitch)"
    },
    ":getFrontPos(dis, isFoot, bCenter)": {
        "prefix": ":getFrontPos(dis, isFoot, bCenter)",
        "body": [
            ":getFrontPos(dis, isFoot, bCenter)"
        ],
        "description": ":getFrontPos(dis, isFoot, bCenter)"
    },
    ":tray()": {
        "prefix": ":tray()",
        "body": [
            ":tray()"
        ],
        "description": ":tray()"
    },
    ":owner()": {
        "prefix": ":owner()",
        "body": [
            ":owner()"
        ],
        "description": ":owner()"
    },
    ":getNearbyEntities(maxDistance, filter)": {
        "prefix": ":getNearbyEntities(maxDistance, filter)",
        "body": [
            ":getNearbyEntities(maxDistance, filter)"
        ],
        "description": ":getNearbyEntities(maxDistance, filter)"
    },
    ":getEyePos()": {
        "prefix": ":getEyePos()",
        "body": [
            ":getEyePos()"
        ],
        "description": ":getEyePos()"
    },
    ":setAlwaysAction(action)": {
        "prefix": ":setAlwaysAction(action)",
        "body": [
            ":setAlwaysAction(action)"
        ],
        "description": ":setAlwaysAction(action)"
    },
    ":updateUpperAction(action, ticks)": {
        "prefix": ":updateUpperAction(action, ticks)",
        "body": [
            ":updateUpperAction(action, ticks)"
        ],
        "description": ":updateUpperAction(action, ticks)"
    },
    ":getBaseAction()": {
        "prefix": ":getBaseAction()",
        "body": [
            ":getBaseAction()"
        ],
        "description": ":getBaseAction()"
    },
    ":getUpperAction()": {
        "prefix": ":getUpperAction()",
        "body": [
            ":getUpperAction()"
        ],
        "description": ":getUpperAction()"
    },
    ":getPrevBaseAction()": {
        "prefix": ":getPrevBaseAction()",
        "body": [
            ":getPrevBaseAction()"
        ],
        "description": ":getPrevBaseAction()"
    },
    ":getPrevUpperAction()": {
        "prefix": ":getPrevUpperAction()",
        "body": [
            ":getPrevUpperAction()"
        ],
        "description": ":getPrevUpperAction()"
    },
    ":setAlpha(alpha, time)": {
        "prefix": ":setAlpha(alpha, time)",
        "body": [
            ":setAlpha(alpha, time)"
        ],
        "description": ":setAlpha(alpha, time)"
    },
    ":removeActionMapping(action)": {
        "prefix": ":removeActionMapping(action)",
        "body": [
            ":removeActionMapping(action)"
        ],
        "description": ":removeActionMapping(action)"
    },
    ":isDead()": {
        "prefix": ":isDead()",
        "body": [
            ":isDead()"
        ],
        "description": ":isDead()"
    },
    ":getInvisible()": {
        "prefix": ":getInvisible()",
        "body": [
            ":getInvisible()"
        ],
        "description": ":getInvisible()"
    },
    ":getBodyYaw()": {
        "prefix": ":getBodyYaw()",
        "body": [
            ":getBodyYaw()"
        ],
        "description": ":getBodyYaw()"
    },
    ":setBodyYaw(yaw)": {
        "prefix": ":setBodyYaw(yaw)",
        "body": [
            ":setBodyYaw(yaw)"
        ],
        "description": ":setBodyYaw(yaw)"
    },
    ":setShowName(txt)": {
        "prefix": ":setShowName(txt)",
        "body": [
            ":setShowName(txt)"
        ],
        "description": ":setShowName(txt)"
    },
    ":setHeadText(x, y, txt)": {
        "prefix": ":setHeadText(x, y, txt)",
        "body": [
            ":setHeadText(x, y, txt)"
        ],
        "description": ":setHeadText(x, y, txt)"
    },
    ":setShowHpColor(color)": {
        "prefix": ":setShowHpColor(color)",
        "body": [
            ":setShowHpColor(color)"
        ],
        "description": ":setShowHpColor(color)"
    },
    ":getShowHpColor()": {
        "prefix": ":getShowHpColor()",
        "body": [
            ":getShowHpColor()"
        ],
        "description": ":getShowHpColor()"
    },
    ":addEffect(name, effectName, once, pos, yaw, scale, socketName)": {
        "prefix": ":addEffect(name, effectName, once, pos, yaw, scale, socketName)",
        "body": [
            ":addEffect(name, effectName, once, pos, yaw, scale, socketName)"
        ],
        "description": ":addEffect(name, effectName, once, pos, yaw, scale, socketName)"
    },
    ":delEffect(name, smooth)": {
        "prefix": ":delEffect(name, smooth)",
        "body": [
            ":delEffect(name, smooth)"
        ],
        "description": ":delEffect(name, smooth)"
    },
    ":getActorName()": {
        "prefix": ":getActorName()",
        "body": [
            ":getActorName()"
        ],
        "description": ":getActorName()"
    },
    ":setActorScale(scale)": {
        "prefix": ":setActorScale(scale)",
        "body": [
            ":setActorScale(scale)"
        ],
        "description": ":setActorScale(scale)"
    },
    ":play3dSound(filename, isLoop)": {
        "prefix": ":play3dSound(filename, isLoop)",
        "body": [
            ":play3dSound(filename, isLoop)"
        ],
        "description": ":play3dSound(filename, isLoop)"
    },
    ":showHeadMessage(txt)": {
        "prefix": ":showHeadMessage(txt)",
        "body": [
            ":showHeadMessage(txt)"
        ],
        "description": ":showHeadMessage(txt)"
    },
    ":setGuideTarget(targetPosition, texName, speed)": {
        "prefix": ":setGuideTarget(targetPosition, texName, speed)",
        "body": [
            ":setGuideTarget(targetPosition, texName, speed)"
        ],
        "description": ":setGuideTarget(targetPosition, texName, speed)"
    },
    ":setGuideTarget1(targetEntity, texName, speed)": {
        "prefix": ":setGuideTarget1(targetEntity, texName, speed)",
        "body": [
            ":setGuideTarget1(targetEntity, texName, speed)"
        ],
        "description": ":setGuideTarget1(targetEntity, texName, speed)"
    },
    ":delGuideTarget()": {
        "prefix": ":delGuideTarget()",
        "body": [
            ":delGuideTarget()"
        ],
        "description": ":delGuideTarget()"
    },
    ":setGhost(enable, color, interval, num)": {
        "prefix": ":setGhost(enable, color, interval, num)",
        "body": [
            ":setGhost(enable, color, interval, num)"
        ],
        "description": ":setGhost(enable, color, interval, num)"
    },
    ":setHoldModelARGBStrength(r, g, b, a)": {
        "prefix": ":setHoldModelARGBStrength(r, g, b, a)",
        "body": [
            ":setHoldModelARGBStrength(r, g, b, a)"
        ],
        "description": ":setHoldModelARGBStrength(r, g, b, a)"
    },
    ":getHoldModelARGBStrength()": {
        "prefix": ":getHoldModelARGBStrength()",
        "body": [
            ":getHoldModelARGBStrength()"
        ],
        "description": ":getHoldModelARGBStrength()"
    },
    ":setUseOverlayColorReplaceMode(masterSlaveName, isUse)": {
        "prefix": ":setUseOverlayColorReplaceMode(masterSlaveName, isUse)",
        "body": [
            ":setUseOverlayColorReplaceMode(masterSlaveName, isUse)"
        ],
        "description": ":setUseOverlayColorReplaceMode(masterSlaveName, isUse)"
    },
    ":setOverlayColor(masterSlaveName, color)": {
        "prefix": ":setOverlayColor(masterSlaveName, color)",
        "body": [
            ":setOverlayColor(masterSlaveName, color)"
        ],
        "description": ":setOverlayColor(masterSlaveName, color)"
    },
    ":applySkin(skin)": {
        "prefix": ":applySkin(skin)",
        "body": [
            ":applySkin(skin)"
        ],
        "description": ":applySkin(skin)"
    },
    ":setEntityHide(hide)": {
        "prefix": ":setEntityHide(hide)",
        "body": [
            ":setEntityHide(hide)"
        ],
        "description": ":setEntityHide(hide)"
    },
    ":changeActor(actorName, clearSkin)": {
        "prefix": ":changeActor(actorName, clearSkin)",
        "body": [
            ":changeActor(actorName, clearSkin)"
        ],
        "description": ":changeActor(actorName, clearSkin)"
    },
    ":getHandItem()": {
        "prefix": ":getHandItem()",
        "body": [
            ":getHandItem()"
        ],
        "description": ":getHandItem()"
    },
    ":searchItem(cfgKey, val, type_list)": {
        "prefix": ":searchItem(cfgKey, val, type_list)",
        "body": [
            ":searchItem(cfgKey, val, type_list)"
        ],
        "description": ":searchItem(cfgKey, val, type_list)"
    },
    ":setEntityActorFlashEffect(add)": {
        "prefix": ":setEntityActorFlashEffect(add)",
        "body": [
            ":setEntityActorFlashEffect(add)"
        ],
        "description": ":setEntityActorFlashEffect(add)"
    },
    ":parserBubbleMsg(packet)": {
        "prefix": ":parserBubbleMsg(packet)",
        "body": [
            ":parserBubbleMsg(packet)"
        ],
        "description": ":parserBubbleMsg(packet)"
    },
    ":setHp(hp)": {
        "prefix": ":setHp(hp)",
        "body": [
            ":setHp(hp)"
        ],
        "description": ":setHp(hp)"
    },
    ":addHp(hp)": {
        "prefix": ":addHp(hp)",
        "body": [
            ":addHp(hp)"
        ],
        "description": ":addHp(hp)"
    },
    ":setVp(vp)": {
        "prefix": ":setVp(vp)",
        "body": [
            ":setVp(vp)"
        ],
        "description": ":setVp(vp)"
    },
    ":addVp(vp)": {
        "prefix": ":addVp(vp)",
        "body": [
            ":addVp(vp)"
        ],
        "description": ":addVp(vp)"
    },
    ":setPlayerControl(player)": {
        "prefix": ":setPlayerControl(player)",
        "body": [
            ":setPlayerControl(player)"
        ],
        "description": ":setPlayerControl(player)"
    },
    ":serverRebirth(map, pos, yaw, pitch)": {
        "prefix": ":serverRebirth(map, pos, yaw, pitch)",
        "body": [
            ":serverRebirth(map, pos, yaw, pitch)"
        ],
        "description": ":serverRebirth(map, pos, yaw, pitch)"
    },
    ":getCtrlPlayer()": {
        "prefix": ":getCtrlPlayer()",
        "body": [
            ":getCtrlPlayer()"
        ],
        "description": ":getCtrlPlayer()"
    },
    ":setMapPos(map, pos, yaw, pitch)": {
        "prefix": ":setMapPos(map, pos, yaw, pitch)",
        "body": [
            ":setMapPos(map, pos, yaw, pitch)"
        ],
        "description": ":setMapPos(map, pos, yaw, pitch)"
    },
    ":face2Pos(pos)": {
        "prefix": ":face2Pos(pos)",
        "body": [
            ":face2Pos(pos)"
        ],
        "description": ":face2Pos(pos)"
    },
    ":changeSkin(skinData)": {
        "prefix": ":changeSkin(skinData)",
        "body": [
            ":changeSkin(skinData)"
        ],
        "description": ":changeSkin(skinData)"
    },
    ":getTeam()": {
        "prefix": ":getTeam()",
        "body": [
            ":getTeam()"
        ],
        "description": ":getTeam()"
    },
    ":getRebirthPos()": {
        "prefix": ":getRebirthPos()",
        "body": [
            ":getRebirthPos()"
        ],
        "description": ":getRebirthPos()"
    },
    ":setRebirthPos(pos, map)": {
        "prefix": ":setRebirthPos(pos, map)",
        "body": [
            ":setRebirthPos(pos, map)"
        ],
        "description": ":setRebirthPos(pos, map)"
    },
    ":addItem(fullName, count, proc, reason)": {
        "prefix": ":addItem(fullName, count, proc, reason)",
        "body": [
            ":addItem(fullName, count, proc, reason)"
        ],
        "description": ":addItem(fullName, count, proc, reason)"
    },
    ":takeDamage(damage, from, isFormula, cause)": {
        "prefix": ":takeDamage(damage, from, isFormula, cause)",
        "body": [
            ":takeDamage(damage, from, isFormula, cause)"
        ],
        "description": ":takeDamage(damage, from, isFormula, cause)"
    },
    ":kill(from, cause)": {
        "prefix": ":kill(from, cause)",
        "body": [
            ":kill(from, cause)"
        ],
        "description": ":kill(from, cause)"
    },
    ".GetCfg(cfgName)": {
        "prefix": ".GetCfg(cfgName)",
        "body": [
            ".GetCfg(cfgName)"
        ],
        "description": ".GetCfg(cfgName)"
    },
    ":getValue(key)": {
        "prefix": ":getValue(key)",
        "body": [
            ":getValue(key)"
        ],
        "description": ":getValue(key)"
    },
    ".addValueDef(key, init, toSelf, toOther, saveDB, client)": {
        "prefix": ".addValueDef(key, init, toSelf, toOther, saveDB, client)",
        "body": [
            ".addValueDef(key, init, toSelf, toOther, saveDB, client)"
        ],
        "description": ".addValueDef(key, init, toSelf, toOther, saveDB, client)"
    },
    ".addValueFunc(key, func)": {
        "prefix": ".addValueFunc(key, func)",
        "body": [
            ".addValueFunc(key, func)"
        ],
        "description": ".addValueFunc(key, func)"
    },
    ":setValue(key, value, noSync)": {
        "prefix": ":setValue(key, value, noSync)",
        "body": [
            ":setValue(key, value, noSync)"
        ],
        "description": ":setValue(key, value, noSync)"
    },
    ":doHurtRepel(vector)": {
        "prefix": ":doHurtRepel(vector)",
        "body": [
            ":doHurtRepel(vector)"
        ],
        "description": ":doHurtRepel(vector)"
    },
    ":setActorPause(isPause)": {
        "prefix": ":setActorPause(isPause)",
        "body": [
            ":setActorPause(isPause)"
        ],
        "description": ":setActorPause(isPause)"
    },
    ":getActorPause()": {
        "prefix": ":getActorPause()",
        "body": [
            ":getActorPause()"
        ],
        "description": ":getActorPause()"
    },
    ":setActorAnimRewind(rewind)": {
        "prefix": ":setActorAnimRewind(rewind)",
        "body": [
            ":setActorAnimRewind(rewind)"
        ],
        "description": ":setActorAnimRewind(rewind)"
    },
    ":isActorAnimRewind()": {
        "prefix": ":isActorAnimRewind()",
        "body": [
            ":isActorAnimRewind()"
        ],
        "description": ":isActorAnimRewind()"
    },
    ":refreshUpperAction()": {
        "prefix": ":refreshUpperAction()",
        "body": [
            ":refreshUpperAction()"
        ],
        "description": ":refreshUpperAction()"
    },
    ":refreshBaseAction()": {
        "prefix": ":refreshBaseAction()",
        "body": [
            ":refreshBaseAction()"
        ],
        "description": ":refreshBaseAction()"
    },
    ":setBaseActionScale(scale)": {
        "prefix": ":setBaseActionScale(scale)",
        "body": [
            ":setBaseActionScale(scale)"
        ],
        "description": ":setBaseActionScale(scale)"
    },
    ":getBaseActionScale()": {
        "prefix": ":getBaseActionScale()",
        "body": [
            ":getBaseActionScale()"
        ],
        "description": ":getBaseActionScale()"
    },
    ":setActionTimeScale(action, scale)": {
        "prefix": ":setActionTimeScale(action, scale)",
        "body": [
            ":setActionTimeScale(action, scale)"
        ],
        "description": ":setActionTimeScale(action, scale)"
    },
    ":getActionTimeScale(action)": {
        "prefix": ":getActionTimeScale(action)",
        "body": [
            ":getActionTimeScale(action)"
        ],
        "description": ":getActionTimeScale(action)"
    },
    ":removeActionTimeScale(action)": {
        "prefix": ":removeActionTimeScale(action)",
        "body": [
            ":removeActionTimeScale(action)"
        ],
        "description": ":removeActionTimeScale(action)"
    },
    ":isActionInTimeScaleMap(action)": {
        "prefix": ":isActionInTimeScaleMap(action)",
        "body": [
            ":isActionInTimeScaleMap(action)"
        ],
        "description": ":isActionInTimeScaleMap(action)"
    },
    ":getAIControl()": {
        "prefix": ":getAIControl()",
        "body": [
            ":getAIControl()"
        ],
        "description": ":getAIControl()"
    },
    ":startAI()": {
        "prefix": ":startAI()",
        "body": [
            ":startAI()"
        ],
        "description": ":startAI()"
    },
    ":stopAI()": {
        "prefix": ":stopAI()",
        "body": [
            ":stopAI()"
        ],
        "description": ":stopAI()"
    },
    ":setAITargetPos(pos, enable)": {
        "prefix": ":setAITargetPos(pos, enable)",
        "body": [
            ":setAITargetPos(pos, enable)"
        ],
        "description": ":setAITargetPos(pos, enable)"
    },
    ":enableAITargetPos(enable)": {
        "prefix": ":enableAITargetPos(enable)",
        "body": [
            ":enableAITargetPos(enable)"
        ],
        "description": ":enableAITargetPos(enable)"
    },
    ":addSkill( fullName )": {
        "prefix": ":addSkill( fullName )",
        "body": [
            ":addSkill( fullName )"
        ],
        "description": ":addSkill( fullName )"
    },
    ":removeSkill ( fullName )": {
        "prefix": ":removeSkill ( fullName )",
        "body": [
            ":removeSkill ( fullName )"
        ],
        "description": ":removeSkill ( fullName )"
    },
    ":addBuff( fullName )": {
        "prefix": ":addBuff( fullName )",
        "body": [
            ":addBuff( fullName )"
        ],
        "description": ":addBuff( fullName )"
    },
    ":removeBuff(buff)": {
        "prefix": ":removeBuff(buff)",
        "body": [
            ":removeBuff(buff)"
        ],
        "description": ":removeBuff(buff)"
    },
    ":createPet(cfgName, show, map, pos)": {
        "prefix": ":createPet(cfgName, show, map, pos)",
        "body": [
            ":createPet(cfgName, show, map, pos)"
        ],
        "description": ":createPet(cfgName, show, map, pos)"
    },
    ":addPet(entity, index)": {
        "prefix": ":addPet(entity, index)",
        "body": [
            ":addPet(entity, index)"
        ],
        "description": ":addPet(entity, index)"
    },
    ":relievedPet(index)": {
        "prefix": ":relievedPet(index)",
        "body": [
            ":relievedPet(index)"
        ],
        "description": ":relievedPet(index)"
    },
    ":changePetCfg(index, cfgName)": {
        "prefix": ":changePetCfg(index, cfgName)",
        "body": [
            ":changePetCfg(index, cfgName)"
        ],
        "description": ":changePetCfg(index, cfgName)"
    },
    ":showPet(index, map, pos)": {
        "prefix": ":showPet(index, map, pos)",
        "body": [
            ":showPet(index, map, pos)"
        ],
        "description": ":showPet(index, map, pos)"
    },
    ":hidePet(index)": {
        "prefix": ":hidePet(index)",
        "body": [
            ":hidePet(index)"
        ],
        "description": ":hidePet(index)"
    },
    ":getPet(index)": {
        "prefix": ":getPet(index)",
        "body": [
            ":getPet(index)"
        ],
        "description": ":getPet(index)"
    },
    ":addCurrency(coinName, count, reason)": {
        "prefix": ":addCurrency(coinName, count, reason)",
        "body": [
            ":addCurrency(coinName, count, reason)"
        ],
        "description": ":addCurrency(coinName, count, reason)"
    },
    ":payCurrency(coinName, count, clear, check, reason)": {
        "prefix": ":payCurrency(coinName, count, clear, check, reason)",
        "body": [
            ":payCurrency(coinName, count, clear, check, reason)"
        ],
        "description": ":payCurrency(coinName, count, clear, check, reason)"
    },
    ":getWalletBalance(coinName)": {
        "prefix": ":getWalletBalance(coinName)",
        "body": [
            ":getWalletBalance(coinName)"
        ],
        "description": ":getWalletBalance(coinName)"
    },
    ":sendTip(tipType, textKey, keepTime)": {
        "prefix": ":sendTip(tipType, textKey, keepTime)",
        "body": [
            ":sendTip(tipType, textKey, keepTime)"
        ],
        "description": ":sendTip(tipType, textKey, keepTime)"
    },
    ".Instance()": {
        "prefix": ".Instance()",
        "body": [
            ".Instance()"
        ],
        "description": ".Instance()"
    },
    ":drawLine(from, to, color)": {
        "prefix": ":drawLine(from, to, color)",
        "body": [
            ":drawLine(from, to, color)"
        ],
        "description": ":drawLine(from, to, color)"
    },
    ":drawAABB(min, max, color)": {
        "prefix": ":drawAABB(min, max, color)",
        "body": [
            ":drawAABB(min, max, color)"
        ],
        "description": ":drawAABB(min, max, color)"
    },
    ":addEntry(flagName, renderFunc)": {
        "prefix": ":addEntry(flagName, renderFunc)",
        "body": [
            ":addEntry(flagName, renderFunc)"
        ],
        "description": ":addEntry(flagName, renderFunc)"
    },
    ":drawTriangle(vertex1, vertex2, vertex3, color)": {
        "prefix": ":drawTriangle(vertex1, vertex2, vertex3, color)",
        "body": [
            ":drawTriangle(vertex1, vertex2, vertex3, color)"
        ],
        "description": ":drawTriangle(vertex1, vertex2, vertex3, color)"
    },
    ":drawCircle(center, radius, normal, color)": {
        "prefix": ":drawCircle(center, radius, normal, color)",
        "body": [
            ":drawCircle(center, radius, normal, color)"
        ],
        "description": ":drawCircle(center, radius, normal, color)"
    },
    ":drawSphere(center, radius, color)": {
        "prefix": ":drawSphere(center, radius, color)",
        "body": [
            ":drawSphere(center, radius, color)"
        ],
        "description": ":drawSphere(center, radius, color)"
    },
    ":setLineWidth(width)": {
        "prefix": ":setLineWidth(width)",
        "body": [
            ":setLineWidth(width)"
        ],
        "description": ":setLineWidth(width)"
    },
    ":play3dSound(filePath, pos, isLoop)": {
        "prefix": ":play3dSound(filePath, pos, isLoop)",
        "body": [
            ":play3dSound(filePath, pos, isLoop)"
        ],
        "description": ":play3dSound(filePath, pos, isLoop)"
    },
    ":set3DMinMaxDistance(nSoundId, minDistance, maxDistance)": {
        "prefix": ":set3DMinMaxDistance(nSoundId, minDistance, maxDistance)",
        "body": [
            ":set3DMinMaxDistance(nSoundId, minDistance, maxDistance)"
        ],
        "description": ":set3DMinMaxDistance(nSoundId, minDistance, maxDistance)"
    },
    ":set3DRollOffMode(nSoundId, mode)": {
        "prefix": ":set3DRollOffMode(nSoundId, mode)",
        "body": [
            ":set3DRollOffMode(nSoundId, mode)"
        ],
        "description": ":set3DRollOffMode(nSoundId, mode)"
    },
    ":play2dSound(filePath, isLoop)": {
        "prefix": ":play2dSound(filePath, isLoop)",
        "body": [
            ":play2dSound(filePath, isLoop)"
        ],
        "description": ":play2dSound(filePath, isLoop)"
    },
    ":stopSound(nSoundId)": {
        "prefix": ":stopSound(nSoundId)",
        "body": [
            ":stopSound(nSoundId)"
        ],
        "description": ":stopSound(nSoundId)"
    },
    ":setSoundsVolume(nSoundId, volume)": {
        "prefix": ":setSoundsVolume(nSoundId, volume)",
        "body": [
            ":setSoundsVolume(nSoundId, volume)"
        ],
        "description": ":setSoundsVolume(nSoundId, volume)"
    },
    ":getSoundsVolume(nSoundId)": {
        "prefix": ":getSoundsVolume(nSoundId)",
        "body": [
            ":getSoundsVolume(nSoundId)"
        ],
        "description": ":getSoundsVolume(nSoundId)"
    },
    ":isPlaying(nSoundId)": {
        "prefix": ":isPlaying(nSoundId)",
        "body": [
            ":isPlaying(nSoundId)"
        ],
        "description": ":isPlaying(nSoundId)"
    },
    ":pauseSound(nSoundId)": {
        "prefix": ":pauseSound(nSoundId)",
        "body": [
            ":pauseSound(nSoundId)"
        ],
        "description": ":pauseSound(nSoundId)"
    },
    ":resumeSound(nSoundId)": {
        "prefix": ":resumeSound(nSoundId)",
        "body": [
            ":resumeSound(nSoundId)"
        ],
        "description": ":resumeSound(nSoundId)"
    },
    ":allMute(isMute)": {
        "prefix": ":allMute(isMute)",
        "body": [
            ":allMute(isMute)"
        ],
        "description": ":allMute(isMute)"
    },
    ":setGlobalVolume(volume)": {
        "prefix": ":setGlobalVolume(volume)",
        "body": [
            ":setGlobalVolume(volume)"
        ],
        "description": ":setGlobalVolume(volume)"
    },
    ":setSoundSpeed(nSoundId, percentage)": {
        "prefix": ":setSoundSpeed(nSoundId, percentage)",
        "body": [
            ":setSoundSpeed(nSoundId, percentage)"
        ],
        "description": ":setSoundSpeed(nSoundId, percentage)"
    },
    ":getGlobalVolume()": {
        "prefix": ":getGlobalVolume()",
        "body": [
            ":getGlobalVolume()"
        ],
        "description": ":getGlobalVolume()"
    },
    ":attach(entity)": {
        "prefix": ":attach(entity)",
        "body": [
            ":attach(entity)"
        ],
        "description": ":attach(entity)"
    },
    ":jump()": {
        "prefix": ":jump()",
        "body": [
            ":jump()"
        ],
        "description": ":jump()"
    },
    ":switchPersonView()": {
        "prefix": ":switchPersonView()",
        "body": [
            ":switchPersonView()"
        ],
        "description": ":switchPersonView()"
    },
    ":setCanSwitchView(false)": {
        "prefix": ":setCanSwitchView(false)",
        "body": [
            ":setCanSwitchView(false)"
        ],
        "description": ":setCanSwitchView(false)"
    },
    ":setPersonView(1)": {
        "prefix": ":setPersonView(1)",
        "body": [
            ":setPersonView(1)"
        ],
        "description": ":setPersonView(1)"
    },
    ":getPersonView()": {
        "prefix": ":getPersonView()",
        "body": [
            ":getPersonView()"
        ],
        "description": ":getPersonView()"
    },
    ":control()": {
        "prefix": ":control()",
        "body": [
            ":control()"
        ],
        "description": ":control()"
    },
    ":setViewEntity(entity)": {
        "prefix": ":setViewEntity(entity)",
        "body": [
            ":setViewEntity(entity)"
        ],
        "description": ":setViewEntity(entity)"
    },
    ":viewEntity()": {
        "prefix": ":viewEntity()",
        "body": [
            ":viewEntity()"
        ],
        "description": ":viewEntity()"
    },
    ":getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)": {
        "prefix": ":getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)",
        "body": [
            ":getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)"
        ],
        "description": ":getRayTraceResult(screenPos, rayLength, isNeedLogicPositinToScreenPosition, getHitEffectRelated, getTrajectoryEffectRelated, ignoreObjIds)"
    },
    ":getClosestRayTraceResult(startPos, endPos, rayLength)": {
        "prefix": ":getClosestRayTraceResult(startPos, endPos, rayLength)",
        "body": [
            ":getClosestRayTraceResult(startPos, endPos, rayLength)"
        ],
        "description": ":getClosestRayTraceResult(startPos, endPos, rayLength)"
    },
    ":getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)": {
        "prefix": ":getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)",
        "body": [
            ":getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)"
        ],
        "description": ":getRayResultBetweenPosAndScreen(pos, screenPos, rayLength)"
    },
    ":changeCameraView(pos, yaw, pitch, distance, smooth)": {
        "prefix": ":changeCameraView(pos, yaw, pitch, distance, smooth)",
        "body": [
            ":changeCameraView(pos, yaw, pitch, distance, smooth)"
        ],
        "description": ":changeCameraView(pos, yaw, pitch, distance, smooth)"
    },
    ":changeCameraCfg(config, modeViewIndex)": {
        "prefix": ":changeCameraCfg(config, modeViewIndex)",
        "body": [
            ":changeCameraCfg(config, modeViewIndex)"
        ],
        "description": ":changeCameraCfg(config, modeViewIndex)"
    },
    ":getCameraInfo(viewIndex)": {
        "prefix": ":getCameraInfo(viewIndex)",
        "body": [
            ":getCameraInfo(viewIndex)"
        ],
        "description": ":getCameraInfo(viewIndex)"
    },
    ":getScreenPos(position)": {
        "prefix": ":getScreenPos(position)",
        "body": [
            ":getScreenPos(position)"
        ],
        "description": ":getScreenPos(position)"
    },
    ":getScreenSize()": {
        "prefix": ":getScreenSize()",
        "body": [
            ":getScreenSize()"
        ],
        "description": ":getScreenSize()"
    },
    ":playEffectByPos(templateName, position, yaw, duration, scale)": {
        "prefix": ":playEffectByPos(templateName, position, yaw, duration, scale)",
        "body": [
            ":playEffectByPos(templateName, position, yaw, duration, scale)"
        ],
        "description": ":playEffectByPos(templateName, position, yaw, duration, scale)"
    },
    ":delEffect(templateName, position)": {
        "prefix": ":delEffect(templateName, position)",
        "body": [
            ":delEffect(templateName, position)"
        ],
        "description": ":delEffect(templateName, position)"
    },
    ":addBetweenEffect(templateName, position, endPos, duration)": {
        "prefix": ":addBetweenEffect(templateName, position, endPos, duration)",
        "body": [
            ":addBetweenEffect(templateName, position, endPos, duration)"
        ],
        "description": ":addBetweenEffect(templateName, position, endPos, duration)"
    },
    ":trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)": {
        "prefix": ":trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)",
        "body": [
            ":trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)"
        ],
        "description": ":trajectoryEffect(templateName, position, pitch, yaw, roll, duration, extendName)"
    },
    ":getClickPos()": {
        "prefix": ":getClickPos()",
        "body": [
            ":getClickPos()"
        ],
        "description": ":getClickPos()"
    },
    ":toScreenClickPos(pos)": {
        "prefix": ":toScreenClickPos(pos)",
        "body": [
            ":toScreenClickPos(pos)"
        ],
        "description": ":toScreenClickPos(pos)"
    },
    ":full_name()": {
        "prefix": ":full_name()",
        "body": [
            ":full_name()"
        ],
        "description": ":full_name()"
    },
    ":stack_count_max()": {
        "prefix": ":stack_count_max()",
        "body": [
            ":stack_count_max()"
        ],
        "description": ":stack_count_max()"
    },
    ":null()": {
        "prefix": ":null()",
        "body": [
            ":null()"
        ],
        "description": ":null()"
    },
    ":tid()": {
        "prefix": ":tid()",
        "body": [
            ":tid()"
        ],
        "description": ":tid()"
    },
    ":slot()": {
        "prefix": ":slot()",
        "body": [
            ":slot()"
        ],
        "description": ":slot()"
    },
    ":replace(fullName)": {
        "prefix": ":replace(fullName)",
        "body": [
            ":replace(fullName)"
        ],
        "description": ":replace(fullName)"
    },
    ":consume(count)": {
        "prefix": ":consume(count)",
        "body": [
            ":consume(count)"
        ],
        "description": ":consume(count)"
    },
    ":stack_count()": {
        "prefix": ":stack_count()",
        "body": [
            ":stack_count()"
        ],
        "description": ":stack_count()"
    },
    ":set_stack_count(count)": {
        "prefix": ":set_stack_count(count)",
        "body": [
            ":set_stack_count(count)"
        ],
        "description": ":set_stack_count(count)"
    },
    ":stack_free()": {
        "prefix": ":stack_free()",
        "body": [
            ":stack_free()"
        ],
        "description": ":stack_free()"
    },
    ":is_block()": {
        "prefix": ":is_block()",
        "body": [
            ":is_block()"
        ],
        "description": ":is_block()"
    },
    ":block_id()": {
        "prefix": ":block_id()",
        "body": [
            ":block_id()"
        ],
        "description": ":block_id()"
    },
    ":block_cfg()": {
        "prefix": ":block_cfg()",
        "body": [
            ":block_cfg()"
        ],
        "description": ":block_cfg()"
    },
    ":set_block_id(id)": {
        "prefix": ":set_block_id(id)",
        "body": [
            ":set_block_id(id)"
        ],
        "description": ":set_block_id(id)"
    },
    ":set_block(name)": {
        "prefix": ":set_block(name)",
        "body": [
            ":set_block(name)"
        ],
        "description": ":set_block(name)"
    },
    ":model(act)": {
        "prefix": ":model(act)",
        "body": [
            ":model(act)"
        ],
        "description": ":model(act)"
    },
    ":icon()": {
        "prefix": ":icon()",
        "body": [
            ":icon()"
        ],
        "description": ":icon()"
    },
    ".new(fullName, count)": {
        "prefix": ".new(fullName, count)",
        "body": [
            ".new(fullName, count)"
        ],
        "description": ".new(fullName, count)"
    },
    ".newBlock(fullName, count)": {
        "prefix": ".newBlock(fullName, count)",
        "body": [
            ".newBlock(fullName, count)"
        ],
        "description": ".newBlock(fullName, count)"
    },
    ":capacity()": {
        "prefix": ":capacity()",
        "body": [
            ":capacity()"
        ],
        "description": ":capacity()"
    },
    ":set_capacity(capacity)": {
        "prefix": ":set_capacity(capacity)",
        "body": [
            ":set_capacity(capacity)"
        ],
        "description": ":set_capacity(capacity)"
    },
    ":add_capacity(capacity)": {
        "prefix": ":add_capacity(capacity)",
        "body": [
            ":add_capacity(capacity)"
        ],
        "description": ":add_capacity(capacity)"
    },
    ":max_capacity()": {
        "prefix": ":max_capacity()",
        "body": [
            ":max_capacity()"
        ],
        "description": ":max_capacity()"
    },
    ":set_max_capacity(capacity)": {
        "prefix": ":set_max_capacity(capacity)",
        "body": [
            ":set_max_capacity(capacity)"
        ],
        "description": ":set_max_capacity(capacity)"
    },
    ":avail_capacity()": {
        "prefix": ":avail_capacity()",
        "body": [
            ":avail_capacity()"
        ],
        "description": ":avail_capacity()"
    },
    ":type()": {
        "prefix": ":type()",
        "body": [
            ":type()"
        ],
        "description": ":type()"
    },
    ":is_valid_slot(slot)": {
        "prefix": ":is_valid_slot(slot)",
        "body": [
            ":is_valid_slot(slot)"
        ],
        "description": ":is_valid_slot(slot)"
    },
    ":fetch_item(slot)": {
        "prefix": ":fetch_item(slot)",
        "body": [
            ":fetch_item(slot)"
        ],
        "description": ":fetch_item(slot)"
    },
    ":query_items(cmp)": {
        "prefix": ":query_items(cmp)",
        "body": [
            ":query_items(cmp)"
        ],
        "description": ":query_items(cmp)"
    },
    ":find_free(force)": {
        "prefix": ":find_free(force)",
        "body": [
            ":find_free(force)"
        ],
        "description": ":find_free(force)"
    },
    ":count_item_num_by_fullname(fullname)": {
        "prefix": ":count_item_num_by_fullname(fullname)",
        "body": [
            ":count_item_num_by_fullname(fullname)"
        ],
        "description": ":count_item_num_by_fullname(fullname)"
    },
    ":add_tray(tray)": {
        "prefix": ":add_tray(tray)",
        "body": [
            ":add_tray(tray)"
        ],
        "description": ":add_tray(tray)"
    },
    ":fetch_tray(tid)": {
        "prefix": ":fetch_tray(tid)",
        "body": [
            ":fetch_tray(tid)"
        ],
        "description": ":fetch_tray(tid)"
    },
    ":query_trays(filter)": {
        "prefix": ":query_trays(filter)",
        "body": [
            ":query_trays(filter)"
        ],
        "description": ":query_trays(filter)"
    },
    ":find_item(item_name)": {
        "prefix": ":find_item(item_name)",
        "body": [
            ":find_item(item_name)"
        ],
        "description": ":find_item(item_name)"
    },
    ":new_tray(type, capacity)": {
        "prefix": ":new_tray(type, capacity)",
        "body": [
            ":new_tray(type, capacity)"
        ],
        "description": ":new_tray(type, capacity)"
    },
    ":remove_item(slot)": {
        "prefix": ":remove_item(slot)",
        "body": [
            ":remove_item(slot)"
        ],
        "description": ":remove_item(slot)"
    },
    ":settle_item(slot, item)": {
        "prefix": ":settle_item(slot, item)",
        "body": [
            ":settle_item(slot, item)"
        ],
        "description": ":settle_item(slot, item)"
    },
    ":isEnabled()": {
        "prefix": ":isEnabled()",
        "body": [
            ":isEnabled()"
        ],
        "description": ":isEnabled()"
    },
    ":setEnabled(value)": {
        "prefix": ":setEnabled(value)",
        "body": [
            ":setEnabled(value)"
        ],
        "description": ":setEnabled(value)"
    },
    ":isDrawColliderEnabled()": {
        "prefix": ":isDrawColliderEnabled()",
        "body": [
            ":isDrawColliderEnabled()"
        ],
        "description": ":isDrawColliderEnabled()"
    },
    ":setDrawColliderEnabled(enabled)": {
        "prefix": ":setDrawColliderEnabled(enabled)",
        "body": [
            ":setDrawColliderEnabled(enabled)"
        ],
        "description": ":setDrawColliderEnabled(enabled)"
    },
    ":isDrawRegionEnabled()": {
        "prefix": ":isDrawRegionEnabled()",
        "body": [
            ":isDrawRegionEnabled()"
        ],
        "description": ":isDrawRegionEnabled()"
    },
    ":setDrawRegionEnabled(enabled)": {
        "prefix": ":setDrawRegionEnabled(enabled)",
        "body": [
            ":setDrawRegionEnabled(enabled)"
        ],
        "description": ":setDrawRegionEnabled(enabled)"
    },
    ":getCameraSensitive()": {
        "prefix": ":getCameraSensitive()",
        "body": [
            ":getCameraSensitive()"
        ],
        "description": ":getCameraSensitive()"
    },
    ":setCameraSensitive(sensitive)": {
        "prefix": ":setCameraSensitive(sensitive)",
        "body": [
            ":setCameraSensitive(sensitive)"
        ],
        "description": ":setCameraSensitive(sensitive)"
    },
    ":setCustomFog(start, end, density, color)": {
        "prefix": ":setCustomFog(start, end, density, color)",
        "body": [
            ":setCustomFog(start, end, density, color)"
        ],
        "description": ":setCustomFog(start, end, density, color)"
    },
    ":setMainLightDir(dir)": {
        "prefix": ":setMainLightDir(dir)",
        "body": [
            ":setMainLightDir(dir)"
        ],
        "description": ":setMainLightDir(dir)"
    },
    ":setMainLightColor(color)": {
        "prefix": ":setMainLightColor(color)",
        "body": [
            ":setMainLightColor(color)"
        ],
        "description": ":setMainLightColor(color)"
    },
    ":setSubLightColor(color)": {
        "prefix": ":setSubLightColor(color)",
        "body": [
            ":setSubLightColor(color)"
        ],
        "description": ":setSubLightColor(color)"
    },
    ":setAmbientColor(color)": {
        "prefix": ":setAmbientColor(color)",
        "body": [
            ":setAmbientColor(color)"
        ],
        "description": ":setAmbientColor(color)"
    },
    ":setBrightness(color)": {
        "prefix": ":setBrightness(color)",
        "body": [
            ":setBrightness(color)"
        ],
        "description": ":setBrightness(color)"
    },
    ":getMainLightDir()": {
        "prefix": ":getMainLightDir()",
        "body": [
            ":getMainLightDir()"
        ],
        "description": ":getMainLightDir()"
    },
    ":getMainLightColor()": {
        "prefix": ":getMainLightColor()",
        "body": [
            ":getMainLightColor()"
        ],
        "description": ":getMainLightColor()"
    },
    ":getSubLightColor()": {
        "prefix": ":getSubLightColor()",
        "body": [
            ":getSubLightColor()"
        ],
        "description": ":getSubLightColor()"
    },
    ":getAmbientColor()": {
        "prefix": ":getAmbientColor()",
        "body": [
            ":getAmbientColor()"
        ],
        "description": ":getAmbientColor()"
    },
    ":getBrightness()": {
        "prefix": ":getBrightness()",
        "body": [
            ":getBrightness()"
        ],
        "description": ":getBrightness()"
    },
    ":setActorReceiveBlockLight(val)": {
        "prefix": ":setActorReceiveBlockLight(val)",
        "body": [
            ":setActorReceiveBlockLight(val)"
        ],
        "description": ":setActorReceiveBlockLight(val)"
    },
    ":setActorMainLightColor(color)": {
        "prefix": ":setActorMainLightColor(color)",
        "body": [
            ":setActorMainLightColor(color)"
        ],
        "description": ":setActorMainLightColor(color)"
    },
    ":setActorSubLightColor(color)": {
        "prefix": ":setActorSubLightColor(color)",
        "body": [
            ":setActorSubLightColor(color)"
        ],
        "description": ":setActorSubLightColor(color)"
    },
    ":setActorAmbientColor(color)": {
        "prefix": ":setActorAmbientColor(color)",
        "body": [
            ":setActorAmbientColor(color)"
        ],
        "description": ":setActorAmbientColor(color)"
    },
    ":setActorBrightness(color)": {
        "prefix": ":setActorBrightness(color)",
        "body": [
            ":setActorBrightness(color)"
        ],
        "description": ":setActorBrightness(color)"
    },
    ":getActorMainLightColor()": {
        "prefix": ":getActorMainLightColor()",
        "body": [
            ":getActorMainLightColor()"
        ],
        "description": ":getActorMainLightColor()"
    },
    ":getActorSubLightColor()": {
        "prefix": ":getActorSubLightColor()",
        "body": [
            ":getActorSubLightColor()"
        ],
        "description": ":getActorSubLightColor()"
    },
    ":getActorAmbientColor()": {
        "prefix": ":getActorAmbientColor()",
        "body": [
            ":getActorAmbientColor()"
        ],
        "description": ":getActorAmbientColor()"
    },
    ":getActorBrightness()": {
        "prefix": ":getActorBrightness()",
        "body": [
            ":getActorBrightness()"
        ],
        "description": ":getActorBrightness()"
    },
    ":setCurQualityLevel(level)": {
        "prefix": ":setCurQualityLevel(level)",
        "body": [
            ":setCurQualityLevel(level)"
        ],
        "description": ":setCurQualityLevel(level)"
    },
    ":getEnableSpecular()": {
        "prefix": ":getEnableSpecular()",
        "body": [
            ":getEnableSpecular()"
        ],
        "description": ":getEnableSpecular()"
    },
    ":setEnableBlockRender(_val)": {
        "prefix": ":setEnableBlockRender(_val)",
        "body": [
            ":setEnableBlockRender(_val)"
        ],
        "description": ":setEnableBlockRender(_val)"
    },
    ":setEnableActorRender(_val)": {
        "prefix": ":setEnableActorRender(_val)",
        "body": [
            ":setEnableActorRender(_val)"
        ],
        "description": ":setEnableActorRender(_val)"
    },
    ":setEnableEffectRender(_val)": {
        "prefix": ":setEnableEffectRender(_val)",
        "body": [
            ":setEnableEffectRender(_val)"
        ],
        "description": ":setEnableEffectRender(_val)"
    },
    ":setWorldEffectVisualDistance(distance)": {
        "prefix": ":setWorldEffectVisualDistance(distance)",
        "body": [
            ":setWorldEffectVisualDistance(distance)"
        ],
        "description": ":setWorldEffectVisualDistance(distance)"
    },
    ":getWorldEffectVisualDistance()": {
        "prefix": ":getWorldEffectVisualDistance()",
        "body": [
            ":getWorldEffectVisualDistance()"
        ],
        "description": ":getWorldEffectVisualDistance()"
    },
    ":clearSky()": {
        "prefix": ":clearSky()",
        "body": [
            ":clearSky()"
        ],
        "description": ":clearSky()"
    },
    ":addSky(right, left, top, bottom, back, front, time, transition)": {
        "prefix": ":addSky(right, left, top, bottom, back, front, time, transition)",
        "body": [
            ":addSky(right, left, top, bottom, back, front, time, transition)"
        ],
        "description": ":addSky(right, left, top, bottom, back, front, time, transition)"
    },
    ":setEnableAntiAliasing(_val)": {
        "prefix": ":setEnableAntiAliasing(_val)",
        "body": [
            ":setEnableAntiAliasing(_val)"
        ],
        "description": ":setEnableAntiAliasing(_val)"
    },
    ":getEnableAntiAliasing()": {
        "prefix": ":getEnableAntiAliasing()",
        "body": [
            ":getEnableAntiAliasing()"
        ],
        "description": ":getEnableAntiAliasing()"
    },
    ":setEnableBloom(_val)": {
        "prefix": ":setEnableBloom(_val)",
        "body": [
            ":setEnableBloom(_val)"
        ],
        "description": ":setEnableBloom(_val)"
    },
    ":getEnableBloom()": {
        "prefix": ":getEnableBloom()",
        "body": [
            ":getEnableBloom()"
        ],
        "description": ":getEnableBloom()"
    },
    ":setBloomThreshold(val)": {
        "prefix": ":setBloomThreshold(val)",
        "body": [
            ":setBloomThreshold(val)"
        ],
        "description": ":setBloomThreshold(val)"
    },
    ":getBloomThreshold()": {
        "prefix": ":getBloomThreshold()",
        "body": [
            ":getBloomThreshold()"
        ],
        "description": ":getBloomThreshold()"
    },
    ":setBloomSaturation(val)": {
        "prefix": ":setBloomSaturation(val)",
        "body": [
            ":setBloomSaturation(val)"
        ],
        "description": ":setBloomSaturation(val)"
    },
    ":getBloomSaturation()": {
        "prefix": ":getBloomSaturation()",
        "body": [
            ":getBloomSaturation()"
        ],
        "description": ":getBloomSaturation()"
    },
    ":setBloomDeviation(val)": {
        "prefix": ":setBloomDeviation(val)",
        "body": [
            ":setBloomDeviation(val)"
        ],
        "description": ":setBloomDeviation(val)"
    },
    ":getBloomDeviation()": {
        "prefix": ":getBloomDeviation()",
        "body": [
            ":getBloomDeviation()"
        ],
        "description": ":getBloomDeviation()"
    },
    ":setBloomIntensity(val)": {
        "prefix": ":setBloomIntensity(val)",
        "body": [
            ":setBloomIntensity(val)"
        ],
        "description": ":setBloomIntensity(val)"
    },
    ":getBloomIntensity()": {
        "prefix": ":getBloomIntensity()",
        "body": [
            ":getBloomIntensity()"
        ],
        "description": ":getBloomIntensity()"
    },
    ":setEnableMotionBlur(_val)": {
        "prefix": ":setEnableMotionBlur(_val)",
        "body": [
            ":setEnableMotionBlur(_val)"
        ],
        "description": ":setEnableMotionBlur(_val)"
    },
    ":getEnableMotionBlur()": {
        "prefix": ":getEnableMotionBlur()",
        "body": [
            ":getEnableMotionBlur()"
        ],
        "description": ":getEnableMotionBlur()"
    },
    ":setMotionBlurStrength(_val)": {
        "prefix": ":setMotionBlurStrength(_val)",
        "body": [
            ":setMotionBlurStrength(_val)"
        ],
        "description": ":setMotionBlurStrength(_val)"
    },
    ":getMotionBlurStrength()": {
        "prefix": ":getMotionBlurStrength()",
        "body": [
            ":getMotionBlurStrength()"
        ],
        "description": ":getMotionBlurStrength()"
    },
    ":setEnableRadialBlur(_val)": {
        "prefix": ":setEnableRadialBlur(_val)",
        "body": [
            ":setEnableRadialBlur(_val)"
        ],
        "description": ":setEnableRadialBlur(_val)"
    },
    ":setRadialBlurStrength(_val)": {
        "prefix": ":setRadialBlurStrength(_val)",
        "body": [
            ":setRadialBlurStrength(_val)"
        ],
        "description": ":setRadialBlurStrength(_val)"
    },
    ":loadCameraCfg(config)": {
        "prefix": ":loadCameraCfg(config)",
        "body": [
            ":loadCameraCfg(config)"
        ],
        "description": ":loadCameraCfg(config)"
    },
    ":setPersonView(viewMode)": {
        "prefix": ":setPersonView(viewMode)",
        "body": [
            ":setPersonView(viewMode)"
        ],
        "description": ":setPersonView(viewMode)"
    },
    ":clearLight()": {
        "prefix": ":clearLight()",
        "body": [
            ":clearLight()"
        ],
        "description": ":clearLight()"
    },
    ":addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)": {
        "prefix": ":addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)",
        "body": [
            ":addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
        ],
        "description": ":addLight(mainLightDir, mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
    },
    ":clearActorLight()": {
        "prefix": ":clearActorLight()",
        "body": [
            ":clearActorLight()"
        ],
        "description": ":clearActorLight()"
    },
    ":addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)": {
        "prefix": ":addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)",
        "body": [
            ":addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
        ],
        "description": ":addActorLight(mainLightColor, subLightColor, ambientLightColor, brightness, time, transition)"
    },
    ":beginMouseMove(x, y)": {
        "prefix": ":beginMouseMove(x, y)",
        "body": [
            ":beginMouseMove(x, y)"
        ],
        "description": ":beginMouseMove(x, y)"
    },
    ":setMouseMoveState(bState)": {
        "prefix": ":setMouseMoveState(bState)",
        "body": [
            ":setMouseMoveState(bState)"
        ],
        "description": ":setMouseMoveState(bState)"
    },
    ":endMouseMove(x, y)": {
        "prefix": ":endMouseMove(x, y)",
        "body": [
            ":endMouseMove(x, y)"
        ],
        "description": ":endMouseMove(x, y)"
    },
    ":setMousePos(x, y, immd)": {
        "prefix": ":setMousePos(x, y, immd)",
        "body": [
            ":setMousePos(x, y, immd)"
        ],
        "description": ":setMousePos(x, y, immd)"
    },
    ":clearMousePos()": {
        "prefix": ":clearMousePos()",
        "body": [
            ":clearMousePos()"
        ],
        "description": ":clearMousePos()"
    },
    ":setLockViewPos(value)": {
        "prefix": ":setLockViewPos(value)",
        "body": [
            ":setLockViewPos(value)"
        ],
        "description": ":setLockViewPos(value)"
    },
    ":setExtraCameraDistance(distance)": {
        "prefix": ":setExtraCameraDistance(distance)",
        "body": [
            ":setExtraCameraDistance(distance)"
        ],
        "description": ":setExtraCameraDistance(distance)"
    },
    ":isLockBodyRotation()": {
        "prefix": ":isLockBodyRotation()",
        "body": [
            ":isLockBodyRotation()"
        ],
        "description": ":isLockBodyRotation()"
    },
    ":setLockBodyRotation(value)": {
        "prefix": ":setLockBodyRotation(value)",
        "body": [
            ":setLockBodyRotation(value)"
        ],
        "description": ":setLockBodyRotation(value)"
    },
    ":isLockSlideScreen()": {
        "prefix": ":isLockSlideScreen()",
        "body": [
            ":isLockSlideScreen()"
        ],
        "description": ":isLockSlideScreen()"
    },
    ":setLockSlideScreen(value)": {
        "prefix": ":setLockSlideScreen(value)",
        "body": [
            ":setLockSlideScreen(value)"
        ],
        "description": ":setLockSlideScreen(value)"
    },
    ".GetService(name)": {
        "prefix": ".GetService(name)",
        "body": [
            ".GetService(name)"
        ],
        "description": ".GetService(name)"
    },
    ".TriggersAll(name)": {
        "prefix": ".TriggersAll(name)",
        "body": [
            ".TriggersAll(name)"
        ],
        "description": ".TriggersAll(name)"
    },
    ".GetStartGamePlayerCount()": {
        "prefix": ".GetStartGamePlayerCount()",
        "body": [
            ".GetStartGamePlayerCount()"
        ],
        "description": ".GetStartGamePlayerCount()"
    },
    ".GetGameTime()": {
        "prefix": ".GetGameTime()",
        "body": [
            ".GetGameTime()"
        ],
        "description": ".GetGameTime()"
    },
    ".GetAllPlayers()": {
        "prefix": ".GetAllPlayers()",
        "body": [
            ".GetAllPlayers()"
        ],
        "description": ".GetAllPlayers()"
    },
    ".GetAllPlayersCount()": {
        "prefix": ".GetAllPlayersCount()",
        "body": [
            ".GetAllPlayersCount()"
        ],
        "description": ".GetAllPlayersCount()"
    },
    ".GetSurvivePlayers()": {
        "prefix": ".GetSurvivePlayers()",
        "body": [
            ".GetSurvivePlayers()"
        ],
        "description": ".GetSurvivePlayers()"
    },
    ".GetPlayerByUserId(userId)": {
        "prefix": ".GetPlayerByUserId(userId)",
        "body": [
            ".GetPlayerByUserId(userId)"
        ],
        "description": ".GetPlayerByUserId(userId)"
    },
    ".GetSurvivePlayersCount()": {
        "prefix": ".GetSurvivePlayersCount()",
        "body": [
            ".GetSurvivePlayersCount()"
        ],
        "description": ".GetSurvivePlayersCount()"
    },
    ".CreateTeam(id)": {
        "prefix": ".CreateTeam(id)",
        "body": [
            ".CreateTeam(id)"
        ],
        "description": ".CreateTeam(id)"
    },
    ".TryJoinTeamByPlayer(player, teamId)": {
        "prefix": ".TryJoinTeamByPlayer(player, teamId)",
        "body": [
            ".TryJoinTeamByPlayer(player, teamId)"
        ],
        "description": ".TryJoinTeamByPlayer(player, teamId)"
    },
    ".GetTeam(id, create)": {
        "prefix": ".GetTeam(id, create)",
        "body": [
            ".GetTeam(id, create)"
        ],
        "description": ".GetTeam(id, create)"
    },
    ".Exit(player)": {
        "prefix": ".Exit(player)",
        "body": [
            ".Exit(player)"
        ],
        "description": ".Exit(player)"
    },
    ":getFirstPlayer()": {
        "prefix": ":getFirstPlayer()",
        "body": [
            ":getFirstPlayer()"
        ],
        "description": ":getFirstPlayer()"
    },
    ":joinEntity(entity)": {
        "prefix": ":joinEntity(entity)",
        "body": [
            ":joinEntity(entity)"
        ],
        "description": ":joinEntity(entity)"
    },
    ":leaveEntity(entity)": {
        "prefix": ":leaveEntity(entity)",
        "body": [
            ":leaveEntity(entity)"
        ],
        "description": ":leaveEntity(entity)"
    },
    ":dismiss()": {
        "prefix": ":dismiss()",
        "body": [
            ":dismiss()"
        ],
        "description": ":dismiss()"
    },
    ":getEntityList()": {
        "prefix": ":getEntityList()",
        "body": [
            ":getEntityList()"
        ],
        "description": ":getEntityList()"
    },
    ":openWindow(\"dwInstance\")": {
        "prefix": ":openWindow(\"dwInstance\")",
        "body": [
            ":openWindow(\"dwInstance\")"
        ],
        "description": ":openWindow(\"dwInstance\")"
    },
    ":openSceneWindow": {
        "prefix": ":openSceneWindow",
        "body": [
            ":openSceneWindow"
        ],
        "description": ":openSceneWindow"
    },
    ":createWindow(name, type)": {
        "prefix": ":createWindow(name, type)",
        "body": [
            ":createWindow(name, type)"
        ],
        "description": ":createWindow(name, type)"
    },
    ":createStaticText(name)": {
        "prefix": ":createStaticText(name)",
        "body": [
            ":createStaticText(name)"
        ],
        "description": ":createStaticText(name)"
    },
    ":createStaticImage(name)": {
        "prefix": ":createStaticImage(name)",
        "body": [
            ":createStaticImage(name)"
        ],
        "description": ":createStaticImage(name)"
    },
    ":createButton(name)": {
        "prefix": ":createButton(name)",
        "body": [
            ":createButton(name)"
        ],
        "description": ":createButton(name)"
    },
    ":closeWindow(\"dwInstance\", ...)": {
        "prefix": ":closeWindow(\"dwInstance\", ...)",
        "body": [
            ":closeWindow(\"dwInstance\", ...)"
        ],
        "description": ":closeWindow(\"dwInstance\", ...)"
    },
    ":closeSceneWindow(\"dw1\")": {
        "prefix": ":closeSceneWindow(\"dw1\")",
        "body": [
            ":closeSceneWindow(\"dw1\")"
        ],
        "description": ":closeSceneWindow(\"dw1\")"
    },
    ":isOpenWindow(\"dwInstance\")": {
        "prefix": ":isOpenWindow(\"dwInstance\")",
        "body": [
            ":isOpenWindow(\"dwInstance\")"
        ],
        "description": ":isOpenWindow(\"dwInstance\")"
    },
    ":child(childName)": {
        "prefix": ":child(childName)",
        "body": [
            ":child(childName)"
        ],
        "description": ":child(childName)"
    },
    ":close(...)": {
        "prefix": ":close(...)",
        "body": [
            ":close(...)"
        ],
        "description": ":close(...)"
    },
    ":isAlive()": {
        "prefix": ":isAlive()",
        "body": [
            ":isAlive()"
        ],
        "description": ":isAlive()"
    },
    ":getWindow()": {
        "prefix": ":getWindow()",
        "body": [
            ":getWindow()"
        ],
        "description": ":getWindow()"
    },
    ":clone()": {
        "prefix": ":clone()",
        "body": [
            ":clone()"
        ],
        "description": ":clone()"
    },
    ":setProperty(\"Alpha\", 0.5)": {
        "prefix": ":setProperty(\"Alpha\", 0.5)",
        "body": [
            ":setProperty(\"Alpha\", 0.5)"
        ],
        "description": ":setProperty(\"Alpha\", 0.5)"
    },
    ":setAlpha(1.0)": {
        "prefix": ":setAlpha(1.0)",
        "body": [
            ":setAlpha(1.0)"
        ],
        "description": ":setAlpha(1.0)"
    },
    ":setDestroyedByParent(true)": {
        "prefix": ":setDestroyedByParent(true)",
        "body": [
            ":setDestroyedByParent(true)"
        ],
        "description": ":setDestroyedByParent(true)"
    },
    ":setAlwaysOnTop(true)": {
        "prefix": ":setAlwaysOnTop(true)",
        "body": [
            ":setAlwaysOnTop(true)"
        ],
        "description": ":setAlwaysOnTop(true)"
    },
    ":setLevel(1)": {
        "prefix": ":setLevel(1)",
        "body": [
            ":setLevel(1)"
        ],
        "description": ":setLevel(1)"
    },
    ":setEnabled(true)": {
        "prefix": ":setEnabled(true)",
        "body": [
            ":setEnabled(true)"
        ],
        "description": ":setEnabled(true)"
    },
    ":setVisible(true)": {
        "prefix": ":setVisible(true)",
        "body": [
            ":setVisible(true)"
        ],
        "description": ":setVisible(true)"
    },
    ":setClippedByParent(true)": {
        "prefix": ":setClippedByParent(true)",
        "body": [
            ":setClippedByParent(true)"
        ],
        "description": ":setClippedByParent(true)"
    },
    ":setWantsMultiClickEvents(true)": {
        "prefix": ":setWantsMultiClickEvents(true)",
        "body": [
            ":setWantsMultiClickEvents(true)"
        ],
        "description": ":setWantsMultiClickEvents(true)"
    },
    ":setMousePassThroughEnabled(true)": {
        "prefix": ":setMousePassThroughEnabled(true)",
        "body": [
            ":setMousePassThroughEnabled(true)"
        ],
        "description": ":setMousePassThroughEnabled(true)"
    },
    ":setText(\"aa\")": {
        "prefix": ":setText(\"aa\")",
        "body": [
            ":setText(\"aa\")"
        ],
        "description": ":setText(\"aa\")"
    },
    ":setHorizontalAlignment(1)": {
        "prefix": ":setHorizontalAlignment(1)",
        "body": [
            ":setHorizontalAlignment(1)"
        ],
        "description": ":setHorizontalAlignment(1)"
    },
    ":setArea2({0,0},{0,0},{0,100},{0,100})": {
        "prefix": ":setArea2({0,0},{0,0},{0,100},{0,100})",
        "body": [
            ":setArea2({0,0},{0,0},{0,100},{0,100})"
        ],
        "description": ":setArea2({0,0},{0,0},{0,100},{0,100})"
    },
    ":setVerticalAlignment(1)": {
        "prefix": ":setVerticalAlignment(1)",
        "body": [
            ":setVerticalAlignment(1)"
        ],
        "description": ":setVerticalAlignment(1)"
    },
    ":setPosition(UDim2.new(0, 100, 0, 100))": {
        "prefix": ":setPosition(UDim2.new(0, 100, 0, 100))",
        "body": [
            ":setPosition(UDim2.new(0, 100, 0, 100))"
        ],
        "description": ":setPosition(UDim2.new(0, 100, 0, 100))"
    },
    ":setSize(UDim2.new(1, 0, 1, 0))": {
        "prefix": ":setSize(UDim2.new(1, 0, 1, 0))",
        "body": [
            ":setSize(UDim2.new(1, 0, 1, 0))"
        ],
        "description": ":setSize(UDim2.new(1, 0, 1, 0))"
    },
    ":setXPosition(UDim.new(0,100))": {
        "prefix": ":setXPosition(UDim.new(0,100))",
        "body": [
            ":setXPosition(UDim.new(0,100))"
        ],
        "description": ":setXPosition(UDim.new(0,100))"
    },
    ":setYPosition(UDim.new(0.5,0))": {
        "prefix": ":setYPosition(UDim.new(0.5,0))",
        "body": [
            ":setYPosition(UDim.new(0.5,0))"
        ],
        "description": ":setYPosition(UDim.new(0.5,0))"
    },
    ":setWidth(UDim.new(0.5,0))": {
        "prefix": ":setWidth(UDim.new(0.5,0))",
        "body": [
            ":setWidth(UDim.new(0.5,0))"
        ],
        "description": ":setWidth(UDim.new(0.5,0))"
    },
    ":setHeight(UDim.new(0.1,100))": {
        "prefix": ":setHeight(UDim.new(0.1,100))",
        "body": [
            ":setHeight(UDim.new(0.1,100))"
        ],
        "description": ":setHeight(UDim.new(0.1,100))"
    },
    ":setFontStyle(\"BungeeRegular\")": {
        "prefix": ":setFontStyle(\"BungeeRegular\")",
        "body": [
            ":setFontStyle(\"BungeeRegular\")"
        ],
        "description": ":setFontStyle(\"BungeeRegular\")"
    },
    ":setFontSize(40)": {
        "prefix": ":setFontSize(40)",
        "body": [
            ":setFontSize(40)"
        ],
        "description": ":setFontSize(40)"
    },
    ":getProperty(\"Alpha\")": {
        "prefix": ":getProperty(\"Alpha\")",
        "body": [
            ":getProperty(\"Alpha\")"
        ],
        "description": ":getProperty(\"Alpha\")"
    },
    ":getType()": {
        "prefix": ":getType()",
        "body": [
            ":getType()"
        ],
        "description": ":getType()"
    },
    ":getAlpha()": {
        "prefix": ":getAlpha()",
        "body": [
            ":getAlpha()"
        ],
        "description": ":getAlpha()"
    },
    ":isDestroyedByParent()": {
        "prefix": ":isDestroyedByParent()",
        "body": [
            ":isDestroyedByParent()"
        ],
        "description": ":isDestroyedByParent()"
    },
    ":isAlwaysOnTop()": {
        "prefix": ":isAlwaysOnTop()",
        "body": [
            ":isAlwaysOnTop()"
        ],
        "description": ":isAlwaysOnTop()"
    },
    ":getLevel()": {
        "prefix": ":getLevel()",
        "body": [
            ":getLevel()"
        ],
        "description": ":getLevel()"
    },
    ":isDisabled()": {
        "prefix": ":isDisabled()",
        "body": [
            ":isDisabled()"
        ],
        "description": ":isDisabled()"
    },
    ":isVisible()": {
        "prefix": ":isVisible()",
        "body": [
            ":isVisible()"
        ],
        "description": ":isVisible()"
    },
    ":isClippedByParent()": {
        "prefix": ":isClippedByParent()",
        "body": [
            ":isClippedByParent()"
        ],
        "description": ":isClippedByParent()"
    },
    ":wantsMultiClickEvents()": {
        "prefix": ":wantsMultiClickEvents()",
        "body": [
            ":wantsMultiClickEvents()"
        ],
        "description": ":wantsMultiClickEvents()"
    },
    ":isMousePassThroughEnabled()": {
        "prefix": ":isMousePassThroughEnabled()",
        "body": [
            ":isMousePassThroughEnabled()"
        ],
        "description": ":isMousePassThroughEnabled()"
    },
    ":getText()": {
        "prefix": ":getText()",
        "body": [
            ":getText()"
        ],
        "description": ":getText()"
    },
    ":getHorizontalAlignment()": {
        "prefix": ":getHorizontalAlignment()",
        "body": [
            ":getHorizontalAlignment()"
        ],
        "description": ":getHorizontalAlignment()"
    },
    ":getVerticalAlignment()": {
        "prefix": ":getVerticalAlignment()",
        "body": [
            ":getVerticalAlignment()"
        ],
        "description": ":getVerticalAlignment()"
    },
    ":getSize()": {
        "prefix": ":getSize()",
        "body": [
            ":getSize()"
        ],
        "description": ":getSize()"
    },
    ":getPixelPosition()": {
        "prefix": ":getPixelPosition()",
        "body": [
            ":getPixelPosition()"
        ],
        "description": ":getPixelPosition()"
    },
    ":getXPosition()": {
        "prefix": ":getXPosition()",
        "body": [
            ":getXPosition()"
        ],
        "description": ":getXPosition()"
    },
    ":getPixelSize()": {
        "prefix": ":getPixelSize()",
        "body": [
            ":getPixelSize()"
        ],
        "description": ":getPixelSize()"
    },
    ":getYPosition()": {
        "prefix": ":getYPosition()",
        "body": [
            ":getYPosition()"
        ],
        "description": ":getYPosition()"
    },
    ":getWidth()": {
        "prefix": ":getWidth()",
        "body": [
            ":getWidth()"
        ],
        "description": ":getWidth()"
    },
    ":getHeight()": {
        "prefix": ":getHeight()",
        "body": [
            ":getHeight()"
        ],
        "description": ":getHeight()"
    },
    ":getID()": {
        "prefix": ":getID()",
        "body": [
            ":getID()"
        ],
        "description": ":getID()"
    },
    ":isChildID(Id)": {
        "prefix": ":isChildID(Id)",
        "body": [
            ":isChildID(Id)"
        ],
        "description": ":isChildID(Id)"
    },
    ":isChildIDRecursive(Id)": {
        "prefix": ":isChildIDRecursive(Id)",
        "body": [
            ":isChildIDRecursive(Id)"
        ],
        "description": ":isChildIDRecursive(Id)"
    },
    ":getChildById(id)": {
        "prefix": ":getChildById(id)",
        "body": [
            ":getChildById(id)"
        ],
        "description": ":getChildById(id)"
    },
    ":getChildRecursiveById(id)": {
        "prefix": ":getChildRecursiveById(id)",
        "body": [
            ":getChildRecursiveById(id)"
        ],
        "description": ":getChildRecursiveById(id)"
    },
    ":getChildAtIdx(0)": {
        "prefix": ":getChildAtIdx(0)",
        "body": [
            ":getChildAtIdx(0)"
        ],
        "description": ":getChildAtIdx(0)"
    },
    ":getParent()": {
        "prefix": ":getParent()",
        "body": [
            ":getParent()"
        ],
        "description": ":getParent()"
    },
    ":getRootWindow()": {
        "prefix": ":getRootWindow()",
        "body": [
            ":getRootWindow()"
        ],
        "description": ":getRootWindow()"
    },
    ":removeChildByID(id)": {
        "prefix": ":removeChildByID(id)",
        "body": [
            ":removeChildByID(id)"
        ],
        "description": ":removeChildByID(id)"
    },
    ":cleanupChildren()": {
        "prefix": ":cleanupChildren()",
        "body": [
            ":cleanupChildren()"
        ],
        "description": ":cleanupChildren()"
    },
    ":addChild(child)": {
        "prefix": ":addChild(child)",
        "body": [
            ":addChild(child)"
        ],
        "description": ":addChild(child)"
    },
    ":removeChild(child)": {
        "prefix": ":removeChild(child)",
        "body": [
            ":removeChild(child)"
        ],
        "description": ":removeChild(child)"
    },
    ":getChildCount()": {
        "prefix": ":getChildCount()",
        "body": [
            ":getChildCount()"
        ],
        "description": ":getChildCount()"
    },
    ":isChild(child)": {
        "prefix": ":isChild(child)",
        "body": [
            ":isChild(child)"
        ],
        "description": ":isChild(child)"
    },
    ":markNeedsLayouting()": {
        "prefix": ":markNeedsLayouting()",
        "body": [
            ":markNeedsLayouting()"
        ],
        "description": ":markNeedsLayouting()"
    },
    ":needsLayouting()": {
        "prefix": ":needsLayouting()",
        "body": [
            ":needsLayouting()"
        ],
        "description": ":needsLayouting()"
    },
    ":layout()": {
        "prefix": ":layout()",
        "body": [
            ":layout()"
        ],
        "description": ":layout()"
    },
    ":setProperty(\"space\", 5)": {
        "prefix": ":setProperty(\"space\", 5)",
        "body": [
            ":setProperty(\"space\", 5)"
        ],
        "description": ":setProperty(\"space\", 5)"
    },
    ":getProperty(\"space\")": {
        "prefix": ":getProperty(\"space\")",
        "body": [
            ":getProperty(\"space\")"
        ],
        "description": ":getProperty(\"space\")"
    },
    ":setProperty(\"hInterval\", 20)": {
        "prefix": ":setProperty(\"hInterval\", 20)",
        "body": [
            ":setProperty(\"hInterval\", 20)"
        ],
        "description": ":setProperty(\"hInterval\", 20)"
    },
    ":getProperty(\"rowSize\")": {
        "prefix": ":getProperty(\"rowSize\")",
        "body": [
            ":getProperty(\"rowSize\")"
        ],
        "description": ":getProperty(\"rowSize\")"
    },
    ":setProperty(\"Image\", \"icon_7.png\")": {
        "prefix": ":setProperty(\"Image\", \"icon_7.png\")",
        "body": [
            ":setProperty(\"Image\", \"icon_7.png\")"
        ],
        "description": ":setProperty(\"Image\", \"icon_7.png\")"
    },
    ":getProperty(\"Image\")": {
        "prefix": ":getProperty(\"Image\")",
        "body": [
            ":getProperty(\"Image\")"
        ],
        "description": ":getProperty(\"Image\")"
    },
    ":setImage(\"gameres|asset/Texture/Gui/def_image.png\")": {
        "prefix": ":setImage(\"gameres|asset/Texture/Gui/def_image.png\")",
        "body": [
            ":setImage(\"gameres|asset/Texture/Gui/def_image.png\")"
        ],
        "description": ":setImage(\"gameres|asset/Texture/Gui/def_image.png\")"
    },
    ":isFrameEnabled()": {
        "prefix": ":isFrameEnabled()",
        "body": [
            ":isFrameEnabled()"
        ],
        "description": ":isFrameEnabled()"
    },
    ":setFrameEnabled(true)": {
        "prefix": ":setFrameEnabled(true)",
        "body": [
            ":setFrameEnabled(true)"
        ],
        "description": ":setFrameEnabled(true)"
    },
    ":isBackgroundEnabled()": {
        "prefix": ":isBackgroundEnabled()",
        "body": [
            ":isBackgroundEnabled()"
        ],
        "description": ":isBackgroundEnabled()"
    },
    ":setBackgroundEnabled(true)": {
        "prefix": ":setBackgroundEnabled(true)",
        "body": [
            ":setBackgroundEnabled(true)"
        ],
        "description": ":setBackgroundEnabled(true)"
    },
    ":setProperty(\"FrameEnabled\", false)": {
        "prefix": ":setProperty(\"FrameEnabled\", false)",
        "body": [
            ":setProperty(\"FrameEnabled\", false)"
        ],
        "description": ":setProperty(\"FrameEnabled\", false)"
    },
    ":getProperty(\"FrameEnabled\")": {
        "prefix": ":getProperty(\"FrameEnabled\")",
        "body": [
            ":getProperty(\"FrameEnabled\")"
        ],
        "description": ":getProperty(\"FrameEnabled\")"
    },
    ":setTextColours(Color3.new(1,1,1))": {
        "prefix": ":setTextColours(Color3.new(1,1,1))",
        "body": [
            ":setTextColours(Color3.new(1,1,1))"
        ],
        "description": ":setTextColours(Color3.new(1,1,1))"
    },
    ":getTextColours()": {
        "prefix": ":getTextColours()",
        "body": [
            ":getTextColours()"
        ],
        "description": ":getTextColours()"
    },
    ":setHorizontalFormatting(0)": {
        "prefix": ":setHorizontalFormatting(0)",
        "body": [
            ":setHorizontalFormatting(0)"
        ],
        "description": ":setHorizontalFormatting(0)"
    },
    ":getHorizontalFormatting()": {
        "prefix": ":getHorizontalFormatting()",
        "body": [
            ":getHorizontalFormatting()"
        ],
        "description": ":getHorizontalFormatting()"
    },
    ":setVerticalFormatting(0)": {
        "prefix": ":setVerticalFormatting(0)",
        "body": [
            ":setVerticalFormatting(0)"
        ],
        "description": ":setVerticalFormatting(0)"
    },
    ":getVerticalFormatting()": {
        "prefix": ":getVerticalFormatting()",
        "body": [
            ":getVerticalFormatting()"
        ],
        "description": ":getVerticalFormatting()"
    },
    ":setVerticalScrollbarEnabled(true)": {
        "prefix": ":setVerticalScrollbarEnabled(true)",
        "body": [
            ":setVerticalScrollbarEnabled(true)"
        ],
        "description": ":setVerticalScrollbarEnabled(true)"
    },
    ":isVerticalScrollbarEnabled()": {
        "prefix": ":isVerticalScrollbarEnabled()",
        "body": [
            ":isVerticalScrollbarEnabled()"
        ],
        "description": ":isVerticalScrollbarEnabled()"
    },
    ":setHorizontalScrollbarEnabled(true)": {
        "prefix": ":setHorizontalScrollbarEnabled(true)",
        "body": [
            ":setHorizontalScrollbarEnabled(true)"
        ],
        "description": ":setHorizontalScrollbarEnabled(true)"
    },
    ":isHorizontalScrollbarEnabled()": {
        "prefix": ":isHorizontalScrollbarEnabled()",
        "body": [
            ":isHorizontalScrollbarEnabled()"
        ],
        "description": ":isHorizontalScrollbarEnabled()"
    },
    ":setProperty(\"NormalImage\", \"icon_7.png\")": {
        "prefix": ":setProperty(\"NormalImage\", \"icon_7.png\")",
        "body": [
            ":setProperty(\"NormalImage\", \"icon_7.png\")"
        ],
        "description": ":setProperty(\"NormalImage\", \"icon_7.png\")"
    },
    ":getProperty(\"NormalImage\")": {
        "prefix": ":getProperty(\"NormalImage\")",
        "body": [
            ":getProperty(\"NormalImage\")"
        ],
        "description": ":getProperty(\"NormalImage\")"
    },
    ":isPushed()": {
        "prefix": ":isPushed()",
        "body": [
            ":isPushed()"
        ],
        "description": ":isPushed()"
    },
    ":setPushedState(true)": {
        "prefix": ":setPushedState(true)",
        "body": [
            ":setPushedState(true)"
        ],
        "description": ":setPushedState(true)"
    },
    ":setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")": {
        "prefix": ":setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")",
        "body": [
            ":setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")"
        ],
        "description": ":setNormalImage(\"gameres|asset/Texture/Gui/button_green_nor.png\")"
    },
    ":setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")": {
        "prefix": ":setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")",
        "body": [
            ":setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")"
        ],
        "description": ":setPushedImage(\"gameres|asset/Texture/Gui/button_green_act.png\")"
    },
    ":setProperty(\"CurrentProgress\", 0.5)": {
        "prefix": ":setProperty(\"CurrentProgress\", 0.5)",
        "body": [
            ":setProperty(\"CurrentProgress\", 0.5)"
        ],
        "description": ":setProperty(\"CurrentProgress\", 0.5)"
    },
    ":getProperty(\"CurrentProgress\")": {
        "prefix": ":getProperty(\"CurrentProgress\")",
        "body": [
            ":getProperty(\"CurrentProgress\")"
        ],
        "description": ":getProperty(\"CurrentProgress\")"
    },
    ":getProgress()": {
        "prefix": ":getProgress()",
        "body": [
            ":getProgress()"
        ],
        "description": ":getProgress()"
    },
    ":setProgress(0.5)": {
        "prefix": ":setProgress(0.5)",
        "body": [
            ":setProgress(0.5)"
        ],
        "description": ":setProgress(0.5)"
    },
    ":getStepSize()": {
        "prefix": ":getStepSize()",
        "body": [
            ":getStepSize()"
        ],
        "description": ":getStepSize()"
    },
    ":setStepSize(0.01)": {
        "prefix": ":setStepSize(0.01)",
        "body": [
            ":setStepSize(0.01)"
        ],
        "description": ":setStepSize(0.01)"
    },
    ":step()": {
        "prefix": ":step()",
        "body": [
            ":step()"
        ],
        "description": ":step()"
    },
    ":adjustProgress(delta)": {
        "prefix": ":adjustProgress(delta)",
        "body": [
            ":adjustProgress(delta)"
        ],
        "description": ":adjustProgress(delta)"
    },
    ":setVertical(true)": {
        "prefix": ":setVertical(true)",
        "body": [
            ":setVertical(true)"
        ],
        "description": ":setVertical(true)"
    },
    ":isVertical()": {
        "prefix": ":isVertical()",
        "body": [
            ":isVertical()"
        ],
        "description": ":isVertical()"
    },
    ":setReversed(true)": {
        "prefix": ":setReversed(true)",
        "body": [
            ":setReversed(true)"
        ],
        "description": ":setReversed(true)"
    },
    ":isReversed()": {
        "prefix": ":isReversed()",
        "body": [
            ":isReversed()"
        ],
        "description": ":isReversed()"
    },
    ":getCurrentValue()": {
        "prefix": ":getCurrentValue()",
        "body": [
            ":getCurrentValue()"
        ],
        "description": ":getCurrentValue()"
    },
    ":getMaxValue()": {
        "prefix": ":getMaxValue()",
        "body": [
            ":getMaxValue()"
        ],
        "description": ":getMaxValue()"
    },
    ":getClickStep()": {
        "prefix": ":getClickStep()",
        "body": [
            ":getClickStep()"
        ],
        "description": ":getClickStep()"
    },
    ":setMaxValue(maxVal)": {
        "prefix": ":setMaxValue(maxVal)",
        "body": [
            ":setMaxValue(maxVal)"
        ],
        "description": ":setMaxValue(maxVal)"
    },
    ":setCurrentValue(value)": {
        "prefix": ":setCurrentValue(value)",
        "body": [
            ":setCurrentValue(value)"
        ],
        "description": ":setCurrentValue(value)"
    },
    ":setClickStep(step)": {
        "prefix": ":setClickStep(step)",
        "body": [
            ":setClickStep(step)"
        ],
        "description": ":setClickStep(step)"
    },
    ".onSliderValueChanged = function() end": {
        "prefix": ".onSliderValueChanged = function() end",
        "body": [
            ".onSliderValueChanged = function() end"
        ],
        "description": ".onSliderValueChanged = function() end"
    },
    ":setSelection(start_pos,end_pos)": {
        "prefix": ":setSelection(start_pos,end_pos)",
        "body": [
            ":setSelection(start_pos,end_pos)"
        ],
        "description": ":setSelection(start_pos,end_pos)"
    },
    ":setMaskCodePoint(code_point)": {
        "prefix": ":setMaskCodePoint(code_point)",
        "body": [
            ":setMaskCodePoint(code_point)"
        ],
        "description": ":setMaskCodePoint(code_point)"
    },
    ":isReadOnly()": {
        "prefix": ":isReadOnly()",
        "body": [
            ":isReadOnly()"
        ],
        "description": ":isReadOnly()"
    },
    ":isTextMasked()": {
        "prefix": ":isTextMasked()",
        "body": [
            ":isTextMasked()"
        ],
        "description": ":isTextMasked()"
    },
    ":getSelectionStartIndex()": {
        "prefix": ":getSelectionStartIndex()",
        "body": [
            ":getSelectionStartIndex()"
        ],
        "description": ":getSelectionStartIndex()"
    },
    ":getSelectionEndIndex()": {
        "prefix": ":getSelectionEndIndex()",
        "body": [
            ":getSelectionEndIndex()"
        ],
        "description": ":getSelectionEndIndex()"
    },
    ":getSelectionLength()": {
        "prefix": ":getSelectionLength()",
        "body": [
            ":getSelectionLength()"
        ],
        "description": ":getSelectionLength()"
    },
    ":getMaskCodePoint()": {
        "prefix": ":getMaskCodePoint()",
        "body": [
            ":getMaskCodePoint()"
        ],
        "description": ":getMaskCodePoint()"
    },
    ":getMaxTextLength()": {
        "prefix": ":getMaxTextLength()",
        "body": [
            ":getMaxTextLength()"
        ],
        "description": ":getMaxTextLength()"
    },
    ":setReadOnly(setting)": {
        "prefix": ":setReadOnly(setting)",
        "body": [
            ":setReadOnly(setting)"
        ],
        "description": ":setReadOnly(setting)"
    },
    ":setTextMasked(setting)": {
        "prefix": ":setTextMasked(setting)",
        "body": [
            ":setTextMasked(setting)"
        ],
        "description": ":setTextMasked(setting)"
    },
    ":setSelectionStart(start_pos)": {
        "prefix": ":setSelectionStart(start_pos)",
        "body": [
            ":setSelectionStart(start_pos)"
        ],
        "description": ":setSelectionStart(start_pos)"
    },
    ":setSelectionLength(length)": {
        "prefix": ":setSelectionLength(length)",
        "body": [
            ":setSelectionLength(length)"
        ],
        "description": ":setSelectionLength(length)"
    },
    ":setMaxTextLength(max_len)": {
        "prefix": ":setMaxTextLength(max_len)",
        "body": [
            ":setMaxTextLength(max_len)"
        ],
        "description": ":setMaxTextLength(max_len)"
    },
    ".onReadOnlyModeChanged = function() end": {
        "prefix": ".onReadOnlyModeChanged = function() end",
        "body": [
            ".onReadOnlyModeChanged = function() end"
        ],
        "description": ".onReadOnlyModeChanged = function() end"
    },
    ".onMaskedRenderingModeChanged = function() end": {
        "prefix": ".onMaskedRenderingModeChanged = function() end",
        "body": [
            ".onMaskedRenderingModeChanged = function() end"
        ],
        "description": ".onMaskedRenderingModeChanged = function() end"
    },
    ".onMaximumTextLengthChanged = function() end": {
        "prefix": ".onMaximumTextLengthChanged = function() end",
        "body": [
            ".onMaximumTextLengthChanged = function() end"
        ],
        "description": ".onMaximumTextLengthChanged = function() end"
    },
    ".onTextSelectionChanged = function() end": {
        "prefix": ".onTextSelectionChanged = function() end",
        "body": [
            ".onTextSelectionChanged = function() end"
        ],
        "description": ".onTextSelectionChanged = function() end"
    },
    ".onEditboxFull = function() end": {
        "prefix": ".onEditboxFull = function() end",
        "body": [
            ".onEditboxFull = function() end"
        ],
        "description": ".onEditboxFull = function() end"
    },
    ".onTextAccepted = function() end": {
        "prefix": ".onTextAccepted = function() end",
        "body": [
            ".onTextAccepted = function() end"
        ],
        "description": ".onTextAccepted = function() end"
    },
    ":setContentPaneArea(area)": {
        "prefix": ":setContentPaneArea(area)",
        "body": [
            ":setContentPaneArea(area)"
        ],
        "description": ":setContentPaneArea(area)"
    },
    ":setVerticalOverlapSize(overlap)": {
        "prefix": ":setVerticalOverlapSize(overlap)",
        "body": [
            ":setVerticalOverlapSize(overlap)"
        ],
        "description": ":setVerticalOverlapSize(overlap)"
    },
    ":getVerticalOverlapSize()": {
        "prefix": ":getVerticalOverlapSize()",
        "body": [
            ":getVerticalOverlapSize()"
        ],
        "description": ":getVerticalOverlapSize()"
    },
    ":getVerticalScrollPosition()": {
        "prefix": ":getVerticalScrollPosition()",
        "body": [
            ":getVerticalScrollPosition()"
        ],
        "description": ":getVerticalScrollPosition()"
    },
    ":setVerticalScrollPosition(position)": {
        "prefix": ":setVerticalScrollPosition(position)",
        "body": [
            ":setVerticalScrollPosition(position)"
        ],
        "description": ":setVerticalScrollPosition(position)"
    },
    ":isVertScrollbarAlwaysShown()": {
        "prefix": ":isVertScrollbarAlwaysShown()",
        "body": [
            ":isVertScrollbarAlwaysShown()"
        ],
        "description": ":isVertScrollbarAlwaysShown()"
    },
    ":setShowVertScrollbar(setting)": {
        "prefix": ":setShowVertScrollbar(setting)",
        "body": [
            ":setShowVertScrollbar(setting)"
        ],
        "description": ":setShowVertScrollbar(setting)"
    },
    ":isHorzScrollbarAlwaysShown()": {
        "prefix": ":isHorzScrollbarAlwaysShown()",
        "body": [
            ":isHorzScrollbarAlwaysShown()"
        ],
        "description": ":isHorzScrollbarAlwaysShown()"
    },
    ":setShowHorzScrollbar(setting)": {
        "prefix": ":setShowHorzScrollbar(setting)",
        "body": [
            ":setShowHorzScrollbar(setting)"
        ],
        "description": ":setShowHorzScrollbar(setting)"
    },
    ":isContentPaneAutoSized()": {
        "prefix": ":isContentPaneAutoSized()",
        "body": [
            ":isContentPaneAutoSized()"
        ],
        "description": ":isContentPaneAutoSized()"
    },
    ":setContentPaneAutoSized(setting)": {
        "prefix": ":setContentPaneAutoSized(setting)",
        "body": [
            ":setContentPaneAutoSized(setting)"
        ],
        "description": ":setContentPaneAutoSized(setting)"
    },
    ":getContentPaneArea()": {
        "prefix": ":getContentPaneArea()",
        "body": [
            ":getContentPaneArea()"
        ],
        "description": ":getContentPaneArea()"
    },
    ":getHorizontalStepSize()": {
        "prefix": ":getHorizontalStepSize()",
        "body": [
            ":getHorizontalStepSize()"
        ],
        "description": ":getHorizontalStepSize()"
    },
    ":setHorizontalStepSize(step)": {
        "prefix": ":setHorizontalStepSize(step)",
        "body": [
            ":setHorizontalStepSize(step)"
        ],
        "description": ":setHorizontalStepSize(step)"
    },
    ":getHorizontalOverlapSize()": {
        "prefix": ":getHorizontalOverlapSize()",
        "body": [
            ":getHorizontalOverlapSize()"
        ],
        "description": ":getHorizontalOverlapSize()"
    },
    ":setHorizontalOverlapSize(overlap)": {
        "prefix": ":setHorizontalOverlapSize(overlap)",
        "body": [
            ":setHorizontalOverlapSize(overlap)"
        ],
        "description": ":setHorizontalOverlapSize(overlap)"
    },
    ":getHorizontalScrollPosition()": {
        "prefix": ":getHorizontalScrollPosition()",
        "body": [
            ":getHorizontalScrollPosition()"
        ],
        "description": ":getHorizontalScrollPosition()"
    },
    ":setHorizontalScrollPosition(position)": {
        "prefix": ":setHorizontalScrollPosition(position)",
        "body": [
            ":setHorizontalScrollPosition(position)"
        ],
        "description": ":setHorizontalScrollPosition(position)"
    },
    ":getViewableArea()": {
        "prefix": ":getViewableArea()",
        "body": [
            ":getViewableArea()"
        ],
        "description": ":getViewableArea()"
    },
    ".onContentPaneChanged = function() end": {
        "prefix": ".onContentPaneChanged = function() end",
        "body": [
            ".onContentPaneChanged = function() end"
        ],
        "description": ".onContentPaneChanged = function() end"
    },
    ".onAutoSizeSettingChanged = function() end": {
        "prefix": ".onAutoSizeSettingChanged = function() end",
        "body": [
            ".onAutoSizeSettingChanged = function() end"
        ],
        "description": ".onAutoSizeSettingChanged = function() end"
    },
    ":setSelected(select)": {
        "prefix": ":setSelected(select)",
        "body": [
            ":setSelected(select)"
        ],
        "description": ":setSelected(select)"
    },
    ":isSelected()": {
        "prefix": ":isSelected()",
        "body": [
            ":isSelected()"
        ],
        "description": ":isSelected()"
    },
    ".onSelectStateChanged = function() end": {
        "prefix": ".onSelectStateChanged = function() end",
        "body": [
            ".onSelectStateChanged = function() end"
        ],
        "description": ".onSelectStateChanged = function() end"
    },
    ":setGroupID(group)": {
        "prefix": ":setGroupID(group)",
        "body": [
            ":setGroupID(group)"
        ],
        "description": ":setGroupID(group)"
    },
    ":getGroupID()": {
        "prefix": ":getGroupID()",
        "body": [
            ":getGroupID()"
        ],
        "description": ":getGroupID()"
    },
    ":setActorName(\"boy.actor\")": {
        "prefix": ":setActorName(\"boy.actor\")",
        "body": [
            ":setActorName(\"boy.actor\")"
        ],
        "description": ":setActorName(\"boy.actor\")"
    },
    ":setSkillName(\"idle\")": {
        "prefix": ":setSkillName(\"idle\")",
        "body": [
            ":setSkillName(\"idle\")"
        ],
        "description": ":setSkillName(\"idle\")"
    },
    ":getSkillName()": {
        "prefix": ":getSkillName()",
        "body": [
            ":getSkillName()"
        ],
        "description": ":getSkillName()"
    },
    ":setActorScale(0.5)": {
        "prefix": ":setActorScale(0.5)",
        "body": [
            ":setActorScale(0.5)"
        ],
        "description": ":setActorScale(0.5)"
    },
    ":getActorScale()": {
        "prefix": ":getActorScale()",
        "body": [
            ":getActorScale()"
        ],
        "description": ":getActorScale()"
    },
    ":setPosition(:v3(10,10,10))": {
        "prefix": ":setPosition(:v3(10,10,10))",
        "body": [
            ":setPosition(:v3(10,10,10))"
        ],
        "description": ":setPosition(:v3(10,10,10))"
    },
    ":setRotateX(90)": {
        "prefix": ":setRotateX(90)",
        "body": [
            ":setRotateX(90)"
        ],
        "description": ":setRotateX(90)"
    },
    ":getRotateX()": {
        "prefix": ":getRotateX()",
        "body": [
            ":getRotateX()"
        ],
        "description": ":getRotateX()"
    },
    ":setRotateY(90)": {
        "prefix": ":setRotateY(90)",
        "body": [
            ":setRotateY(90)"
        ],
        "description": ":setRotateY(90)"
    },
    ":getRotateY()": {
        "prefix": ":getRotateY()",
        "body": [
            ":getRotateY()"
        ],
        "description": ":getRotateY()"
    },
    ":setRotateZ(90)": {
        "prefix": ":setRotateZ(90)",
        "body": [
            ":setRotateZ(90)"
        ],
        "description": ":setRotateZ(90)"
    },
    ":getRotateZ()": {
        "prefix": ":getRotateZ()",
        "body": [
            ":getRotateZ()"
        ],
        "description": ":getRotateZ()"
    },
    ":useBodyPart(\"hair\",\"my_source_hair1\")": {
        "prefix": ":useBodyPart(\"hair\",\"my_source_hair1\")",
        "body": [
            ":useBodyPart(\"hair\",\"my_source_hair1\")"
        ],
        "description": ":useBodyPart(\"hair\",\"my_source_hair1\")"
    },
    ":unloadBodyPart(\"hair\")": {
        "prefix": ":unloadBodyPart(\"hair\")",
        "body": [
            ":unloadBodyPart(\"hair\")"
        ],
        "description": ":unloadBodyPart(\"hair\")"
    },
    ":scaleBodyPart(\"head\",:v3(2,1,1))": {
        "prefix": ":scaleBodyPart(\"head\",:v3(2,1,1))",
        "body": [
            ":scaleBodyPart(\"head\",:v3(2,1,1))"
        ],
        "description": ":scaleBodyPart(\"head\",:v3(2,1,1))"
    },
    ":offsetBodyPart(\"head\",:v3(2,1,1))": {
        "prefix": ":offsetBodyPart(\"head\",:v3(2,1,1))",
        "body": [
            ":offsetBodyPart(\"head\",:v3(2,1,1))"
        ],
        "description": ":offsetBodyPart(\"head\",:v3(2,1,1))"
    },
    ":isActorPrepared()": {
        "prefix": ":isActorPrepared()",
        "body": [
            ":isActorPrepared()"
        ],
        "description": ":isActorPrepared()"
    },
    ":setRotation({x = 0, y = 1, z = 2})": {
        "prefix": ":setRotation({x = 0, y = 1, z = 2})",
        "body": [
            ":setRotation({x = 0, y = 1, z = 2})"
        ],
        "description": ":setRotation({x = 0, y = 1, z = 2})"
    },
    ":getRotation()": {
        "prefix": ":getRotation()",
        "body": [
            ":getRotation()"
        ],
        "description": ":getRotation()"
    },
    ":setPosition({x = 0, y = 1, z = 2})": {
        "prefix": ":setPosition({x = 0, y = 1, z = 2})",
        "body": [
            ":setPosition({x = 0, y = 1, z = 2})"
        ],
        "description": ":setPosition({x = 0, y = 1, z = 2})"
    },
    ":setObjID(10)": {
        "prefix": ":setObjID(10)",
        "body": [
            ":setObjID(10)"
        ],
        "description": ":setObjID(10)"
    },
    ":getObjID()": {
        "prefix": ":getObjID()",
        "body": [
            ":getObjID()"
        ],
        "description": ":getObjID()"
    },
    ":toText(arg)": {
        "prefix": ":toText(arg)",
        "body": [
            ":toText(arg)"
        ],
        "description": ":toText(arg)"
    },
    ".getYearMonthStr(time)": {
        "prefix": ".getYearMonthStr(time)",
        "body": [
            ".getYearMonthStr(time)"
        ],
        "description": ".getYearMonthStr(time)"
    },
    ".getYearWeekStr(time)": {
        "prefix": ".getYearWeekStr(time)",
        "body": [
            ".getYearWeekStr(time)"
        ],
        "description": ".getYearWeekStr(time)"
    },
    ".getWeeksOfYear(time)": {
        "prefix": ".getWeeksOfYear(time)",
        "body": [
            ".getWeeksOfYear(time)"
        ],
        "description": ".getWeeksOfYear(time)"
    },
    ".getYearDayStr(time)": {
        "prefix": ".getYearDayStr(time)",
        "body": [
            ".getYearDayStr(time)"
        ],
        "description": ".getYearDayStr(time)"
    },
    ".getMonthStartTime(time)": {
        "prefix": ".getMonthStartTime(time)",
        "body": [
            ".getMonthStartTime(time)"
        ],
        "description": ".getMonthStartTime(time)"
    },
    ".getWeekStartTime(time)": {
        "prefix": ".getWeekStartTime(time)",
        "body": [
            ".getWeekStartTime(time)"
        ],
        "description": ".getWeekStartTime(time)"
    },
    ".getDayStartTime(time)": {
        "prefix": ".getDayStartTime(time)",
        "body": [
            ".getDayStartTime(time)"
        ],
        "description": ".getDayStartTime(time)"
    },
    ".getMonthEndTime(time)": {
        "prefix": ".getMonthEndTime(time)",
        "body": [
            ".getMonthEndTime(time)"
        ],
        "description": ".getMonthEndTime(time)"
    },
    ".getWeekEndTime(time)": {
        "prefix": ".getWeekEndTime(time)",
        "body": [
            ".getWeekEndTime(time)"
        ],
        "description": ".getWeekEndTime(time)"
    },
    ".getDayEndTime(time)": {
        "prefix": ".getDayEndTime(time)",
        "body": [
            ".getDayEndTime(time)"
        ],
        "description": ".getDayEndTime(time)"
    },
    ".isSameDay(time1, time2)": {
        "prefix": ".isSameDay(time1, time2)",
        "body": [
            ".isSameDay(time1, time2)"
        ],
        "description": ".isSameDay(time1, time2)"
    },
    ".isSameWeek(time1, time2)": {
        "prefix": ".isSameWeek(time1, time2)",
        "body": [
            ".isSameWeek(time1, time2)"
        ],
        "description": ".isSameWeek(time1, time2)"
    },
    ":new(x, y, z)": {
        "prefix": ":new(x, y, z)",
        "body": [
            ":new(x, y, z)"
        ],
        "description": ":new(x, y, z)"
    },
    ":lenSqr()": {
        "prefix": ":lenSqr()",
        "body": [
            ":lenSqr()"
        ],
        "description": ":lenSqr()"
    },
    ":len()": {
        "prefix": ":len()",
        "body": [
            ":len()"
        ],
        "description": ":len()"
    },
    ":copy()": {
        "prefix": ":copy()",
        "body": [
            ":copy()"
        ],
        "description": ":copy()"
    },
    ":isZero()": {
        "prefix": ":isZero()",
        "body": [
            ":isZero()"
        ],
        "description": ":isZero()"
    },
    ":normalize()": {
        "prefix": ":normalize()",
        "body": [
            ":normalize()"
        ],
        "description": ":normalize()"
    },
    ":blockPos()": {
        "prefix": ":blockPos()",
        "body": [
            ":blockPos()"
        ],
        "description": ":blockPos()"
    },
    ":dot(rhs)": {
        "prefix": ":dot(rhs)",
        "body": [
            ":dot(rhs)"
        ],
        "description": ":dot(rhs)"
    },
    ":cross(rhs)": {
        "prefix": ":cross(rhs)",
        "body": [
            ":cross(rhs)"
        ],
        "description": ":cross(rhs)"
    },
    ":getDataByUserId(subKey, dataKey, callback, failback)": {
        "prefix": ":getDataByUserId(subKey, dataKey, callback, failback)",
        "body": [
            ":getDataByUserId(subKey, dataKey, callback, failback)"
        ],
        "description": ":getDataByUserId(subKey, dataKey, callback, failback)"
    },
    ":setData(subKey, dataKey, data, immediately)": {
        "prefix": ":setData(subKey, dataKey, data, immediately)",
        "body": [
            ":setData(subKey, dataKey, data, immediately)"
        ],
        "description": ":setData(subKey, dataKey, data, immediately)"
    },
    ":trySendZIncBy(immediately)": {
        "prefix": ":trySendZIncBy(immediately)",
        "body": [
            ":trySendZIncBy(immediately)"
        ],
        "description": ":trySendZIncBy(immediately)"
    },
    ":trySendZExpire(immediately)": {
        "prefix": ":trySendZExpire(immediately)",
        "body": [
            ":trySendZExpire(immediately)"
        ],
        "description": ":trySendZExpire(immediately)"
    },
    ":hasCachedData()": {
        "prefix": ":hasCachedData()",
        "body": [
            ":hasCachedData()"
        ],
        "description": ":hasCachedData()"
    },
    ":ZExpireat(setName, timeStamp)": {
        "prefix": ":ZExpireat(setName, timeStamp)",
        "body": [
            ":ZExpireat(setName, timeStamp)"
        ],
        "description": ":ZExpireat(setName, timeStamp)"
    },
    ":ZIncrBy(setName, key, value)": {
        "prefix": ":ZIncrBy(setName, key, value)",
        "body": [
            ":ZIncrBy(setName, key, value)"
        ],
        "description": ":ZIncrBy(setName, key, value)"
    },
    ":ZAdd(setName, key, value)": {
        "prefix": ":ZAdd(setName, key, value)",
        "body": [
            ":ZAdd(setName, key, value)"
        ],
        "description": ":ZAdd(setName, key, value)"
    },
    ":ZRemove(setName, key)": {
        "prefix": ":ZRemove(setName, key)",
        "body": [
            ":ZRemove(setName, key)"
        ],
        "description": ":ZRemove(setName, key)"
    },
    ":ZScore(setName, key, callback)": {
        "prefix": ":ZScore(setName, key, callback)",
        "body": [
            ":ZScore(setName, key, callback)"
        ],
        "description": ":ZScore(setName, key, callback)"
    },
    ":ZRange(setName, start, end, callback)": {
        "prefix": ":ZRange(setName, start, end, callback)",
        "body": [
            ":ZRange(setName, start, end, callback)"
        ],
        "description": ":ZRange(setName, start, end, callback)"
    },
    ":LoadCacheByUserIds(userIds, callback)": {
        "prefix": ":LoadCacheByUserIds(userIds, callback)",
        "body": [
            ":LoadCacheByUserIds(userIds, callback)"
        ],
        "description": ":LoadCacheByUserIds(userIds, callback)"
    },
    ":CancelRequest(session)": {
        "prefix": ":CancelRequest(session)",
        "body": [
            ":CancelRequest(session)"
        ],
        "description": ":CancelRequest(session)"
    },
    ":GetCache(userId)": {
        "prefix": ":GetCache(userId)",
        "body": [
            ":GetCache(userId)"
        ],
        "description": ":GetCache(userId)"
    },
    ":payMoney(player, uniqueId, price, callBack)": {
        "prefix": ":payMoney(player, uniqueId, price, callBack)",
        "body": [
            ":payMoney(player, uniqueId, price, callBack)"
        ],
        "description": ":payMoney(player, uniqueId, price, callBack)"
    },
    ":defineAdPlace(place)": {
        "prefix": ":defineAdPlace(place)",
        "body": [
            ":defineAdPlace(place)"
        ],
        "description": ":defineAdPlace(place)"
    },
    ":reportAdPlace(place)": {
        "prefix": ":reportAdPlace(place)",
        "body": [
            ":reportAdPlace(place)"
        ],
        "description": ":reportAdPlace(place)"
    },
    ":videoAd(place, adIndex, callBack)": {
        "prefix": ":videoAd(place, adIndex, callBack)",
        "body": [
            ":videoAd(place, adIndex, callBack)"
        ],
        "description": ":videoAd(place, adIndex, callBack)"
    },
    ":registerEnableVideoAdChange(callBack)": {
        "prefix": ":registerEnableVideoAdChange(callBack)",
        "body": [
            ":registerEnableVideoAdChange(callBack)"
        ],
        "description": ":registerEnableVideoAdChange(callBack)"
    },
    ":canEnableVideoAd()": {
        "prefix": ":canEnableVideoAd()",
        "body": [
            ":canEnableVideoAd()"
        ],
        "description": ":canEnableVideoAd()"
    },
    ":setProperty(\"useGravity\", \"true\")": {
        "prefix": ":setProperty(\"useGravity\", \"true\")",
        "body": [
            ":setProperty(\"useGravity\", \"true\")"
        ],
        "description": ":setProperty(\"useGravity\", \"true\")"
    },
    ":move(:new(1,1,1))": {
        "prefix": ":move(:new(1,1,1))",
        "body": [
            ":move(:new(1,1,1))"
        ],
        "description": ":move(:new(1,1,1))"
    },
    ":moveUntilCollide(:new(1,1,1))": {
        "prefix": ":moveUntilCollide(:new(1,1,1))",
        "body": [
            ":moveUntilCollide(:new(1,1,1))"
        ],
        "description": ":moveUntilCollide(:new(1,1,1))"
    },
    ":getVolume()": {
        "prefix": ":getVolume()",
        "body": [
            ":getVolume()"
        ],
        "description": ":getVolume()"
    },
    ":setMass(2)": {
        "prefix": ":setMass(2)",
        "body": [
            ":setMass(2)"
        ],
        "description": ":setMass(2)"
    },
    ":getMass()": {
        "prefix": ":getMass()",
        "body": [
            ":getMass()"
        ],
        "description": ":getMass()"
    },
    ":setDensity(2)": {
        "prefix": ":setDensity(2)",
        "body": [
            ":setDensity(2)"
        ],
        "description": ":setDensity(2)"
    },
    ":getDensity()": {
        "prefix": ":getDensity()",
        "body": [
            ":getDensity()"
        ],
        "description": ":getDensity()"
    },
    ":setFriction(2)": {
        "prefix": ":setFriction(2)",
        "body": [
            ":setFriction(2)"
        ],
        "description": ":setFriction(2)"
    },
    ":getFriction()": {
        "prefix": ":getFriction()",
        "body": [
            ":getFriction()"
        ],
        "description": ":getFriction()"
    },
    ":setRestitution(2)": {
        "prefix": ":setRestitution(2)",
        "body": [
            ":setRestitution(2)"
        ],
        "description": ":setRestitution(2)"
    },
    ":getRestitution()": {
        "prefix": ":getRestitution()",
        "body": [
            ":getRestitution()"
        ],
        "description": ":getRestitution()"
    },
    ":applyForce(:new(1,1,1))": {
        "prefix": ":applyForce(:new(1,1,1))",
        "body": [
            ":applyForce(:new(1,1,1))"
        ],
        "description": ":applyForce(:new(1,1,1))"
    },
    ":applyTorque(:new(1,1,1))": {
        "prefix": ":applyTorque(:new(1,1,1))",
        "body": [
            ":applyTorque(:new(1,1,1))"
        ],
        "description": ":applyTorque(:new(1,1,1))"
    },
    ":setUseAnchor(setting)": {
        "prefix": ":setUseAnchor(setting)",
        "body": [
            ":setUseAnchor(setting)"
        ],
        "description": ":setUseAnchor(setting)"
    },
    ":isUseAnchor()": {
        "prefix": ":isUseAnchor()",
        "body": [
            ":isUseAnchor()"
        ],
        "description": ":isUseAnchor()"
    },
    ":setUseGravity(false)": {
        "prefix": ":setUseGravity(false)",
        "body": [
            ":setUseGravity(false)"
        ],
        "description": ":setUseGravity(false)"
    },
    ":isUseGravity()": {
        "prefix": ":isUseGravity()",
        "body": [
            ":isUseGravity()"
        ],
        "description": ":isUseGravity()"
    },
    ":setLineVelocity(:new(1,0,0))": {
        "prefix": ":setLineVelocity(:new(1,0,0))",
        "body": [
            ":setLineVelocity(:new(1,0,0))"
        ],
        "description": ":setLineVelocity(:new(1,0,0))"
    },
    ":getCurLineVelocity()": {
        "prefix": ":getCurLineVelocity()",
        "body": [
            ":getCurLineVelocity()"
        ],
        "description": ":getCurLineVelocity()"
    },
    ":setAngleVelocity(:new(1,0,0))": {
        "prefix": ":setAngleVelocity(:new(1,0,0))",
        "body": [
            ":setAngleVelocity(:new(1,0,0))"
        ],
        "description": ":setAngleVelocity(:new(1,0,0))"
    },
    ":getCurAngleVelocity()": {
        "prefix": ":getCurAngleVelocity()",
        "body": [
            ":getCurAngleVelocity()"
        ],
        "description": ":getCurAngleVelocity()"
    },
    ":destoryAllConstraint()": {
        "prefix": ":destoryAllConstraint()",
        "body": [
            ":destoryAllConstraint()"
        ],
        "description": ":destoryAllConstraint()"
    },
    ":connect(signalKey, handle)": {
        "prefix": ":connect(signalKey, handle)",
        "body": [
            ":connect(signalKey, handle)"
        ],
        "description": ":connect(signalKey, handle)"
    },
    ":isConstrainted()": {
        "prefix": ":isConstrainted()",
        "body": [
            ":isConstrainted()"
        ],
        "description": ":isConstrainted()"
    },
    ":getAllConstrainPtr()": {
        "prefix": ":getAllConstrainPtr()",
        "body": [
            ":getAllConstrainPtr()"
        ],
        "description": ":getAllConstrainPtr()"
    },
    ":setPrimaryPart(part)": {
        "prefix": ":setPrimaryPart(part)",
        "body": [
            ":setPrimaryPart(part)"
        ],
        "description": ":setPrimaryPart(part)"
    },
    ":getMasterPart()": {
        "prefix": ":getMasterPart()",
        "body": [
            ":getMasterPart()"
        ],
        "description": ":getMasterPart()"
    },
    ":getSlavePart()": {
        "prefix": ":getSlavePart()",
        "body": [
            ":getSlavePart()"
        ],
        "description": ":getSlavePart()"
    },
    ".Create(\"Part\")": {
        "prefix": ".Create(\"Part\")",
        "body": [
            ".Create(\"Part\")"
        ],
        "description": ".Create(\"Part\")"
    },
    ":getInstanceID()": {
        "prefix": ":getInstanceID()",
        "body": [
            ":getInstanceID()"
        ],
        "description": ":getInstanceID()"
    },
    ".getByInstanceId(id)": {
        "prefix": ".getByInstanceId(id)",
        "body": [
            ".getByInstanceId(id)"
        ],
        "description": ".getByInstanceId(id)"
    },
    ":setParent(parent)": {
        "prefix": ":setParent(parent)",
        "body": [
            ":setParent(parent)"
        ],
        "description": ":setParent(parent)"
    },
    ":getChildrenCount()": {
        "prefix": ":getChildrenCount()",
        "body": [
            ":getChildrenCount()"
        ],
        "description": ":getChildrenCount()"
    },
    ":getChildAt(0)": {
        "prefix": ":getChildAt(0)",
        "body": [
            ":getChildAt(0)"
        ],
        "description": ":getChildAt(0)"
    },
    ":findFirstAncestor(name)": {
        "prefix": ":findFirstAncestor(name)",
        "body": [
            ":findFirstAncestor(name)"
        ],
        "description": ":findFirstAncestor(name)"
    },
    ":findFirstAncestorOfClass(className)": {
        "prefix": ":findFirstAncestorOfClass(className)",
        "body": [
            ":findFirstAncestorOfClass(className)"
        ],
        "description": ":findFirstAncestorOfClass(className)"
    },
    ":findFirstChild(name, recursive)": {
        "prefix": ":findFirstChild(name, recursive)",
        "body": [
            ":findFirstChild(name, recursive)"
        ],
        "description": ":findFirstChild(name, recursive)"
    },
    ":findFirstChildOfClass(className)": {
        "prefix": ":findFirstChildOfClass(className)",
        "body": [
            ":findFirstChildOfClass(className)"
        ],
        "description": ":findFirstChildOfClass(className)"
    },
    ":isA(className)": {
        "prefix": ":isA(className)",
        "body": [
            ":isA(className)"
        ],
        "description": ":isA(className)"
    },
    ":isAncestorOf(descendant)": {
        "prefix": ":isAncestorOf(descendant)",
        "body": [
            ":isAncestorOf(descendant)"
        ],
        "description": ":isAncestorOf(descendant)"
    },
    ":isDescendantOf(ancestor)": {
        "prefix": ":isDescendantOf(ancestor)",
        "body": [
            ":isDescendantOf(ancestor)"
        ],
        "description": ":isDescendantOf(ancestor)"
    },
    ".sendServerHandler(player, name, packet)": {
        "prefix": ".sendServerHandler(player, name, packet)",
        "body": [
            ".sendServerHandler(player, name, packet)"
        ],
        "description": ".sendServerHandler(player, name, packet)"
    },
    ".sendServerHandlerToTracking(entity, name, packet, includeSelf)": {
        "prefix": ".sendServerHandlerToTracking(entity, name, packet, includeSelf)",
        "body": [
            ".sendServerHandlerToTracking(entity, name, packet, includeSelf)"
        ],
        "description": ".sendServerHandlerToTracking(entity, name, packet, includeSelf)"
    },
    ".sendServerHandlerToAll(name, packet)": {
        "prefix": ".sendServerHandlerToAll(name, packet)",
        "body": [
            ".sendServerHandlerToAll(name, packet)"
        ],
        "description": ".sendServerHandlerToAll(name, packet)"
    },
    ".sendClientHandler(name, packet, resp)": {
        "prefix": ".sendClientHandler(name, packet, resp)",
        "body": [
            ".sendClientHandler(name, packet, resp)"
        ],
        "description": ".sendClientHandler(name, packet, resp)"
    },
    ".sendOtherClient(userId, name, packet)": {
        "prefix": ".sendOtherClient(userId, name, packet)",
        "body": [
            ".sendOtherClient(userId, name, packet)"
        ],
        "description": ".sendOtherClient(userId, name, packet)"
    },
    ":subscribeEvent(name, func, args)": {
        "prefix": ":subscribeEvent(name, func, args)",
        "body": [
            ":subscribeEvent(name, func, args)"
        ],
        "description": ":subscribeEvent(name, func, args)"
    },
    ":unsubscribeEvent(name, index)": {
        "prefix": ":unsubscribeEvent(name, index)",
        "body": [
            ":unsubscribeEvent(name, index)"
        ],
        "description": ":unsubscribeEvent(name, index)"
    },
    ":emitEvent(name, args)": {
        "prefix": ":emitEvent(name, args)",
        "body": [
            ":emitEvent(name, args)"
        ],
        "description": ":emitEvent(name, args)"
    },
    ".CheckTriggers(cfg, name, context)": {
        "prefix": ".CheckTriggers(cfg, name, context)",
        "body": [
            ".CheckTriggers(cfg, name, context)"
        ],
        "description": ".CheckTriggers(cfg, name, context)"
    },
    ".CheckTriggersOnly(cfg, name, context)": {
        "prefix": ".CheckTriggersOnly(cfg, name, context)",
        "body": [
            ".CheckTriggersOnly(cfg, name, context)"
        ],
        "description": ".CheckTriggersOnly(cfg, name, context)"
    },
    ".onMouseClick = function() end": {
        "prefix": ".onMouseClick = function() end",
        "body": [
            ".onMouseClick = function() end"
        ],
        "description": ".onMouseClick = function() end"
    },
    "PackageHandlers.registerServerHandler": {
        "prefix": "PackageHandlers.registerServerHandler",
        "body": [
            "PackageHandlers.registerServerHandler(\"ServerTest\", function(player, packet)",
            "    print(player.name, Lib.pv(packet))",
            "end)"
        ],
        "description": "PackageHandlers.registerServerHandler"
    },
    "PackageHandlers.registerClientHandler": {
        "prefix": "PackageHandlers.registerClientHandler",
        "body": [
            "PackageHandlers.registerClientHandler(\"ClientTest\", function(player, packet)",
            "    print(player.name, Lib.pv(packet))",
            "end)"
        ],
        "description": "PackageHandlers.registerClientHandler"
    },
    "Trigger.RegisterHandler": {
        "prefix": "trgRe",
        "body": [
            "Trigger.RegisterHandler(this:cfg(), \"ENTITY_ENTER\", function(context)",
            "    local player = context.obj1",
            "    print(player.name .. \"enter game!\")",
            "end)"
        ],
        "description": "Trigger.RegisterHandler"
    },
    "Trigger.addHandler": {
        "prefix": "trgAdd",
        "body": [
            "local cancelFunc = Trigger.addHandler(this:cfg(), \"ENTITY_ENTER\", function(context)",
            "    local player = context.obj1",
            "    print(player.name .. \"enter game!\")",
            "end)"
        ],
        "description": "Trigger.addHandler"
    },
    "UI:onOpen": {
        "prefix": "UI:onOpen",
        "body": [
            "function self:onOpen(p)",
            "  print(p)",
            "end"
        ],
        "description": "UI:onOpen"
    },
    "luaclass": {
        "prefix": "luaclass",
        "body": [
          "require \"common.class\"",
          "",
          "local MyClass = class(\"MyClass\")",
          "",
          "function MyClass:ctor()",
          "    -- contructor",
          "end",
          "",
          "-- set getter",
          "function MyClass:__index( index )",
          "    return rawget( MyClass, index )",
          "end",
          "",
          "-- set setter",
          "function MyClass:__newindex( index, value )",
          "    rawset(MyClass, index, value )",
          "end",
          "",
          "return MyClass"
        ],
        "description": "luaclass"
    }
}